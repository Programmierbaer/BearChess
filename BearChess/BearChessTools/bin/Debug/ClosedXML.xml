<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClosedXML</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/>
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks>
            <see langword="null"/> may be used as the name of the receiver in an instance method.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata. This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/master/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c>
            flag should not be set in method headers.
            </summary>
            <remarks>
            This attribute is unsafe because it may reveal uninitialized memory to
            the application in certain instances (e.g., reading from uninitialized
            stackalloc'd memory). If applied to a method directly, the attribute
            applies to that method and all nested functions (lambdas, local
            functions) below it. If applied to a type or module, it applies to all
            methods nested inside. This attribute is intentionally not permitted on
            assemblies. Use at the module level instead to apply to multiple type
            declarations.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
             <summary>
             An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
             </summary>
             <example>
             Example of a valid use case. The Win32 `GetTickCount()` function is a small performance related function
             that reads some global memory and returns the value. In this case, the GC transition overhead is significantly
             more than the memory read.
             <code>
             using System;
             using System.Runtime.InteropServices;
             class Program
             {
                 [DllImport("Kernel32")]
                 [SuppressGCTransition]
                 static extern int GetTickCount();
                 static void Main()
                 {
                     Console.WriteLine($"{GetTickCount()}");
                 }
             }
             </code>
             </example>
             <remarks>
             This attribute is ignored if applied to a method without the <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            
             Forgoing this transition can yield benefits when the cost of the transition is more than the execution time
             of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime
             provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function the
             GC must transition from Cooperative mode into Preemptive mode. Full details on these modes can be found at
             https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/clr-code-guide.md#2.1.8.
             Suppressing the GC transition is an advanced scenario and should not be done without fully understanding
             potential consequences.
            
             One of these consequences is an impact to Mixed-mode debugging (https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).
             During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that
             has been marked with this attribute. A workaround is to switch to native debugging and set a breakpoint in the native function.
             In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example
             stepping through the native code or diagnosing an exception thrown from the native code.
            
             The runtime may load the native library for method marked with this attribute in advance before the method is called for the first time.
             Usage of this attribute is not recommended for platform neutral libraries with conditional platform specific code.
            
             The P/Invoke method that this attribute is applied to must have all of the following properties:
               * Native function always executes for a trivial amount of time (less than 1 microsecond).
               * Native function does not perform a blocking syscall (e.g. any type of I/O).
               * Native function does not call back into the runtime (e.g. Reverse P/Invoke).
               * Native function does not throw exceptions.
               * Native function does not manipulate locks or other concurrency primitives.
            
             Consequences of invalid uses of this attribute:
               * GC starvation.
               * Immediate runtime termination.
               * Data corruption.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
            <remarks>
            Methods marked with this attribute have the following restrictions:
              * Method must be marked "static".
              * Must not be called from managed code.
              * Must only have <see href="https://docs.microsoft.com/dotnet/framework/interop/blittable-and-non-blittable-types">blittable</see> arguments.
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
            <remarks>
            Supplied types must be from the official "System.Runtime.CompilerServices" namespace and
            be of the form "CallConvXXX".
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Reflection.NullabilityInfo">
            <summary>
            A class that represents nullability info
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.Type">
            <summary>
            The <see cref="T:System.Type" /> of the member or generic parameter
            to which this NullabilityInfo belongs
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ReadState">
            <summary>
            The nullability read state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.WriteState">
            <summary>
            The nullability write state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ElementType">
            <summary>
            If the member type is an array, gives the <see cref="T:System.Reflection.NullabilityInfo" /> of the elements of the array, null otherwise
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.GenericTypeArguments">
            <summary>
            If the member type is a generic type, gives the array of <see cref="T:System.Reflection.NullabilityInfo" /> for each type parameter
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityState">
            <summary>
            An enum that represents nullability state
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Unknown">
            <summary>
            Nullability context not enabled (oblivious)
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.NotNull">
            <summary>
            Non nullable value or reference type
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Nullable">
            <summary>
            Nullable value or reference type
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityInfoContext">
            <summary>
            Provides APIs for populating nullability information/context from reflection members:
            <see cref="T:System.Reflection.ParameterInfo"/>, <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.EventInfo"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.ParameterInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="parameterInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the parameterInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.PropertyInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.PropertyInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="propertyInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the propertyInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.EventInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.EventInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="eventInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the eventInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.FieldInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.FieldInfo" />
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="fieldInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the fieldInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is allowed as an input even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is disallowed as an input even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
              Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
              Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
              parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
              Gets the condition parameter value.
              Code after the method is considered unreachable by diagnostics if the argument
              to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
              class with the specified parameter value.
            </summary>
            <param name="parameterValue">
              The condition parameter value.
              Code after the method is considered unreachable by diagnostics if the argument
              to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
              Specifies that an output may be <see langword="null"/> even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
              the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
               Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
              The return value condition.
              If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
              The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
              Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
              The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
              Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
              The return value condition. If the method returns this value,
              the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
              The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
              Initializes the attribute with the specified return value condition and list
              of field and property members.
            </summary>
            <param name="returnValue">
              The return value condition. If the method returns this value,
              the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
              The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
              Specifies that an output is not <see langword="null"/> even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
              Gets the associated parameter name.
              The output will be non-<see langword="null"/> if the argument to the
              parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
              The associated parameter name.
              The output will be non-<see langword="null"/> if the argument to the
              parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
              the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
              The return value condition.
              If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
              <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
              <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
              <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.unreachableexception"/>
            <seealso href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/UnreachableException.cs"/>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:PolyfillExtensions">
            <summary>
            Static and thread safe wrapper around NullabilityInfoContext.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.Remove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2"/>, and copies the element
            to the value parameter.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The removed element.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns><code>true</code> if the element is successfully found and removed; otherwise, <code>false</code>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <code>null</code>.</exception>
        </member>
        <member name="M:PolyfillExtensions.GetStreamAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.GetStreamAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.GetByteArrayAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned Task{Byte[]} object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.GetByteArrayAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned Task{byte[]} object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.GetStringAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.GetStringAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.ReadAsStreamAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content and returns a stream that represents the content.
            </summary>
            <remarks>
            Note that this method will internally buffer the content unless <c>CreateContentReadStreamAsync()</c> has been
            implemented to do otherwise.
            </remarks>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content to a byte array as an asynchronous operation.
            </summary>
            <remarks>
            Note that this method will internally buffer the content unless <c>CreateContentReadStreamAsync()</c> has been
            implemented to do otherwise.
            </remarks>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PolyfillExtensions.ReadAsStringAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content to a string as an asynchronous operation.
            </summary>
            <remarks>
            Note that this method will internally buffer the content unless <c>CreateContentReadStreamAsync()</c> has been
            implemented to do otherwise.
            </remarks>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PolyfillExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)" -->
        <!-- Badly formed XML comment ignored for member "M:PolyfillExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])" -->
        <!-- Badly formed XML comment ignored for member "M:PolyfillExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:PolyfillExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])" -->
        <member name="M:PolyfillExtensions.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the elements of a sequence into chunks of size at most <paramref name="size"/>.
            </summary>
            <remarks>
            Every chunk except the last will be of size <paramref name="size"/>.
            The last chunk will contain the remaining elements and may be of a smaller size.
            </remarks>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to chunk.</param>
            <param name="size">Maximum size of each chunk.</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements the input sequence split into chunks of size <paramref name="size"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> is below 1.</exception>
        </member>
        <member name="M:PolyfillExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the maximum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:PolyfillExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the maximum value in a generic sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>The value with the maximum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:PolyfillExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the minby value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the minimum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:PolyfillExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the minimum value in a generic sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>The value with the minimum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="target" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:PolyfillExtensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new enumerable collection that contains the elements from source with the last count elements of the
            source collection omitted.
            </summary>
            <param name="source">An enumerable collection instance.</param>
            <param name="count">The number of elements to omit from the end of the collection.</param>
            <typeparam name="TSource">The type of the elements in the enumerable collection.</typeparam>
            <returns>A new enumerable collection that contains the elements from source minus count elements from the end
            of the collection.</returns>
        </member>
        <member name="M:PolyfillExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Tries to get the value associated with the specified key in the dictionary.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the value to get.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
            A TValue instance. When the method is successful, the returned object is the value associated with
            the specified key. When the method fails, it returns the default value for TValue.
            </returns>
        </member>
        <member name="M:PolyfillExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the value associated with the specified key in the dictionary.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">A dictionary with keys of type TKey and values of type TValue.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
            A TValue instance. When the method is successful, the returned object is the value associated with
            the specified key. When the method fails, it returns the default value for TValue.
            </returns>
        </member>
        <member name="M:PolyfillExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <param name="key">The key of the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <param name="value">The value of the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
        </member>
        <member name="M:PolyfillExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
            <summary>
            Indicates whether a specified value is found in a read-only span. Values are compared using IEquatable{T}.Equals(T).
            </summary>
            <param name="value">The value to search for.</param>
            <returns>true if found, false otherwise.</returns>
        </member>
        <member name="M:PolyfillExtensions.Contains``1(System.Span{``0},``0)">
            <summary>
            Indicates whether a specified value is found in a only span. Values are compared using IEquatable{T}.Equals(T).
            </summary>
            <param name="value">The value to search for.</param>
            <returns>true if found, false otherwise.</returns>
        </member>
        <member name="M:PolyfillExtensions.Nanoseconds(System.TimeSpan)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.Nanosecond(System.DateTime)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.Nanosecond(System.DateTimeOffset)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.Microseconds(System.TimeSpan)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.Microsecond(System.DateTime)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.Microsecond(System.DateTimeOffset)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.AddMicroseconds(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:PolyfillExtensions.AddMicroseconds(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:PolyfillExtensions.CopyTo(System.String,System.Span{System.Char})">
            <summary>
            Copies the contents of this string into the destination span.
            </summary>
            <param name="destination">The span into which to copy this string's contents</param>
        </member>
        <member name="M:PolyfillExtensions.TryCopyTo(System.String,System.Span{System.Char})">
            <summary>
            Copies the contents of this string into the destination span.
            </summary>
            <param name="destination">The span into which to copy this string's contents</param>
            <returns>true if the data was copied; false if the destination was too short to fit the contents of the string.</returns>
        </member>
        <member name="M:PolyfillExtensions.GetHashCode(System.String,System.StringComparison)">
            <summary>
            Returns the hash code for this string using the specified rules.
            </summary>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:PolyfillExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:PolyfillExtensions.StartsWith(System.String,System.Char)">
            <summary>
            Determines whether this string instance starts with the specified character.
            </summary>
            <param name="value">The character to compare.</param>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</remarks>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:PolyfillExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
            <param name="value">The character to seek.</param>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</remarks>
            <returns>true if the value parameter occurs within this string; otherwise, false.</returns>
        </member>
        <member name="M:PolyfillExtensions.Split(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally,
            options. Splits a string into a maximum number of substrings based on the provided character separator,
            optionally omitting empty substrings from the result.
            </summary>
            <param name="separator">A character that delimits the substrings in this instance.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings
            and include empty substrings.</param>
            <returns>An array that contains at most count substrings from this instance that are delimited by separator.</returns>
        </member>
        <member name="M:PolyfillExtensions.Split(System.String,System.Char,System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally,
            options. Splits a string into a maximum number of substrings based on the provided character separator,
            optionally omitting empty substrings from the result.
            </summary>
            <param name="separator">A character that delimits the substrings in this instance.</param>
            <param name="count">The maximum number of elements expected in the array.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings
            and include empty substrings.</param>
            <returns>An array that contains at most count substrings from this instance that are delimited by separator.</returns>
        </member>
        <member name="M:PolyfillExtensions.Contains(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</remarks>
            <param name="value">The character to seek.</param>
            <returns>true if the value parameter occurs within this string; otherwise, false.</returns>
        </member>
        <member name="M:PolyfillExtensions.CopyTo(System.Text.StringBuilder,System.Int32,System.Span{System.Char},System.Int32)">
            <summary>
            Copies the characters from a specified segment of this instance to a destination Char span.
            </summary>
            <param name="sourceIndex">The starting position in this instance where characters will be copied from. The index is zero-based.</param>
            <param name="destination">The writable span where characters will be copied.</param>
            <param name="count">The number of characters to be copied.</param>
        </member>
        <member name="M:PolyfillExtensions.Append(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
            <summary>
            Appends the string representation of a specified read-only character span to this instance.
            </summary>
            <param name="value">The read-only character span to append.</param>
            <returns>A reference to this instance after the append operation is completed.</returns>
        </member>
        <member name="M:PolyfillExtensions.Equals(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
            <summary>
            Returns a value indicating whether the characters in this instance are equal to the characters in a specified
            read-only character span.
            </summary>
            <param name="span">The character span to compare with the current instance.</param>
            <remarks>
            The Equals method performs an ordinal comparison to determine whether the characters in the current instance
            and span are equal.
            </remarks>
            <returns>true if the characters in this instance and span are the same; otherwise, false.</returns>
        </member>
        <member name="M:PolyfillExtensions.ReadToEndAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <c>TResult</c> parameter contains
            a string with the characters from the current position to the end of the stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:PolyfillExtensions.ReadLineAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously and returns the data as a string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A value task that represents the asynchronous read operation. The value of the <c>TResult</c>
            parameter contains the next line from the text reader, or is <see langword="null" /> if all of the characters have been read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.SByte,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Byte,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Int16,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.UInt16,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Int32,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.UInt32,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Int64,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.UInt64,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Single,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Double,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Decimal,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.Boolean,System.Span{System.Char},System.Int32@)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.DateTimeOffset,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.TryFormat(System.DateTime,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current instance into the provided span of characters.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.IsGenericMethodParameter(System.Type)">
            <summary>
            Gets a value that indicates whether the current Type represents a type parameter in the definition of a generic method.
            </summary>
        </member>
        <member name="M:PolyfillExtensions.GetMemberWithSameMetadataDefinitionAs(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Searches for the MemberInfo on the current Type that matches the specified MemberInfo.
            </summary>
            <param name="type">The MemberInfo to find on the current Type.</param>
            <param name="member">The MemberInfo to find on the current Type.</param>
            <returns>An object representing the member on the current Type that matches the specified member.</returns>
        </member>
        <member name="T:ClosedXML.Excel.IXLAutoFilter">
            <summary>
            <para>
            Autofilter can sort and filter (hide) values in a non-empty area of a sheet. Each table can
            have autofilter and each worksheet can have at most one range with an autofilter. First row
            of the area contains headers, remaining rows contain sorted and filtered data.
            </para>
            <para>
            Sorting of rows is done <see cref="M:ClosedXML.Excel.IXLAutoFilter.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/> method, using the passed parameters. The sort
            properties (<see cref="P:ClosedXML.Excel.IXLAutoFilter.SortColumn"/> and <see cref="P:ClosedXML.Excel.IXLAutoFilter.SortOrder"/>) are updated from
            properties passed to the <see cref="M:ClosedXML.Excel.IXLAutoFilter.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/> method. Sorting can be done only on values of
            one column.
            </para>
            <para>
            Autofilter can filter rows through <see cref="M:ClosedXML.Excel.IXLAutoFilter.Reapply"/> method. The filter evaluates
            conditions of the autofilter and leaves visible only rows that satisfy the conditions.
            Rows that don't satisfy filter conditions are marked as <see cref="P:ClosedXML.Excel.IXLRow.IsHidden">hidden</see>.
            Filter conditions can be specified for each column (accessible through <see cref="M:ClosedXML.Excel.IXLAutoFilter.Column(System.String)"/>
            methods), e.g. <c>sheet.AutoFilter.Column(1).Top(10, XLTopBottomType.Percent)</c>
            creates a filter that displays only rows with values in top 10% percentile.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAutoFilter.HiddenRows">
            <summary>
            Get rows of <see cref="P:ClosedXML.Excel.IXLAutoFilter.Range"/> that were hidden because they didn't satisfy filter
            conditions during last filtering.
            </summary>
            <remarks>
            Visibility is automatically updated on filter change.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLAutoFilter.IsEnabled">
            <summary>
            Is autofilter enabled? When autofilter is enabled, it shows the arrow buttons and might
            contain some filter that hide some rows. Disabled autofilter doesn't show arrow buttons
            and all rows are visible.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAutoFilter.Range">
            <summary>
            Range of the autofilter. It consists of a header in first row, followed by data rows.
            It doesn't include totals row for tables.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAutoFilter.SortColumn">
            <summary>
            What column was used during last <see cref="M:ClosedXML.Excel.IXLAutoFilter.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/>. Contains undefined value for not
            yet <see cref="P:ClosedXML.Excel.IXLAutoFilter.Sorted"/> autofilter.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAutoFilter.Sorted">
            <summary>
            Are values in the autofilter range sorted? I.e. the values were either already loaded
            sorted or <see cref="M:ClosedXML.Excel.IXLAutoFilter.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/> has been called at least once.
            </summary>
            <remarks>
            If <c>true</c>, <see cref="P:ClosedXML.Excel.IXLAutoFilter.SortColumn"/> and <see cref="P:ClosedXML.Excel.IXLAutoFilter.SortOrder"/> contain valid values.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLAutoFilter.SortOrder">
            <summary>
            What sorting order was used during last <see cref="M:ClosedXML.Excel.IXLAutoFilter.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/>. Contains undefined value
            for not yet <see cref="P:ClosedXML.Excel.IXLAutoFilter.Sorted"/> autofilter.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAutoFilter.VisibleRows">
            <summary>
            Get rows of <see cref="P:ClosedXML.Excel.IXLAutoFilter.Range"/> that are visible because they satisfied filter
            conditions during last filtering.
            </summary>
            <remarks>
            Visibility is not updated on filter change.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLAutoFilter.Clear">
            <summary>
            Disable autofilter, remove all filters and unhide all rows of the <see cref="P:ClosedXML.Excel.IXLAutoFilter.Range"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLAutoFilter.Column(System.String)">
            <summary>
            Get filter configuration for a column.
            </summary>
            <param name="columnLetter">
            Column letter that determines number in the range, from <em>A</em> as the first column
            of a <see cref="P:ClosedXML.Excel.IXLAutoFilter.Range"/>.
            </param>
            <returns>Filter configuration for the column.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid column.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLAutoFilter.Column(System.Int32)">
            <summary>
            Get filter configuration for a column.
            </summary>
            <param name="columnNumber">Column number in the range, from 1 as the first column of a <see cref="P:ClosedXML.Excel.IXLAutoFilter.Range"/>.</param>
            <returns>Filter configuration for the column.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLAutoFilter.Reapply">
            <summary>
            Apply autofilter filters to the range and show every row that satisfies the conditions
            and hide the ones that don't satisfy conditions.
            </summary>
            <remarks>
            Filter is generally automatically applied on a filter change. This method could be
            called after a cell value change or row deletion.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLAutoFilter.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)">
            <summary>
            Sort rows of the range using data of one column.
            </summary>
            <remarks>
            This method sets <see cref="P:ClosedXML.Excel.IXLAutoFilter.Sorted"/>, <see cref="P:ClosedXML.Excel.IXLAutoFilter.SortColumn"/> and <see cref="P:ClosedXML.Excel.IXLAutoFilter.SortOrder"/> properties.
            </remarks>
            <param name="columnToSortBy">
            Column number in the range, from 1 to width of the <see cref="P:ClosedXML.Excel.IXLAutoFilter.Range"/>.
            </param>
            <param name="sortOrder">Should rows be sorted in ascending or descending order?</param>
            <param name="matchCase">
            Should <see cref="F:ClosedXML.Excel.XLDataType.Text"/> values on the column be matched case sensitive.
            </param>
            <param name="ignoreBlanks">
            <c>true</c> - rows with blank value in the column will always at the end, regardless of
            sorting order. <c>false</c> - blank will be treated as empty string and sorted
            accordingly.
            </param>
        </member>
        <member name="T:ClosedXML.Excel.XLTopBottomType">
            <summary>
            Type of a <see cref="F:ClosedXML.Excel.XLFilterType.TopBottom"/> filter that is used to determine number of
            visible top/bottom values.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLTopBottomType.Items">
            <summary>
            Filter should display requested number of items.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLTopBottomType.Percent">
            <summary>
            Number of displayed items is determined as a percentage data rows of auto filter.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLFilterColumn">
            <summary>
            <para>
            AutoFilter filter configuration for one column in an autofilter <see cref="P:ClosedXML.Excel.IXLAutoFilter.Range">area</see>.
            Filters determine visibility of rows in the autofilter area. Value in the row must satisfy
            all filters in all columns in order for row to be visible, otherwise it is <see cref="P:ClosedXML.Excel.IXLRow.IsHidden"/>.
            </para>
            <para>
            Column can have only one type of filter, so it's not possible to combine several different
            filter types on one column. Methods for adding filters clear other types or remove
            previously set filters when needed. Some types of filters can have multiple conditions (e.g.
            <see cref="F:ClosedXML.Excel.XLFilterType.Regular"/> can have many values while <see cref="F:ClosedXML.Excel.XLFilterType.Dynamic"/>
            can be only one).
            </para>
            <para>
            Whenever filter configuration changes, the filters are immediately reapplied.
            </para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLFilterColumn.Clear(System.Boolean)">
            <summary>
            Remove all filters from the column.
            </summary>
            <param name="reapply">Should the autofilter be immediately reapplied?</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLFilterColumn.AddFilter(ClosedXML.Excel.XLCellValue,System.Boolean)">
            <summary>
            <para>
            Switch to the <see cref="F:ClosedXML.Excel.XLFilterType.Regular"/> filter if filter column has a
            different type (for current type <see cref="P:ClosedXML.Excel.IXLFilterColumn.FilterType"/>) and add
            <paramref name="value"/> to a set of allowed values. Excel displays regular filter as
            a list of possible values in a column with checkbox next to it and user can check which
            one should be displayed.
            </para>
            <para>
            From technical perspective, the passed <paramref name="value"/> is converted to
            a localized string (using current locale) and the column values satisfy the filter
            condition, when the <see cref="M:ClosedXML.Excel.IXLCell.GetFormattedString(System.Globalization.CultureInfo)">formatted string of a cell
            </see> matches any filter string.
            </para>
            <para>
            Examples of less intuitive behavior: filter value is <c>2.5</c> in locale cs-CZ that
            uses "<em>,</em>" as a decimal separator. The passed <paramref name="value"/>
            is number 2.5, converted immediately to a string <em>2,5</em>. The string is used for
            comparison with values of cells in the column:
            <list type="bullet">
             <item>Number 2.5 formatted with two decimal places as <em>2,50</em> will not match.</item>
             <item>Number 2.5 with default formatting will be matched, because its string is
                   <em>2,5</em> in cs-CZ locale (but not in others, e.g. en-US locale).</item>
             <item>Text <em>2,5</em> will be matched.</item>
            </list>
            </para>
            </summary>
            <remarks>
            This behavior of course highly depends on locale and working with same file on two
            different locales might lead to different results.
            </remarks>
            <param name="value">Value of the filter. The type is <c>XLCellValue</c>, but that's for
            convenience sake. The value is converted to a string and filter works with string.</param>
            <param name="reapply">Should the autofilter be immediately reapplied?</param>
            <returns>Fluent API allowing to add additional filter value.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLFilterColumn.AddDateGroupFilter(System.DateTime,ClosedXML.Excel.XLDateTimeGrouping,System.Boolean)">
            <summary>
            <para>
            Enable autofilter (if needed), switch to the <see cref="F:ClosedXML.Excel.XLFilterType.Regular"/> filter
            if filter column has a different type (for current type <see cref="P:ClosedXML.Excel.IXLFilterColumn.FilterType"/>) and
            add a filter that is satisfied when cell value is a <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>
            and the tested date has same components from <paramref name="dateTimeGrouping"/>
            component up to the <see cref="F:ClosedXML.Excel.XLDateTimeGrouping.Year"/> component with same value
            as the <paramref name="dateTimeGrouping"/>.
            </para>
            <para>
            The condition basically defines a date range (based on the <paramref name="dateTimeGrouping"/>)
            and all dates in the range satisfy the filter. If condition is a day, all date-times
            in the day satisfy the filter. If condition is a month, all date-times in the month
            satisfy the filter.
            </para>
            <para>
            <example>
            Example:
            <code>
            // Filter will be satisfied if the cell value is a XLDataType.DateTime and the month,
            // and year are same as the passed date. The day component in the <c>DateTime</c>
            // is ignored
            AddDateGroupFilter(new DateTime(2023, 7, 15), XLDateTimeGrouping.Month)
            </code>
            </example>
            </para>
            <para>
            There can be multiple date group filters and they are <see cref="F:ClosedXML.Excel.XLFilterType.Regular"/>
            filter types, i.e. they don't delete filters from <see cref="M:ClosedXML.Excel.IXLFilterColumn.AddFilter(ClosedXML.Excel.XLCellValue,System.Boolean)"/>. The cell
            value is satisfied, if it matches any of the text values from <see cref="M:ClosedXML.Excel.IXLFilterColumn.AddFilter(ClosedXML.Excel.XLCellValue,System.Boolean)"/>
            or any date group filter.
            </para>
            </summary>
            <param name="date">Date which components are compared with date values of the column.</param>
            <param name="dateTimeGrouping">
            Starting component of the grouping. Tested date must match all date components of the
            <paramref name="date"/> from this one to the <see cref="F:ClosedXML.Excel.XLDateTimeGrouping.Year"/>.
            </param>
            <param name="reapply">Should the autofilter be immediately reapplied?</param>
            <returns>Fluent API allowing to add additional date time group value.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLFilterColumn.Top(System.Int32,ClosedXML.Excel.XLTopBottomType,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is out of range 1..500.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLFilterColumn.Bottom(System.Int32,ClosedXML.Excel.XLTopBottomType,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is out of range 1..500.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLFilterColumn.FilterType">
            <summary>
            Current filter type used by the filter columns.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLFilterColumn.TopBottomValue">
            <summary>
            Configuration of a <see cref="F:ClosedXML.Excel.XLFilterType.TopBottom"/> filter. It contains how many
            items/percent (depends on <see cref="P:ClosedXML.Excel.IXLFilterColumn.TopBottomType"/>) should filter accept.
            </summary>
            <remarks>
            Returns undefined value, if <see cref="P:ClosedXML.Excel.IXLFilterColumn.FilterType"/> is not <see cref="F:ClosedXML.Excel.XLFilterType.TopBottom"/>.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLFilterColumn.TopBottomType">
            <summary>
            Configuration of a <see cref="F:ClosedXML.Excel.XLFilterType.TopBottom"/> filter. It contains the content
            interpretation of a <see cref="P:ClosedXML.Excel.IXLFilterColumn.TopBottomValue"/> property, i.e. does it mean how many
            percents or how many items?
            </summary>
            <remarks>
            Returns undefined value, if <see cref="P:ClosedXML.Excel.IXLFilterColumn.FilterType"/> is not <see cref="F:ClosedXML.Excel.XLFilterType.TopBottom"/>.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLFilterColumn.TopBottomPart">
            <summary>
            Configuration of a <see cref="F:ClosedXML.Excel.XLFilterType.TopBottom"/> filter. It determines if filter
            should accept items from top or bottom.
            </summary>
            <remarks>
            Returns undefined value, if <see cref="P:ClosedXML.Excel.IXLFilterColumn.FilterType"/> is not <see cref="F:ClosedXML.Excel.XLFilterType.TopBottom"/>.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLFilterColumn.DynamicType">
            <summary>
            Configuration of a <see cref="F:ClosedXML.Excel.XLFilterType.Dynamic"/> filter. It determines the type of
            dynamic filter.
            </summary>
            <remarks>
            Returns undefined value, if <see cref="P:ClosedXML.Excel.IXLFilterColumn.FilterType"/> is not <see cref="F:ClosedXML.Excel.XLFilterType.Dynamic"/>.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLFilterColumn.DynamicValue">
            <summary>
            Configuration of a <see cref="F:ClosedXML.Excel.XLFilterType.Dynamic"/> filter. It contains the dynamic
            value used by the filter, e.g. average. The interpretation depends on
            <see cref="P:ClosedXML.Excel.IXLFilterColumn.DynamicType"/>.
            </summary>
            <remarks>
            Returns undefined value, if <see cref="P:ClosedXML.Excel.IXLFilterColumn.FilterType"/> is not <see cref="F:ClosedXML.Excel.XLFilterType.Dynamic"/>.
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.IXLFilteredColumn">
            <summary>
            A fluent API interface for adding another values to a <see cref="F:ClosedXML.Excel.XLFilterType.Regular"/>
            filter. It is chained by <see cref="M:ClosedXML.Excel.IXLFilterColumn.AddFilter(ClosedXML.Excel.XLCellValue,System.Boolean)"/> method or
            <see cref="M:ClosedXML.Excel.IXLFilterColumn.AddDateGroupFilter(System.DateTime,ClosedXML.Excel.XLDateTimeGrouping,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLFilteredColumn.AddFilter(ClosedXML.Excel.XLCellValue,System.Boolean)">
            <summary>
            Add another value to a subset of allowed values for a <see cref="F:ClosedXML.Excel.XLFilterType.Regular"/>
            filter. See <see cref="M:ClosedXML.Excel.IXLFilterColumn.AddFilter(ClosedXML.Excel.XLCellValue,System.Boolean)"/> for more details.
            </summary>
            <param name="value">Value of the filter. The type is <c>XLCellValue</c>, but that's for
            convenience sake. The value is converted to a string and filter works with string.</param>
            <param name="reapply">Should the autofilter be immediately reapplied?</param>
            <returns>Fluent API allowing to add additional filter value.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLFilteredColumn.AddDateGroupFilter(System.DateTime,ClosedXML.Excel.XLDateTimeGrouping,System.Boolean)">
            <summary>
            Add another grouping to a set of allowed groupings. See <see cref="M:ClosedXML.Excel.IXLFilterColumn.AddDateGroupFilter(System.DateTime,ClosedXML.Excel.XLDateTimeGrouping,System.Boolean)"/>
            for more details.
            </summary>
            <returns>Fluent API allowing to add additional date group filter.</returns>
        </member>
        <member name="F:ClosedXML.Excel.XLAutoFilter._columns">
            <summary>
            Key is column number.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLFilter">
            <summary>
            A single filter condition for auto filter.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLFilter.CustomValue">
            <summary>
            Value for <see cref="F:ClosedXML.Excel.XLFilterType.Custom"/> that is compared using <see cref="P:ClosedXML.Excel.XLFilter.Operator"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLFilter.Value">
            <summary>
            Value for <see cref="F:ClosedXML.Excel.XLFilterType.Regular"/> filter.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLFilterColumn.DynamicValue">
            <summary>
            Basically average for dynamic filters. Value is refreshed during filter reapply.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLFilterColumn.TopBottomFilterValue">
            <summary>
            A filter value used by top/bottom filter to compare with cell value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Caching.IXLRepository">
            <summary>
            Base interface for an abstract repository.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Caching.IXLRepository.Clear">
            <summary>
            Clear the repository;
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Caching.IXLRepository`2.Store(`0@,`1)">
            <summary>
            Put the <paramref name="value"/> into the repository under the specified <paramref name="key"/>
            if there is no such key present.
            </summary>
            <param name="key">Key to identify the value.</param>
            <param name="value">Value to put into the repository if key does not exist.</param>
            <returns>Value stored in the repository under the specified <paramref name="key"/>. If key already existed
            returned value may differ from the input one.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Caching.XLRepositoryBase`2.ContainsKey(`0@,`1@)">
            <summary>
            Check if the specified key is presented in the repository.
            </summary>
            <param name="key">Key to look for.</param>
            <param name="value">Value from the repository stored under specified key or null if key does
            not exist or the entry under this key has already bee GCed.</param>
            <returns>True if entry exists and alive, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Caching.XLRepositoryBase`2.Store(`0@,`1)">
            <summary>
            Put the entity into the repository under the specified key if no other entity with
            the same key is presented.
            </summary>
            <param name="key">Key to identify the entity.</param>
            <param name="value">Entity to store.</param>
            <returns>Entity that is stored in the repository under the specified key
            (it can be either the <paramref name="value"/> or another entity that has been added to
            the repository before.)</returns>
        </member>
        <member name="M:ClosedXML.Excel.Caching.XLRepositoryBase`2.GetEnumerator">
            <summary>
            Enumerate items in repository removing "dead" entries.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Caching.XLWorkbookElementRepositoryBase`2">
            <summary>
            Base repository for <see cref="T:ClosedXML.Excel.XLWorkbook"/> elements.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.AnyValue">
            <summary>
            A discriminated union representing any value that can be passed around in the formula evaluation.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AnyValue.Blank">
            <summary>
            A value of a blank cell or missing argument. Conversion methods mostly treat blank like 0 or an empty string.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.AnyValue.IsScalarType">
            <summary>
            Is the value a scalar (blank, logical, number, text or error).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.TryPickArea(ClosedXML.Excel.XLRangeAddress@,ClosedXML.Excel.XLError@)">
            <summary>
            Try to get a reference that is a one area from the value.
            </summary>
            <param name="area">The found area.</param>
            <param name="error">Original error, if the value is error, <c>#VALUE!</c> if type is not a reference or #REF! if more than one area in the reference.</param>
            <returns>True if area could be determined, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.TryPickSingleOrMultiValue(ClosedXML.Excel.CalcEngine.ScalarValue@,ClosedXML.Excel.CalcEngine.Array@,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            <para>
            Try to get a value more in line with an array formula semantic. The output is always
            either single value or an array.
            </para>
            <para>
            Single cell references are turned into a scalar, multi-area references are turned
            into <see cref="F:ClosedXML.Excel.XLError.IncompatibleValue"/> and single-area references are turned
            into arrays.
            </para>
            </summary>
            <remarks>
            Note the difference in nomenclature: <em>single/multi value</em> vs <em>scalar/collection type</em>.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.ImplicitIntersection(ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Implicit intersection for arguments of functions that don't accept range as a parameter (Excel 2016).
            </summary>
            <returns>Unchanged value for anything other than reference. Reference is changed into a single cell/#VALUE!</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.ReferenceRange(ClosedXML.Excel.CalcEngine.AnyValue@,ClosedXML.Excel.CalcEngine.AnyValue@,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Create a new reference that has one area that contains both operands or #VALUE! if not possible.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.ReferenceUnion(ClosedXML.Excel.CalcEngine.AnyValue@,ClosedXML.Excel.CalcEngine.AnyValue@)">
            <summary>
            Create a new reference by combining areas of both arguments. Areas of the new reference can overlap = some overlapping
            cells might be counted multiple times (<c>SUM((A1;A1)) = 2</c> if <c>A1</c> is <c>1</c>).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.CompareValues(ClosedXML.Excel.CalcEngine.ScalarValue,ClosedXML.Excel.CalcEngine.ScalarValue,System.Globalization.CultureInfo)">
            <summary>
            Compare two scalar values using Excel semantic. Rules for comparison are following:
            <list type="bullet">
                <item>Logical is always greater than any text (thus transitively greater than any number)</item>
                <item>Text is always greater than any number, even if empty string</item>
                <item>Logical are compared by value</item>
                <item>Numbers are compared by value</item>
                <item>Text is compared by through case insensitive comparison for workbook culture.</item>
                <item>
                    If any argument is error, return error (general rule for all operators).
                    If all args are errors, pick leftmost error (technically it is left to
                    implementation, but excel sems to be using left one)
                </item>
            </list>
            </summary>
            <param name="left">Left hand operand of the comparison.</param>
            <param name="right">Right hand operand of the comparison.</param>
            <param name="culture">Culture to use for comparison.</param>
            <returns>
                Return -1 (negative)  if left less than right
                Return 1 (positive) if left greater than left
                Return 0 if both operands are considered equal.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.GetArraySize">
            <summary>
            Get 2d size of the value. For scalars, it's 1x1, for multi-area references,
            it's also 1x1,because it is converted to <c>#VALUE!</c> error.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AnyValue.GetArray">
            <summary>
            Return the array value.
            </summary>
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Array">
            <summary>
            A base class for an 2D array. Every array is at least 1x1.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Array.Width">
            <summary>
            Width of the array, at least 1.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Array.Height">
            <summary>
            Height of the array, at least 1.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Array.Item(System.Int32,System.Int32)">
            <summary>
            Get a value at specified coordinate.
            </summary>
            <param name="y">Uses 0-based notation.</param>
            <param name="x">Uses 0-based notation.</param>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.GetEnumerator">
            <summary>
            An iterator over all elements of an array, from top to bottom, from left to right.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.Apply(System.Func{ClosedXML.Excel.CalcEngine.ScalarValue,ClosedXML.Excel.CalcEngine.ScalarValue})">
            <summary>
            Return a new array that was created by applying a function to each element of the array.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.Apply(ClosedXML.Excel.CalcEngine.Array,ClosedXML.Excel.CalcEngine.BinaryFunc,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Return a new array that was created by applying a function to each element of the left and right array.
            Arrays can have different size and missing values are replaced by <c>#N/A</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Array.Broadcast(System.Int32,System.Int32)">
            <summary>
            Broadcast array for calculation of array formulas.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ConstArray">
            <summary>
            An array of scalar values.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.LiteralArray">
            <summary>
            Array for array literal from a parser. It uses a 1D array of values as a storage.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.LiteralArray.#ctor(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{ClosedXML.Excel.CalcEngine.ScalarValue})">
            <summary>
            Create a new instance of a <see cref="T:ClosedXML.Excel.CalcEngine.LiteralArray"/>.
            </summary>
            <param name="rows">Number of rows of an array/</param>
            <param name="columns">Number of columns of an array.</param>
            <param name="elements">Row by row data of the array. Has the expected size of an array.</param>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.NumberArray">
            <summary>
            A special case of an array that is actually only numbers.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ReferenceArray">
            <summary>
            An array that retrieves its value directly from the worksheet without allocating extra memory.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ResizedArray">
            <summary>
            A resize array from another array. Extra items without value have <c>#N/A</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarArray">
            <summary>
            An array where all elements have same value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.AstNode">
            <summary>
            Base class for all AST nodes. All AST nodes must be immutable.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.AstNode.Accept``2(``0,ClosedXML.Excel.CalcEngine.IFormulaVisitor{``0,``1})">
            <summary>
            Method to accept a visitor (=call a method of visitor with correct type of the node).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ValueNode">
            <summary>
            A base class for all AST nodes that can be evaluated to produce a value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarNode">
            <summary>
            AST node that contains a blank, logical, number, text or an error value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ArrayNode">
            <summary>
            AST node that contains a constant array. Array is at least 1x1.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.UnaryNode">
            <summary>
            Unary expression, e.g. +123
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.BinaryNode">
            <summary>
            Binary expression, e.g. 1+2
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FunctionNode">
            <summary>
            A function call, e.g. <c>SIN(0.5)</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FunctionNode.Name">
            <summary>
            Name of the function.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FunctionNode.Parameters">
            <summary>
            AST nodes for arguments of the function.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.NotSupportedNode">
            <summary>
            An placeholder node for AST nodes that are not yet supported in ClosedXML.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FileNode">
            <summary>
            AST node for an reference to an external file in a formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FileNode.Numeric">
            <summary>
            If the file is references indirectly, numeric identifier of a file.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FileNode.Path">
            <summary>
            If a file is referenced directly, a path to the file on the disc/UNC/web link, .
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.PrefixNode">
            <summary>
            AST node for prefix of a reference in a formula. Prefix is a specification where to look for a reference.
            <list type="bullet">
            <item>Prefix specifies a <c>Sheet</c> - used for references in the local workbook.</item>
            <item>Prefix specifies a <c>FirstSheet</c> and a <c>LastSheet</c> - 3D reference, references uses all sheets between first and last.</item>
            <item>Prefix specifies a <c>File</c>, no sheet is specified - used for named ranges in external file.</item>
            <item>Prefix specifies a <c>File</c> and a <c>Sheet</c> - references looks for its address in the sheet of the file.</item>
            </list>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.File">
            <summary>
            If prefix references data from another file, can be empty.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.Sheet">
            <summary>
            Name of the sheet, without ! or escaped quotes. Can be null in some cases e.g. reference to a named range in an another file).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.FirstSheet">
            <summary>
            If the prefix is for 3D reference, name of first sheet. Empty otherwise.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.PrefixNode.LastSheet">
            <summary>
            If the prefix is for 3D reference, name of the last sheet. Empty otherwise.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ReferenceNode">
            <summary>
            AST node for a reference of an area in some sheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ReferenceNode.Prefix">
            <summary>
            An optional prefix for reference item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ReferenceNode.Address">
            <summary>
            An address of a reference that corresponds to <see cref="T:System.Type"/>. Always without sheet (that is in the prefix).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ReferenceNode.ReferenceArea">
            <summary>
            An area from a parser.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ReferenceNode.IsA1">
            <summary>
            Is the reference in A1 style? If <c>false</c>, then it is R1C1.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.NameNode">
            <summary>
            A name node in the formula. Name can refers to a generic formula, in most cases a reference, but it can be any kind of calculation (e.g. <c>A1+7</c>).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.NameNode.Prefix">
            <summary>
            An optional prefix for reference item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.StructuredReferenceNode.Prefix">
            <summary>
            Can be empty if no prefix available.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.StructuredReferenceNode.Table">
            <summary>
            Table of the reference. It can be empty, if formula using the reference is within
            the table itself (e.g. total formulas).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.StructuredReferenceNode.Area">
            <summary>
            Area of the table that is considered for the range of cell of reference.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.StructuredReferenceNode.FirstColumn">
            <summary>
            First column of column range. If the reference refers to the whole table,
            the value is null.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.StructuredReferenceNode.LastColumn">
            <summary>
            Last column of column range. If structured reference refers only to one column,
            it is same as <see cref="P:ClosedXML.Excel.CalcEngine.StructuredReferenceNode.FirstColumn"/>. If the reference refers to the whole table,
            the value is null.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.Workbook">
            <summary>
            Worksheet of the cell the formula is calculating.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.Worksheet">
            <summary>
            Worksheet of the cell the formula is calculating.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.FormulaAddress">
            <summary>
            Address of the calculated formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.Culture">
            <summary>
            A culture used for comparisons and conversions (e.g. text to number).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.UseImplicitIntersection">
            <summary>
            Excel 2016 and earlier doesn't support dynamic array formulas (it used an array formulas instead). As a consequence,
            all arguments for scalar functions where passed through implicit intersection before calling the function.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.IsArrayCalculation">
            <summary>
            Should functions be calculated per item of multi-values argument in the scalar parameters.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.CalcContext.RecalculateSheetId">
            <summary>
            Sheet that is being recalculated. If set, formula can read dirty
            values from other sheets, but not from this sheetId.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcContext.GetNonBlankCells(ClosedXML.Excel.CalcEngine.Reference)">
            <summary>
            Get cells with a value for a reference.
            </summary>
            <param name="reference">Reference for which to return cells.</param>
            <returns>A lazy (non-materialized) enumerable of cells with a value for the reference.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcEngineHelpers.GetTotalCellsCount(ClosedXML.Excel.CalcEngine.XObjectExpression)">
            <summary>
            Get total count of cells in the specified range without initializing them all
            (which might cause serious performance issues on column-wide calculations).
            </summary>
            <param name="rangeExpression">Expression referring to the cell range.</param>
            <returns>Total number of cells in the range.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.CalcEngineHelpers.GetRangeDimensions(ClosedXML.Excel.CalcEngine.XObjectExpression)">
            <summary>
            Get dimensions of the specified range without initializing them all
            (which might cause serious performance issues on column-wide calculations).
            </summary>
            <param name="rangeExpression">Expression referring to the cell range.</param>
            <returns>A tuple of column and row counts.</returns>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DefaultFormulaVisitor`1">
            <summary>
            A default visitor that copies a formula.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DependenciesContext">
            <summary>
            Context for <see cref="T:ClosedXML.Excel.CalcEngine.DependenciesVisitor"/>, it is used
            to collect all objects a formula depends on during calculation.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.DependenciesContext.FormulaArea">
            <summary>
            An area of a formula, in most cases just one cell, for array formulas area of cells.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.DependenciesContext.Dependencies">
            <summary>
            The result. Visitor adds all areas/names formula depends on to this.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.DependenciesContext.AddAreas(System.Collections.Generic.List{ClosedXML.Excel.XLBookArea})">
            <summary>
            Add areas to a list of areas the formula depends on. Disregards duplicate entries.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.DependenciesContext.AddName(ClosedXML.Excel.XLName)">
            <summary>
            Add name to a list of names the formula depends on. Disregards duplicate entries.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DependenciesVisitor">
            <summary>
            <para>
            Visit each node and determine all ranges that might affect the formula.
            It uses concrete values (e.g. actual range for structured references) and
            should be refreshed when structured reference or name is changed in a workbook.
            </para>
            <para>
            The areas found by the visitor shouldn't change when data on a worksheet changes,
            so the output is a superset of areas, if necessary.
            </para>
            <para>
            Precedents visitor is not completely accurate, in case of uncertainty, it uses
            a larger area. At worst the end result is unnecessary recalculation. For simple
            cases, it works fine and freaks like <c>A1:IF(Other!B5,B7,Different!G3)</c>
            will be marked as dirty more often than strictly necessary.
            </para>
            <para>
            Each node visitor evaluates, if the output is a reference or a value/array. If
            the result is an array, it propagates to upper nodes, where can be things like
            range operator.
            </para>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DependencyTree">
            <summary>
            <para>
            A dependency tree structure to hold all formulas of the workbook and reference
            objects they depend on. The key feature of dependency tree is to propagate
            dirty flag across formulas.
            </para>
            <para>
            When a data in a cell changes, all formulas that depend on it should be marked
            as dirty, but it is hard to find which cells are affected - that is what
            dependency tree does.
            </para>
            <para>
            Dependency tree must be updated, when structure of a workbook is updated:
            <list type="bullet">
              <item>Sheet is added, renamed or deleted.</item>
              <item>Name is added or deleted.</item>
              <item>Table is resized, renamed, added or deleted.</item>
            </list>
            Any such action changes what cells formula depends on and
            the formula dependencies must be updated.
            </para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.DependencyTree._dependencies">
            <summary>
            The source of the truth, a storage of formula dependencies. The dependency tree is
            constructed from this collection.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.DependencyTree._visitor">
            <summary>
            Visitor to extract precedents of formulas.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.DependencyTree._sheetTrees">
            <summary>
            A dependency tree for each sheet (key is sheet name).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.DependencyTree.AddFormula(ClosedXML.Excel.XLBookArea,ClosedXML.Excel.XLCellFormula,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Add a formula to the dependency tree.
            </summary>
            <param name="formulaArea">Area of a formula, for normal cells 1x1, for array can be larger.</param>
            <param name="formula">The cell formula.</param>
            <param name="workbook">Workbook that is used to find precedents (names ect.).</param>
            <returns>Added cell formula dependencies.</returns>
            <exception cref="T:System.ArgumentException">Formula already is in the tree.</exception>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.DependencyTree.RemoveFormula(ClosedXML.Excel.XLCellFormula)">
            <summary>
            Remove formula from the dependency tree.
            </summary>
            <param name="formula">Formula to remove.</param>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.DependencyTree.MarkDirty(ClosedXML.Excel.XLBookArea)">
            <summary>
            Mark all formulas that depend (directly or transitively) on the area as dirty.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DependencyTree.AreaDependents">
            <summary>
            An area that is referred by formulas in different cells, i.e. it
            contains precedent cells for a formula. If anything in the area
            potentially changes, all dependents might also change.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.DependencyTree.AreaDependents._area">
            <summary>
            An area in a sheet that is used by formulas, converted to RBush envelope.
            All RBush <c>double</c> coordinates are whole numbers.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.DependencyTree.AreaDependents.Envelope">
            <summary>
            The area in a sheet on which some formulas depend on.
            </summary>
            <example><c>SIN(A4)</c> depends on <c>A4:A4</c> area.</example>.
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.DependencyTree.AreaDependents.Dependents">
            <summary>
            List of formulas that depend on the range, always at least one.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DependencyTree.Dependent">
            <summary>
            A dependent on a precedent area. If the precedent area changes,
            the dependent might also now be invalid.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.DependencyTree.Dependent.FormulaArea">
            <summary>
            Area that is invalidated, when precedent area is marked as
            dirty. Generally, it is an area of formula (1x1 for normal
            formulas), larger for array formulas. Cell formula by itself
            doesn't contain it's address to make it easier add/delete
            rows/cols.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.DependencyTree.Dependent.Formula">
            <summary>
            The formula that is affected by changes in precedent area.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.DependencyTree.SheetDependencyTree">
            <summary>
            A dependency tree for a single worksheet.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.DependencyTree.SheetDependencyTree._tree">
            <summary>
            The precedent areas are not duplicated, though two areas might overlap.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.DependencyTree.SheetDependencyTree._precedentAreas">
            <summary>
            All precedent areas in the sheet for all formulas in the workbook.
            </summary>
            <remarks>
            Not sure extra memory (at least 32 bytes per formula) is worth less CPU: O(1) vs O(log N)....
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.DependencyTree.SheetDependencyTree.RemoveDependent(ClosedXML.Excel.XLSheetRange,ClosedXML.Excel.XLCellFormula)">
            <summary>
            Remove a dependency of <paramref name="formula"/> on a
            <paramref name="precedentRange"/> from the sheet dependency tree.
            </summary>
            <param name="precedentRange">A precedent area in the sheet.</param>
            <param name="formula">Formula depending on the <paramref name="precedentRange"/>.</param>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Exceptions.FormulaErrorException">
            <summary>
            An exception to propagate error from legacy expression function.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Exceptions.GettingDataException">
            <summary>
            Exception that happens when formula in a cell depends on other cells,
            but the supporting formulas are still dirty.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Exceptions.MissingContextException">
            <summary>
            Evaluation of the formula needs an information that wasn't available. That can happen if the formula
            is evaluated from methods like <see cref="M:ClosedXML.Excel.XLWorkbook.Evaluate(System.String)"/>. Causes vary, e.g. implicit intersection
            needs an address of the formula cell. Various methods in ClosedXML are missing different information, e.g.
            <see cref="M:ClosedXML.Excel.IXLWorksheet.Evaluate(System.String,System.String)"/> has worksheet, but no cell address (=ranges will work, other things won't).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Expression">
            <summary>
            An adapter for legacy function implementations.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.XObjectExpression">
            <summary>
            Expression that represents an external object.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.EmptyValueExpression">
            <summary>
            Expression that represents an omitted parameter.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.IValueObject">
            <summary>
            Interface supported by external objects that have to return a value
            other than themselves (e.g. a cell range object should return the
            cell content instead of the range itself).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ExpressionCache">
            <summary>
            Caches expressions based on their string representation.
            This saves parsing time.
            </summary>
            <remarks>
            Uses weak references to avoid accumulating unused expressions.
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ExpressionParseException">
            <summary>
            The exception that is thrown when the strings to be parsed to an expression is invalid.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ExpressionParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExpressionParseException class with a 
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Formula">
            <summary>
            A non-state representation of a formula that can be used by many cells.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Formula.Text">
            <summary>Text of the formula.</summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FormulaDependencies">
            <summary>
            A list of objects a cell formula depends on. If one of them changes,
            the formula value might no longer be accurate and needs to be recalculated.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FormulaDependencies.Areas">
            <summary>
            List of areas the formula depends on. It is likely a superset of accurate
            result for unusual formulas, but if a value in an areas changes, the dependent
            formula should be marked as dirty.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.FormulaDependencies.Names">
            <summary>
            A collection of names in the formula. If a name changes (added, deleted),
            the formula dependencies should be refreshed, because new name might refer to
            different references (e.g. a name previously referred to <c>A5</c> and is redefined
            to <c>B7</c> or just value <c>7</c> =&gt; formula no longer depends on <c>A5</c>).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FormulaFlags">
            <summary>
            Flags that contain some useful information about a formula (mostly derived from flags in functions).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.None">
            <summary>
            Basic formula that takes an input and returns output that is determined solely by the input. No side effects.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.Volatile">
            <summary>
            Formula contains a function whose value can be different each time the function is called, even if arguments and workbook are same.
            </summary>
            <example><c>TODAY</c>, <c>RAND</c></example>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.SideEffect">
            <summary>
            Formula that has a side effects beside returning the value.
            </summary>
            <example><c>HYPERLINK</c> changes the content of a cell in a workbook.</example>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaFlags.HasSubtotal">
            <summary>
            Formula contains a reference to the <c>SUBTOTAL</c> function.
            </summary>
            <remarks>Performance optimization, so a formula with SUBTOTAL doesn't have to check each dependent cell each time it is evaluated.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.FormulaParser.GetAst(System.String,System.Boolean)">
            <summary>
            Parse a formula into an abstract syntax tree.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FormulaParser.AstFactory">
            <summary>
            Factory to create abstract syntax tree for a formula in A1 notation.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FormulaParser.AstFactory.DefaultFunctionNameSpace">
            <summary>
            A prefix for so-called future functions. Excel can add functions, but to avoid name collisions,
            it prefixes names of function with this prefix. The prefix is omitted from GUI.
            </summary>
            <example>
            If you write <c>CONCAT(A1,B1)</c> in Excel 2021 (not present in Excel 2013), it is saved to the
            worksheet file as <c>_xlfn.CONCAT(A1,B1)</c>, but the Excel GUI will show only <c>CONCAT(A1,B1)</c>,
            without the <c>_xlfn</c>.
            </example>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FractionParser">
            <summary>
            Parse a fraction for text-to-number type coercion.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FunctionDefinition">
            <summary>
            Function definition class (keeps function name, parameter counts, and delegate).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._function">
            <summary>
            Only the <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._function"/> or <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._legacyFunction"/> is set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._legacyFunction">
            <summary>
            Only the <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._function"/> or <see cref="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._legacyFunction"/> is set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionDefinition._markedParams">
            <summary>
            Which parameters of the function are marked. The values are indexes of the function parameters, starting from 0.
            Used to determine which arguments allow ranges and which don't.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.FunctionDefinition.CallAsArray(ClosedXML.Excel.CalcEngine.CalcContext,System.Span{ClosedXML.Excel.CalcEngine.AnyValue})">
            <summary>
            Evaluate the function with array formula semantic.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.FunctionFlags">
            <summary>
            Function flags that indicate what does function do. It is used by CalcEngine for calculation
            chain and formula execution.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.Scalar">
            <summary>
            Function that takes an input and returns an output. It is designed for a single value arguments.
            If scalar function is used for array formula or dynamic array formula, the function is called for each element separately.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.Range">
            <summary>
            Non-scalar function. At least one of arguments of the function accepts a range. It means that
            implicit intersection works differently.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.SideEffect">
            <summary>
            Function has side effects, e.g. it changes something.
            </summary>
            <example>HYPERLINK</example>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.FunctionFlags.ReturnsArray">
            <summary>
            Function returns array. Functions without this flag return a scalar value.
            CalcEngine treats such functions differently for array formulas.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.AllowRange">
            <summary>Which parameters of a function allow ranges. That is important for implicit intersection.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.None">
            <summary>None of parameters allow ranges.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.All">
            <summary>All parameters allow ranges.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.Except">
            <summary>All parameters except marked ones allow ranges.</summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.AllowRange.Only">
            <summary>Only marked parameters allow ranges.</summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.FunctionRegistry.RegisterFunction(System.String,System.Int32,System.Int32,ClosedXML.Excel.CalcEngine.CalcEngineFunction,ClosedXML.Excel.CalcEngine.FunctionFlags,ClosedXML.Excel.CalcEngine.AllowRange,System.Int32[])">
            <summary>
            Add a function to the registry.
            </summary>
            <param name="functionName">Name of function in formulas.</param>
            <param name="minParams">Minimum number of parameters.</param>
            <param name="maxParams">Maximum number of parameters.</param>
            <param name="fn">A delegate of a function that will be called when function is supposed to be evaluated.</param>
            <param name="flags">Flags that indicate some additional info about function.</param>
            <param name="allowRanges">Which parameters allow ranges to be argument. Useful for array formulas.</param>
            <param name="markedParams">Index of parameter that is marked, start from 0</param>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Functions.ArgumentsExtensions">
            <summary>
            An extension methods
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.ArgumentsExtensions.Aggregate``1(System.Span{ClosedXML.Excel.CalcEngine.AnyValue},ClosedXML.Excel.CalcEngine.CalcContext,``0,ClosedXML.Excel.CalcEngine.OneOf{``0,ClosedXML.Excel.XLError},System.Func{``0,``0,``0},System.Func{ClosedXML.Excel.CalcEngine.ScalarValue,ClosedXML.Excel.CalcEngine.CalcContext,ClosedXML.Excel.CalcEngine.OneOf{``0,ClosedXML.Excel.XLError}},System.Func{ClosedXML.Excel.CalcEngine.ScalarValue,System.Boolean})">
            <summary>
            Aggregate all values in the arguments of a function into a single value. If any value is error, return the error.
            </summary>
            <remarks>
            A lot of functions take all argument values and aggregate the values to a different value.
            These aggregation functions apply aggregation on each argument and if the argument is
            a collection (array/reference), the aggregation function is also applied to each element of
            the array/reference (e.g. <c>SUM({1, 2}, 3)</c> applies sum on each element of an array
            <c>{1,2}</c> and thus result is <c>1+2+3</c>).
            </remarks>
            <typeparam name="TValue">Type of the value that is being aggregated.</typeparam>
            <param name="args">Arguments of a function. Method goes over all elements of the arguments.</param>
            <param name="ctx">Calculation context.</param>>
            <param name="initialValue">
            Initial value of the accumulator. It is used as an input into the first call of <paramref name="aggregate"/>.
            </param>
            <param name="noElementsResult">
            What should be the result of aggregation, if there are no elements. Common choices are
            <see cref="F:ClosedXML.Excel.XLError.IncompatibleValue"/> or the <paramref name="initialValue"/>.
            </param>
            <param name="aggregate">
            The aggregation function. First parameter is the accumulator, second parameter is the value of
            current element taken from <paramref name="convert"/>. Make sure the method is static lambda to
            avoid useless allocations.
            </param>
            <param name="convert">
            A function that converts a scalar value of an element into the <typeparamref name="TValue"/> or
            an error if it can't be converted. Make sure the method is static lambda to avoid useless allocations.
            </param>
            <param name="collectionFilter">
            Some functions skip elements in a array/reference that would be accepted as an argument,
            e.g. <c>SUM("1", {2,"4"})</c> is <c>3</c> - it converts string <c>"3"</c> to a number <c>3</c>
            in for root arguments, but omits element <c>"4"</c> in the array. This is a function that
            determines which elements to include and which to skip. If null, all elements of array are included and
            all values are treated same. Make sure the method is static lambda to avoid useless allocations.
            </param>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.DateAndTime.BusinessDaysUntil(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Calculates number of business days, taking into account:
             - weekends (Saturdays and Sundays)
             - bank holidays in the middle of the week
            </summary>
            <param name="firstDay">First day in the time interval</param>
            <param name="lastDay">Last day in the time interval</param>
            <param name="bankHolidays">List of bank holidays excluding weekends</param>
            <returns>Number of business days during the 'span'</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.Lookup.FindMiddle(ClosedXML.Excel.CalcEngine.Array,System.Int32,System.Int32,ClosedXML.Excel.CalcEngine.ScalarValue@)">
            <summary>
            Find a row with a value of same type as <paramref name="lookupValue"/>
            between values <paramref name="low"/> and <c><paramref name="high"/> - 1</c>.
            We know that both <paramref name="low"/> and <paramref name="high"/>
            contain value of the same type, so we always get a valid row.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Functions.Lookup.FindSameTypeRow(ClosedXML.Excel.CalcEngine.Array,System.Int32,System.Int32,System.Int32,ClosedXML.Excel.CalcEngine.ScalarValue@)">
            <summary>
            Find row index of an element with same type as the lookup value. Go from
            <paramref name="startRow"/> to the <paramref name="limitRow"/> by a step
            of <paramref name="delta"/>. If there isn't any such row, return <c>-1</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Functions.SignatureAdapter">
            <summary>
            A collection of adapter functions from a more a generic formula function to more specific ones.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Text.TextJoin(System.Collections.Generic.List{ClosedXML.Excel.CalcEngine.Expression})">
            <summary>
            A function to Join text https://support.office.com/en-us/article/textjoin-function-357b449a-ec91-49d0-80c3-0e8fc845691c
            </summary>
            <param name="p">Parameters</param>
            <returns> string </returns>
            <exception cref="T:System.ApplicationException">
            Delimiter in first param must be a string
            or
            Second param must be a boolean (TRUE/FALSE)
            </exception>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Reference">
            <summary>
            Reference is a collection of cells in the workbook. It's used in formula evaluation.
            Every reference has at least one cell.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Reference.#ctor(System.Collections.Generic.List{ClosedXML.Excel.XLRangeAddress})">
            <summary>
            Ctor that reuses parameter to keep allocations low - don't modify the collection after it is passed to ctor.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Reference.Areas">
            <summary>
            List of areas of the range (at least one). All areas are valid and normalized. Some areas have worksheet and some don't.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Reference.NumberOfCells">
            <summary>
            Get total number of cells coverted by all areas (double counts overlapping areas).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Reference.GetCellsValues(ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            An iterator over all nonblank cells of the range. Some cells can be iterated
            over multiple times (e.g. a union of two ranges with overlapping cells).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Reference.ImplicitIntersection(ClosedXML.Excel.IXLAddress)">
            <summary>
            Do an implicit intersection of an address.
            </summary>
            <param name="formulaAddress"></param>
            <returns>An address of the intersection or error if intersection failed.</returns>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarValue">
            <summary>
            A representation of a value as a discriminated union.
            </summary>
            <remarks>
            A bare bone copy of <c>OneOf</c> that can be more optimized:
            <list type="bullet">
              <item>readonly struct to get rid of defensive copies</item>
              <item>struct can be smaller through offsets (based on NoBox)</item>
              <item>allows to pass additional arguments to Match function to skip a need to instantiate a new lambda instance on each call and allow easier inlining.</item>
            </list>
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.ScalarValue.Blank">
            <summary>
            A blank value of a scalar. It can behave as a 0 or empty string, depending on context.
            </summary>
            <example><c>A1+5</c> is a number 5, blank behaves as 0, <c>A1 &amp; "text"</c> is a "text", blank behaves as empty string.</example>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.ToText(System.Globalization.CultureInfo)">
            <summary>
            Convert value to text. Error is not convertible.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.ToNumber(System.Globalization.CultureInfo)">
            <summary>
            Convert value to number. Error is not convertible.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.HaveSameType(ClosedXML.Excel.CalcEngine.ScalarValue)">
            <summary>
            Does this value have same type as the other one?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.ScalarValue.TryCoerceLogicalOrBlankOrNumberOrText(System.Boolean@,ClosedXML.Excel.XLError@)">
            <summary>
            Get the logical value, if it is either blank (false), logical or number (0 = false, otherwise true)a text <c>TRUE</c> or <c>FALSE</c> (case insensitive).
            </summary>
            <remarks>Used for coercion in functions.</remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.ScalarValueComparer">
            <summary>
            A comparer of a scalar logic. Each comparer with it's logic can be accessed through a static property.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.ScalarValueComparer.SortIgnoreCase">
            <summary>
            Compare scalar values according to logic of "Sort" data in Excel, though texts are compared case insensitive.
            </summary>
            <remarks>
            Order is
            <list type="number">
              <item>Type Number, from low to high</item>
              <item>Type Text, from low to high (non-culture specific, ordinal compare)</item>
              <item>Type Logical, <c>FALSE</c>, then <c>TRUE</c>.</item>
              <item>Type Error, all error values are treated as equal (at least they don't change order).</item>
              <item>Type Blank, all values are treated as equal.</item>
            </list>
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.TimeSpanParser">
            <summary>
            A parser of timespan format used by excel during coercion from text to number. <see cref="T:System.TimeSpan" /> parsing methods
            don't allow for several features required by excel (e.g. seconds/minutes over 60, hours over 24).
            Parser can parse following formats from ECMA-376, Part 1, §18.8.30. due to standard text-to-number coercion:
            <list type="bullet">
                <item>Format 20 - <c>h:mm</c>.</item>
                <item>Format 21 - <c>h:mm:ss</c>.</item>
                <item>Format 47 - <c>mm:ss.0</c> (format is incorrectly described as <c>mmss.0</c> in the standard,
                      but fixed in an implementation errata).</item>
            </list>
            Timespan is never interpreted through format 45 (<c>mm:ss</c>), instead preferring the format 20 (<c>h:mm</c>).
            Timespan is never interpreted through format 46 (<c>[h]:mm:ss</c>], such values are covered by format 21 (<c>h:mm:ss</c>).
            </summary>
            <remarks>
            Note that the decimal fraction differs format 20 and 47, thus mere addition of decimal
            place means significantly different values. Parser also copies features of Excel, like whitespaces around
            a decimal place (<c>10:20 . 5</c> is allowed).
            <example>
            <c>20:30</c> is detected as format 20 and the first number is interpreted as hours, thus the serial time is 0.854167.
            <c>20:30.0</c> is detected as format 47 and the first number is interpreted as minutes, thus the serial time is 0.014236111.
            </example>
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Visitors.FormulaReferences">
            <summary>
            A collection of all references in the book (not others) found in a formula.
            Created by <see cref="T:ClosedXML.Excel.CalcEngine.Visitors.FormulaReferences.CollectRefsFactory"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Visitors.FormulaReferences.ContainsRefError">
            <summary>
            Is there a <c>#REF!</c> anywhere in the formula?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Visitors.FormulaReferences.References">
            <summary>
            Areas without a sheet found in the formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.Visitors.FormulaReferences.SheetReferences">
            <summary>
            Areas with a sheet found in the formula.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Visitors.FormulaReferences.CollectRefsFactory">
            <summary>
            Factory to get all references (cells, tables, names) in local workbook.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Visitors.RenameRefModVisitor">
            <summary>
            A factory to rename named reference object (sheets, tables ect.).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.Wildcard">
            <summary>
            A wildcard is at most 255 chars long text. It can contain <c>*</c> which indicates any number characters (including zero)
            and <c>?</c> which indicates any single character. If you need to find <c>*</c> or <c>?</c> in a text, prefix them with
            an escape character <c>~</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Wildcard.Search(System.ReadOnlySpan{System.Char})">
            <summary>
            Search for the wildcard anywhere in the text.
            </summary>
            <param name="text">Text used to search for a pattern.</param>
            <returns>zero-based index of a first character in a text that matches to a pattern or -1, if match wasn't found.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.Wildcard.SearchSegment(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Check if a segment can be found in a text.
            </summary>
            <param name="segmentPattern">Non-empty pattern without <c>*</c> wildcard, though it can contain ? and escaped *.</param>
            <param name="text">Non-empty text.</param>
            <returns>First index of the pattern in the <paramref name="text"/> or -1 if not found.</returns>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.XLCalcEngine">
            <summary>
            CalcEngine parses strings and returns Expression objects that can
            be evaluated.
            </summary>
            <remarks>
            <para>This class has three extensibility points:</para>
            <para>Use the <b>RegisterFunction</b> method to define custom functions.</para>
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.Parse(System.String)">
            <summary>
            Parses a string into an <see cref="T:ClosedXML.Excel.CalcEngine.Expression"/>.
            </summary>
            <param name="expression">String to parse.</param>
            <returns>An <see cref="T:ClosedXML.Excel.CalcEngine.Expression"/> object that can be evaluated.</returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.AddArrayFormula(ClosedXML.Excel.XLSheetRange,ClosedXML.Excel.XLCellFormula,ClosedXML.Excel.XLWorksheet)">
            <summary>
            Add an array formula to the calc engine to manage dirty tracking and evaluation.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.AddNormalFormula(ClosedXML.Excel.XLBookPoint,System.String,ClosedXML.Excel.XLCellFormula,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Add a formula to the calc engine to manage dirty tracking and evaluation.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.RemoveFormula(ClosedXML.Excel.XLBookPoint,ClosedXML.Excel.XLCellFormula)">
            <summary>
            Remove formula from dependency tree (=precedents won't mark
            it as dirty) and remove <paramref name="point"/> from the chain.
            Note that even if formula is used by many cells (e.g. array formula),
            it is fully removed from dependency tree, but each cells referencing
            the formula must be removed individually from calc chain.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.Recalculate(ClosedXML.Excel.XLWorkbook,System.Nullable{System.UInt32})">
            <summary>
            Recalculate a workbook or a sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.EvaluateFormula(System.String,ClosedXML.Excel.XLWorkbook,ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.IXLAddress,System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            Evaluates a normal formula.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <param name="wb">Workbook where is formula being evaluated.</param>
            <param name="ws">Worksheet where is formula being evaluated.</param>
            <param name="address">Address of formula.</param>
            <param name="recursive">Should the data necessary for this formula (not deeper ones)
            be calculated recursively? Used only for non-cell calculations.</param>
            <param name="recalculateSheetId">
            If set, calculation  will allow dirty reads from other sheets than the passed one.
            </param>
            <returns>The value of the expression.</returns>
            <remarks>
            If you are going to evaluate the same expression several times,
            it is more efficient to parse it only once using the <see cref="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.Parse(System.String)"/>
            method and then using the Expression.Evaluate method to evaluate
            the parsed expression.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalcEngine.ToCellContentValue(ClosedXML.Excel.CalcEngine.AnyValue,ClosedXML.Excel.CalcEngine.CalcContext)">
            <summary>
            Convert any kind of formula value to value returned as a content of a cell.
            <list type="bullet">
               <item><c>bool</c> - represents a logical value.</item>
               <item><c>double</c> - represents a number and also date/time as serial date-time.</item>
               <item><c>string</c> - represents a text value.</item>
               <item><see cref="T:ClosedXML.Excel.XLError" /> - represents a formula calculation error.</item>
            </list>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.LegacyCalcEngineFunction">
            <summary>
            Delegate that represents CalcEngine functions.
            </summary>
            <param name="parms">List of <see cref="T:ClosedXML.Excel.CalcEngine.Expression"/> objects that represent the
            parameters to be used in the function call.</param>
            <returns>The function result.</returns>
        </member>
        <member name="T:ClosedXML.Excel.CalcEngine.XLCalculationChain">
            <summary>
            <para>
            A calculation chain of formulas. Contains all formulas in the workbook.
            </para>
            <para>
            Calculation chain is an ordering of all cells that have value calculated
            by a formula (note that one formula can determine value of multiple cells,
            e.g. array). Formulas are calculated in specified order and if currently
            processed formula needs data from a cell whose value is dirty (i.e. it
            is determined by a not-yet-calculated formula), the current formula is
            stopped and the required formula is placed before the current one and starts
            to be processed. Once it is done, the original formula is starts to be processed
            again. It might have encounter another not-yet-calculated formula or it
            will finish and the calculation chain moves to the next one.
            </para>
            <para>
            Chain can be traversed through <see cref="P:ClosedXML.Excel.CalcEngine.XLCalculationChain.Current"/>, <see cref="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.MoveAhead"/>,
            <see cref="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.MoveToCurrent(ClosedXML.Excel.XLBookPoint)"/> and <see cref="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.Reset"/>, but only one traversal
            can go on at the same time due to shared info about cycle detection.
            </para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._head">
            <summary>
            Key to the <see cref="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._nodeMap"/> that is the head of the chain.
            Null, when chain is empty.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._tail">
            <summary>
            Key to the <see cref="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._nodeMap"/> that is the tail of the chain.
            Null, when chain is empty.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._nodeMap">
            <summary>
            <para>
            Doubly circular linked list containing all points with value
            calculated by a formula. The chain is "looped", so it doesn't
            have to deal with nulls for <see cref="T:ClosedXML.Excel.XLBookPoint"/>.
            </para>
            <para>
            There is always exactly one loop, no cycles. The formulas might
            cause cycles due to dependencies, but that is manifested by
            constantly switching the links in a loop.</para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._currentPosition">
            <summary>
            1 based position of <see cref="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._current"/>, if there is a traversal
            in progress (0 otherwise).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.XLCalculationChain.Current">
            <summary>
            The address of a current of the chain.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.CalcEngine.XLCalculationChain.IsCurrentInCycle">
            <summary>
            Is there a cycle in the chain? Detected when a link has appeared
            as a current more than once and the current hasn't moved in the
            meantime.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.CreateFrom(ClosedXML.Excel.XLWorkbook)">
            <summary>
            Create a new chain filled with all formulas from the workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.AddFirst(ClosedXML.Excel.XLBookPoint,System.Int32)">
            <summary>
            Add a new link at the beginning of a chain.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.AddLast(ClosedXML.Excel.XLBookPoint)">
            <inheritdoc cref="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.AddLast(ClosedXML.Excel.XLBookPoint,System.Int32)"/>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.AppendArea(System.UInt32,ClosedXML.Excel.XLSheetRange)">
            <summary>
            Add all cells from the area to the end of the chain.
            </summary>
            <exception cref="T:System.ArgumentException">If chain already contains a cell from the area.</exception>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.AddLast(ClosedXML.Excel.XLBookPoint,System.Int32)">
            <summary>
            Append formula at the end of the chain.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.Init(ClosedXML.Excel.XLBookPoint)">
            <summary>
            Initialize empty chain with a single link chain.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.Insert(ClosedXML.Excel.XLBookPoint,System.Int32,ClosedXML.Excel.XLBookPoint,ClosedXML.Excel.XLBookPoint)">
            <summary>
            Insert a link into the <see cref="F:ClosedXML.Excel.CalcEngine.XLCalculationChain._nodeMap"/> between
            <paramref name="prev"/> and <paramref name="next"/>.
            Don't update head or tail.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.AddAfter(ClosedXML.Excel.XLBookPoint,ClosedXML.Excel.XLBookPoint,System.Int32)">
            <summary>
            Add a link for <paramref name="point"/> after the link for
            <paramref name="anchor"/>.
            </summary>
            <param name="anchor">
            The anchor point after which will be the new point added.
            </param>
            <param name="point">Point to add to the chain.</param>
            <param name="lastPosition">The last position of the point in the chain.</param>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.Remove(ClosedXML.Excel.XLBookPoint)">
            <summary>
            Remove point from the chain.
            </summary>
            <param name="point">Link to remove.</param>
            <returns>Last position of the removed link.</returns>
            <exception cref="T:System.InvalidOperationException">Point is not a part of the chain.</exception>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.Clear">
            <summary>
            Clear whole chain.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.GetLinks">
            <summary>
            Enumerate all links in the chain.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.MoveAhead">
            <summary>
            Mark current link as complete and move ahead to the next link.
            </summary>
            <returns>
            <c>true</c> if the enumerator moved ahead, <c>false</c> if
            there are no more links and chain has looped completely.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.CalcEngine.XLCalculationChain.MoveToCurrent(ClosedXML.Excel.XLBookPoint)">
            <summary>
            Move the <paramref name="pointToMove"/> before the current point
            as the new current to be calculated.
            </summary>
            <param name="pointToMove">
            The point of a chain to moved to the current. Should always be in
            the chain after the current.
            </param>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.XLCalculationChain.Link.LastPosition">
            <summary>
            <para>
            What was the 1-based position of the link in the chain the last
            time the link has been current. Only used when link is pushed
            to the back, otherwise it's <c>0</c>.
            </para>
            <para>
            The last position of a link is only updated when
            <list type="bullet">
            <item>
            Link is moved from current to the back - that means link
            will be moved to current again at some point in the future
            and if chain hasn't processed even one link in the meantime,
            there is a cycle.
            </item>
            <item>
            Link is marked as done and current moves past it. The last
            position should be cleared as not to confuse next traversal.
            </item>
            <item>
            Chain traversal is reset - links in front of current may still
            have set their last position, because other links have been
            moved to the current as a supporting links.
            </item>
            </list>
            </para>
            </summary>
            <remarks>Used for cycle detection.</remarks>
        </member>
        <member name="F:ClosedXML.Excel.CalcEngine.XLRangeAddressComparer.IgnoreFixed">
            <summary>
            Comparer of ranges that ignores whether row/column is fixes or not.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Blank">
            <summary>
            A blank value. Used as a value of blank cells or as an optional argument for function calls.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Blank.Value">
            <summary>
            Represents the sole instance of the <see cref="T:ClosedXML.Excel.Blank" /> class.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLError">
            <summary>
            A formula error.
            </summary>
            <remarks>
            Keep order of errors in same order as value returned by ERROR.TYPE,
            because it is used for comparison in some case (e.g. AutoFilter).
            Values are off by 1, so <c>default</c> produces a valid error.
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NullValue">
            <summary>
            <c>#NULL!</c> - Intended to indicate when two areas are required to intersect, but do not.
            </summary>
            <remarks>The space is an intersection operator.</remarks>
            <example><c>SUM(B1 C1)</c> tries to intersect <c>B1:B1</c> area and <c>C1:C1</c> area, but since there are no intersecting cells, the result is <c>#NULL</c>.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.DivisionByZero">
            <summary>
            <c>#DIV/0!</c> - Intended to indicate when any number (including zero) or any error code is divided by zero.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLError.IncompatibleValue">
            <summary>
            <c>#VALUE!</c> - Intended to indicate when an incompatible type argument is passed to a function, or an incompatible type operand is used with an operator.
            </summary>
            <example>Passing a non-number text to a function that requires a number, trying to get an area from non-contiguous reference. Creating an area from different sheets <c>Sheet1!A1:Sheet2!A2</c></example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.CellReference">
            <summary>
            <c>#REF!</c> - a formula refers to a cell that's not valid.
            </summary>
            <example>When unable to find a sheet or a cell.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NameNotRecognized">
            <summary>
            <c>#NAME?</c> - Intended to indicate when what looks like a name is used, but no such name has been defined.
            </summary>
            <remarks>Only for named ranges, not sheets.</remarks>
            <example><c>TestRange*10</c> when the named range doesn't exist will result in an error.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NumberInvalid">
            <summary>
            <c>#NUM!</c> - Intended to indicate when an argument to a function has a compatible type, but has a value that is outside the domain over which that function is defined.
            </summary>
            <remarks>This is known as a domain error.</remarks>
            <example>ASIN(10) - the ASIN accepts only argument -1..1 (an output of SIN), so the resulting value is <c>#NUM!</c>.</example>
        </member>
        <member name="F:ClosedXML.Excel.XLError.NoValueAvailable">
            <summary>
            <c>#N/A</c> - Intended to indicate when a designated value is not available.
            </summary>
            <example>The value is used for extra cells of an array formula that is applied on an array of a smaller size that the array formula.</example>
        </member>
        <member name="M:ClosedXML.Excel.FormulaSlice.SetArray(ClosedXML.Excel.XLSheetRange,ClosedXML.Excel.XLCellFormula)">
            <summary>
            Set all cells in a <paramref name="range"/> to the array formula.
            </summary>
            <remarks>
            This method doesn't check that formula doesn't damage other array formulas.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.FormulaSlice.MarkDirty(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Mark all formulas in a range as dirty.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.ISheetListener">
            <summary>
            An interface for components reacting on changes in a worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISheetListener.OnInsertAreaAndShiftDown(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLSheetRange)">
            <summary>
            A handler called after the area was put into the sheet and cells shifted down.
            </summary>
            <param name="sheet">Sheet where change happened.</param>
            <param name="area">Area that has been inserted. The original cells were shifted down.</param>
        </member>
        <member name="M:ClosedXML.Excel.ISheetListener.OnInsertAreaAndShiftRight(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLSheetRange)">
            <summary>
            A handler called after the area was put into the sheet and cells shifted right.
            </summary>
            <param name="sheet">Sheet where change happened.</param>
            <param name="area">Area that has been inserted. The original cells were shifted right.</param>
        </member>
        <member name="M:ClosedXML.Excel.ISheetListener.OnDeleteAreaAndShiftLeft(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLSheetRange)">
            <summary>
            A handler called after the area was deleted from the sheet and cells shifted left.
            </summary>
            <param name="sheet">Sheet where change happened.</param>
            <param name="deletedRange">Range that has been deleted and cells to the right were shifted left.</param>
        </member>
        <member name="M:ClosedXML.Excel.ISheetListener.OnDeleteAreaAndShiftUp(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLSheetRange)">
            <summary>
            A handler called after the area was deleted from the sheet and cells shifted up.
            </summary>
            <param name="sheet">Sheet where change happened.</param>
            <param name="deletedRange">Range that has been deleted and cells below were shifted up.</param>
        </member>
        <member name="T:ClosedXML.Excel.ISlice">
            <summary>
            An interface for methods of <see cref="T:ClosedXML.Excel.Slice`1"/> without specified type of an element.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.IsEmpty">
            <summary>
            Is at least one cell in the slice used?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.MaxColumn">
            <summary>
            Get maximum used column in the slice or 0, if no column is used.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.MaxRow">
            <summary>
            Get maximum used row in the slice or 0, if no row is used.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.UsedColumns">
            <summary>
            A set of columns that have at least one used cell. Order of columns is non-deterministic.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.ISlice.UsedRows">
            <summary>
            A set of rows that have at least one used cell. Order of rows is non-deterministic.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.Clear(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Clear all values in the range and mark them as unused.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.DeleteAreaAndShiftLeft(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Clear all values in the <paramref name="rangeToDelete"/> and shift all values right of the deleted area to the deleted place.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.DeleteAreaAndShiftUp(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Clear all values in the <paramref name="rangeToDelete"/> and shift all values below the deleted area to the deleted place.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.GetEnumerator(ClosedXML.Excel.XLSheetRange,System.Boolean)">
            <summary>
            Get all used points in a slice.
            </summary>
            <param name="range">Range to iterate over.</param>
            <param name="reverse"><c>false</c> = left to right, top to bottom. <c>true</c> = right to left, bottom to top.</param>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.InsertAreaAndShiftDown(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Shift all values at the <paramref name="range"/> and all cells below it
            down by <see cref="P:ClosedXML.Excel.XLSheetRange.Height"/> of the <paramref name="range"/>.
            The insert area is cleared.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.InsertAreaAndShiftRight(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Shift all values at the <paramref name="range"/> and all cells right of it
            to the right by <see cref="P:ClosedXML.Excel.XLSheetRange.Width"/> of the <paramref name="range"/>.
            The insert area is cleared.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.IsUsed(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Does slice contains a non-default value at specified point?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ISlice.Swap(ClosedXML.Excel.XLSheetPoint,ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Swap content of two points.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IWorkbookListener">
            <summary>
            Listener for components that need to be notified about structural changes of a workbook
            (adding/removing sheet, renaming). See <see cref="T:ClosedXML.Excel.ISheetListener"/> for similar listener about
            structural changes of a sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IWorkbookListener.OnSheetRenamed(System.String,System.String)">
            <summary>
            Method is called when sheet has already been renamed. Each component is responsible only
            for changing data in itself, not other components. The goal is to separate concerns so
            each component is not too dependent on others and can achieve the goal in efficient manner.
            </summary>
            <param name="oldSheetName">Old sheet name.</param>
            <param name="newSheetName">New sheet name, different from old one.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLDataType">
            <summary>
            A value that is in the cell.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Blank">
            <summary>
            The value is a blank (either blank cells or the omitted optional argument of a function, e.g. <c>IF(TRUE,,)</c>.
            </summary>
            <remarks>Keep as the first, so the default values are blank.</remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Boolean">
            <summary>
            The value is a logical value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Number">
            <summary>
            The value is a double-precision floating points number, excluding <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> or <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Text">
            <summary>
            A text or a rich text. Can't be <c>null</c> and can be at most 32767 characters long.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.Error">
            <summary>
            The value is one of <see cref="T:ClosedXML.Excel.XLError"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.DateTime">
            <summary>
            The value is a <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>, represented as a serial date time number.
            </summary>
            <remarks>
            Serial date time 60 is a 1900-02-29, nonexistent day kept for compatibility,
            but unrepresentable by <c>DateTime</c>. Don't use.
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLDataType.TimeSpan">
            <summary>
            The value is a <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>, represented in a serial date time (24 hours is 1, 36 hours is 1.5 ect.).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.Active">
            <summary>
            Is this cell the <see cref="P:ClosedXML.Excel.IXLWorksheet.ActiveCell">active cell of
            the worksheet</see>? Setting false deactivates cell only when the
            cell is currently active.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.Address">
            <summary>Gets this cell's address, relative to the worksheet.</summary>
            <value>The cell's address.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.CachedValue">
            <summary>
            Get the value of a cell without evaluation of a formula. If the cell contains
            a formula, it returns the last calculated value or a blank value. If the cell
            doesn't contain a formula, it returns same value as <see cref="P:ClosedXML.Excel.IXLCell.Value"/>.
            May hold invalid value when <see cref="P:ClosedXML.Excel.IXLCell.NeedsRecalculation"/> flag is True.
            </summary>
            <remarks>Can be useful to decrease a number of formula evaluations.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.CurrentRegion">
            <summary>
            Returns the current region. The current region is a range bounded by any combination of blank rows and blank columns
            </summary>
            <value>
            The current region.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.DataType">
            <summary>
            Gets the type of this cell's data.
            </summary>
            <value>
            The type of the cell's data.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.FormulaA1">
            <summary>
            Gets or sets the cell's formula with A1 references.
            </summary>
            <value>The formula with A1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.FormulaR1C1">
            <summary>
            Gets or sets the cell's formula with R1C1 references.
            </summary>
            <value>The formula with R1C1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.FormulaReference">
            <summary>
            An indication that value of this cell is calculated by a array formula
            that calculates values for cells in the referenced address. Null if not part of such formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.NeedsRecalculation">
            <summary>
            Flag indicating that previously calculated cell value may be not valid anymore and has to be re-evaluated.
            Only cells with formula may return <c>true</c>, value cells always return <c>false</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.ShareString">
            <summary>
            Gets or sets a value indicating whether this cell's text should be shared or not.
            </summary>
            <value>
              If false the cell's text will not be shared and stored as an inline value.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.Style">
            <summary>
            Gets or sets the cell's style.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.Value">
            <summary>
            Gets or sets the cell's value.
            <para>
            Getter will return value of a cell or value of formula. Getter will evaluate a formula, if the cell
            <see cref="P:ClosedXML.Excel.IXLCell.NeedsRecalculation"/>, before returning up-to-date value.
            </para>
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCell.ShowPhonetic">
            <summary>
            Should the cell show phonetic (i.e. furigana) above the rich text of the cell?
            It shows phonetic runs in the rich text, it is not autogenerated. Default
            is <c>false</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AddToNamed(System.String)">
            <summary>
            Creates a named range out of this cell.
            <para>If the named range exists, it will add this range to that named range.</para>
            <para>The default scope for the named range is Workbook.</para>
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
            Creates a named range out of this cell.
            <para>If the named range exists, it will add this range to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
            Creates a named range out of this cell.
            <para>If the named range exists, it will add this range to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            <param name="comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.AsRange">
            <summary>
            Returns this cell as an IXLRange.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this cell.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CopyFrom(ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Copy range content to an area of same size starting at the cell.
            Original content of cells is overwritten.
            </summary>
            <param name="rangeBase">Range whose content to copy.</param>
            <returns>This cell.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateComment">
            <summary>
            Creates a new comment for the cell, replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateDataValidation">
            <summary>
            Creates a new data validation rule for the cell, replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateHyperlink">
            <summary>
            Creates a new hyperlink replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.CreateRichText">
            <summary>
            Replaces a value of the cell with a newly created rich text object.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes the current cell and shifts the surrounding cells according to the shiftDeleteCells parameter.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetComment">
            <summary>
            Returns the comment for the cell or create a new instance if there is no comment on the cell.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetDataValidation">
            <summary>
            Returns a data validation rule assigned to the cell, if any, or creates a new instance of data validation rule if no rule exists.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetBoolean">
            <summary>
            Gets the cell's value as a Boolean.
            </summary>
            <remarks>Shortcut for <c>Value.GetBoolean()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a logical.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetDouble">
            <summary>
            Gets the cell's value as a Double.
            </summary>
            <remarks>Shortcut for <c>Value.GetNumber()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a number.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetText">
            <summary>
            Gets the cell's value as a String.
            </summary>
            <remarks>Shortcut for <c>Value.GetText()</c>. Returned value is never null.</remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a text.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetError">
            <summary>
            Gets the cell's value as a XLError.
            </summary>
            <remarks>Shortcut for <c>Value.GetError()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not an error.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetDateTime">
            <summary>
            Gets the cell's value as a DateTime.
            </summary>
            <remarks>Shortcut for <c>Value.GetDateTime()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a DateTime.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetTimeSpan">
            <summary>
            Gets the cell's value as a TimeSpan.
            </summary>
            <remarks>Shortcut for <c>Value.GetTimeSpan()</c></remarks>
            <exception cref="T:System.InvalidCastException">If the value of the cell is not a TimeSpan.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.TryGetValue``1(``0@)">
            <summary>
            Try to get cell's value converted to the T type.
            <para>
            Supported <typeparamref name="T"/> types:
            <list type="bullet">
              <item>Boolean - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Boolean@)"/></item>
              <item>Number (<c>s/byte</c>, <c>u/short</c>, <c>u/int</c>, <c>u/long</c>, <c>float</c>, <c>double</c>, or <c>decimal</c>)
                    - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Double@,System.Globalization.CultureInfo)"/> and succeeds,
                    if the value fits into the target type.</item>
              <item>String - sets the result to a text representation of a cell value (using current culture).</item>
              <item>DateTime - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.DateTime@)"/></item>
              <item>TimeSpan - uses a logic of <see cref="M:ClosedXML.Excel.XLCellValue.TryConvert(System.TimeSpan@,System.Globalization.CultureInfo)"/></item>
              <item>XLError - if the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Error"/>, it will return the value.</item>
              <item>Enum - tries to parse a value to a member by comparing the text of a cell value and a member name.</item>
            </list>
            </para>
            <para>
            If the <typeparamref name="T"/> is a nullable value type and the value of cell is blank or empty string, return null value.
            </para>
            <para>
            If the cell value can't be determined because formula function is not implemented, the method always returns <c>false</c>.
            </para>
            </summary>
            <typeparam name="T">The requested type into which will the value be converted.</typeparam>
            <param name="value">Value to store the value.</param>
            <returns><c>true</c> if the value was converted and the result is in the <paramref name="value"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetValue``1">
            <summary>
            <inheritdoc cref="M:ClosedXML.Excel.IXLCell.TryGetValue``1(``0@)"/>
            </summary>
            <remarks>Conversion logic is identical with <see cref="M:ClosedXML.Excel.IXLCell.TryGetValue``1(``0@)"/>.</remarks>
            <typeparam name="T">The requested type into which will the value be converted.</typeparam>
            <exception cref="T:System.InvalidCastException">If the value can't be converted to the type of T</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetString">
            <summary>
            Return cell's value represented as a string. Doesn't use cell's formatting or style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetFormattedString(System.Globalization.CultureInfo)">
            <summary>
            Gets the cell's value formatted depending on the cell's data type and style.
            </summary>
            <param name="culture">Culture used to format the string. If <c>null</c> (default value), use current culture.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetHyperlink">
            <summary>
            Returns a hyperlink for the cell, if any, or creates a new instance is there is no hyperlink.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.GetRichText">
            <summary>
            Returns the value of the cell if it formatted as a rich text.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertData(System.Collections.IEnumerable)">
            <summary>
            Inserts the IEnumerable data elements and returns the range it occupies.
            </summary>
            <param name="data">The IEnumerable data.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertData(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Inserts the IEnumerable data elements and returns the range it occupies.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="transpose">if set to <c>true</c> the data will be transposed before inserting.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertData(System.Data.DataTable)">
            <summary>
            Inserts the data of a data table.
            </summary>
            <param name="dataTable">The data table.</param>
            <returns>The range occupied by the inserted data</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts the IEnumerable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Inserts the IEnumerable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates an Excel table from the given IEnumerable data elements.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Inserts the IEnumerable data elements as a table and returns it.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable)">
            <summary>
            Inserts the DataTable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Inserts the DataTable data elements as a table and returns it.
            <para>The new table will receive a generic name: Table#</para>
            </summary>
            <param name="data">The table data.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable,System.String)">
            <summary>
            Creates an Excel table from the given DataTable data elements.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InsertTable(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Inserts the DataTable data elements as a table and returns it.
            </summary>
            <param name="data">The table data.</param>
            <param name="tableName">Name of the table.</param>
            <param name="createTable">
            if set to <c>true</c> it will create an Excel table.
            <para>if set to <c>false</c> the table will be created in memory.</para>
            </param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.InvalidateFormula">
            <summary>
            Invalidate <see cref="P:ClosedXML.Excel.IXLCell.CachedValue"/> so the formula will be re-evaluated next time <see cref="P:ClosedXML.Excel.IXLCell.Value"/> is accessed.
            If cell does not contain formula nothing happens.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.SetValue(ClosedXML.Excel.XLCellValue)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLCell.Value"/>
            <returns>This cell.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLCell.ToString(System.String)">
            <summary>
            Returns a string that represents the current state of the cell according to the format.
            </summary>
            <param name="format">A: address, F: formula, NF: number format, BG: background color, FG: foreground color, V: formatted value</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLCells.Value">
            <summary>
            Sets the cells' value.
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCells.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these cells.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLCells.DeleteComments">
            <summary>
            Delete the comments of these cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLCells.DeleteSparklines">
            <summary>
            Delete the sparklines of these cells.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLCells.FormulaA1">
            <summary>
            Sets the cells' formula with A1 references.
            </summary>
            <value>The formula with A1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLCells.FormulaR1C1">
            <summary>
            Sets the cells' formula with R1C1 references.
            </summary>
            <value>The formula with R1C1 references.</value>
        </member>
        <member name="T:ClosedXML.Excel.SharedStringTable">
            <summary>
            A class that holds all texts in a workbook. Each text can be either a simple
            <c>string</c> or a <see cref="T:ClosedXML.Excel.XLImmutableRichText"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.SharedStringTable._table">
            <summary>
            Table of <c>Id</c> to text. Some ids are empty (<c>entry.RefCount = 0</c>) and
            are tracked in <see cref="F:ClosedXML.Excel.SharedStringTable._freeIds"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.SharedStringTable._freeIds">
            <summary>
            List of indexes in <see cref="F:ClosedXML.Excel.SharedStringTable._table"/> that are unused.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.SharedStringTable._reverseDict">
            <summary>
            text -&gt; id
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.SharedStringTable.Count">
            <summary>
            Number of texts the table holds reference to.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.SharedStringTable.Item(System.Int32)">
            <summary>
            Get a string for specified id. Doesn't matter if it is a plain text or a rich text. In both cases, return text.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.SharedStringTable.GetRichText(System.Int32)">
            <summary>
            The principle is that every entry is a text, but only some are rich text.
            This tries to get a rich text, if it is one. If it is just plain text, return null.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.SharedStringTable.IncreaseRef(System.String,System.Boolean)">
            <summary>
            Get id for a text and increase a number of references to the text by one.
            </summary>
            <returns>Id of a text in the SST.</returns>
        </member>
        <member name="M:ClosedXML.Excel.SharedStringTable.IncreaseRef(ClosedXML.Excel.XLImmutableRichText,System.Boolean)">
            <inheritdoc cref="M:ClosedXML.Excel.SharedStringTable.IncreaseRef(System.String,System.Boolean)"/>
        </member>
        <member name="M:ClosedXML.Excel.SharedStringTable.DecreaseRef(System.Int32)">
            <summary>
            Decrease reference count of a text and free if necessary.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.SharedStringTable.GetConsecutiveMap">
            <summary>
            Get a map that takes the actual string id and returns an continuous sequence (i.e. no gaps).
            If an id if free (no ref count), the id is mapped to -1.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.SharedStringTable.Text">
            <summary>
            A struct to hold a text. It also needs a flag for inline/shared, because they have to be different
            in the table. If there was no inline/shared flag, there would be no way to easily determine whether
            a text should be written to sst or it should be inlined.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.SharedStringTable.Text.Value">
            <summary>
            Either a <c>string</c>, <c>XLImmutableRichText</c> or null if <c><see cref="F:ClosedXML.Excel.SharedStringTable.Entry.RefCount"/> == 0</c>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.SharedStringTable.Text.Inline">
            <summary>
            Must be as flag for inline string, so the default value is false => ShareString is true by default 
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.SharedStringTable.Entry.RefCount">
            <summary>
            How many objects (cells, pivot cache entries...) reference the text.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1">
            <summary>
            Slice is a sparse array that stores a part of cell information (e.g. only values,
            only styles ...). Slice has same size as a worksheet. If some cells are pushed out
            of the permitted range, they are gone.
            </summary>
            <remarks>
            This is a ref return, so if the underlaying value
            changes, the returned value also changes. To avoid,
            just don't use <c>ref</c> and structs will be copied.
            </remarks>
            <typeparam name="TElement">The type of data stored in the slice.</typeparam>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1._data">
            <summary>
            The content of the slice. Note that LUT uses index that starts from 0,
            so rows and columns must be adjusted to retrieved the value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1._columnUsage">
            <summary>
            Key is column number, value is number of cells in the column that are used.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Item(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get the slice value at the specified point of the sheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Item(System.Int32,System.Int32)">
            <summary>
            Get the slice value at the specified point of the sheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.MaxColumn">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.MaxRow">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.UsedRows">
            <inheritdoc />
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.UsedColumns">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Clear(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.DeleteAreaAndShiftLeft(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.DeleteAreaAndShiftUp(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.GetEnumerator(ClosedXML.Excel.XLSheetRange,System.Boolean)">
            <summary>
            Get enumerator over used values of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.InsertAreaAndShiftDown(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.InsertAreaAndShiftRight(ClosedXML.Excel.XLSheetRange)">
            <inheritdoc />
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Enumerator">
            <summary>
            Enumerator that returns used values from a specified range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Enumerator.MoveNext">
            <summary>
            The movement is columns first, then rows.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1">
            <summary>
            <para>
            Memory efficient look up table. The table is 2-level structure,
            where elements of the the top level are potentially nullable
            references to buckets of up-to 32 items in bottom level.
            </para>
            <para>
            Both level can increase size through doubling, through
            only the top one can be indefinite size.
            </para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue">
            <summary>
            The default value lut ref returns for elements not defined in the lut.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1.Lut`1._buckets">
            <summary>
            A sparse array of values in the lut. The top level always allocated at least one element.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Lut`1.MaxUsedIndex">
            <summary>
            Get maximal node that is used. Return -1 if LUT is unused.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Lut`1.IsEmpty">
            <summary>
            Does LUT contains at least one used element?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.Get(System.Int32)">
            <summary>
            Get a value at specified index.
            </summary>
            <param name="index">Index, starting at 0.</param>
            <returns>Reference to an element at index, if the element is used, otherwise <see cref="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue"/>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.IsUsed(System.Int32)">
            <summary>
            Does the index set a mask of used index (=was value set and not cleared)?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.Set(System.Int32,`1)">
            <summary>
            Set/clar an element at index to a specified value.
            The used flag will be if the value is <c>default</c> or not.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1.LutBucket">
            <summary>
            A bucket of bottom layer of LUT. Each bucket has up-to 32 elements.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Slice`1.Lut`1.LutBucket.Bitmap">
            <summary>
            <para>
            A bitmap array that indicates which nodes have a set/no-default values values
            (1 = value has been set and there is an element in the <see cref="F:ClosedXML.Excel.Slice`1.Lut`1._buckets"/>,
            0 = value hasn't been set and <see cref="F:ClosedXML.Excel.Slice`1.Lut`1._buckets"/> might exist or not).
            If the element at some index is not is not set and lut is asked for a value,
            it should return <see cref="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue"/>.
            </para>
            <para>
            The length of the bitmap array is same as the <see cref="F:ClosedXML.Excel.Slice`1.Lut`1._buckets"/>, for each
            bottom level bucket, the element of index 0 in the bucket is represented by
            lowest bit, element 31 is represented by highest bit.
            </para>
            <para>
            This is useful to make a distinction between a node that is empty
            and a node that had it's value se to <see cref="F:ClosedXML.Excel.Slice`1.Lut`1.DefaultValue"/>.
            </para>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1.LutEnumerator">
            <summary>
            Enumerator of LUT used values from low index to high.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Slice`1.Lut`1.LutEnumerator.#ctor(ClosedXML.Excel.Slice{`0}.Lut{`1},System.Int32,System.Int32)">
            <summary>
            Create a new enumerator from subset of elements.
            </summary>
            <param name="lut">Lookup table to traverse.</param>
            <param name="startIdx">First desired index, included.</param>
            <param name="endIdx">Last desired index, included.</param>
        </member>
        <member name="P:ClosedXML.Excel.Slice`1.Lut`1.LutEnumerator.Index">
            <summary>
            Index of current element in the LUT. Only valid, if enumerator is valid.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Slice`1.Lut`1.ReverseLutEnumerator">
            <summary>
            Enumerator of LUT used values from high index to low index.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.ValueSlice">
            <summary>
            A slice of a single worksheet for values of a cell.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.ValueSlice.DereferenceSlice">
            <summary>
            Prepare for worksheet removal, dereference all tests in a slice.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.ValueSlice.XLValueSliceContent.Value">
            <summary>
            A cell value in a very compact representation. The value is interpreted depending on a type.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.ValueSlice.XLValueSliceContent.Type">
            <summary>
            Type of a cell <see cref="F:ClosedXML.Excel.ValueSlice.XLValueSliceContent.Value"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.ShareString">
            <summary>
            A flag indicating if a string should be stored in the shared table or inline.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.StyleValue">
            <summary>
            Overriden <see cref="P:ClosedXML.Excel.XLStylizedBase.StyleValue"/>, because we can't store the value
            in the cell.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.Formula">
            <summary>
            A formula in the cell. Null, if cell doesn't contain formula.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.SetValueAndStyle(ClosedXML.Excel.XLCellValue)">
            <summary>
            Set value of a cell and its format (if necessary) from the passed value.
            It doesn't clear formulas or checks merged cells or tables.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.Evaluate(System.Boolean)">
            <summary>
            Perform an evaluation of cell formula. If cell does not contain formula nothing happens, if cell does not need
            recalculation (<see cref="P:ClosedXML.Excel.XLCell.NeedsRecalculation"/> is False) nothing happens either, unless <paramref name="force"/> flag is specified.
            Otherwise recalculation is performed, result value is preserved in <see cref="P:ClosedXML.Excel.XLCell.CachedValue"/> and returned.
            </summary>
            <param name="force">Flag indicating whether a recalculation must be performed even is cell does not need it.</param>
            <returns>Null if cell does not contain a formula. Calculated value otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.SetOnlyValue(ClosedXML.Excel.XLCellValue)">
            <summary>
            Set only value, don't clear formula, don't set format.
            Sets the value even for merged cells.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.NeedsRecalculation">
            <summary>
            Flag indicating that previously calculated cell value may be not valid anymore and has to be re-evaluated.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.Sparkline">
            <summary> The sparkline assigned to the cell </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.FindDataValidation">
            <summary>
            Get the data validation rule containing current cell.
            </summary>
            <returns>The data validation rule applying to the current cell or null if there is no such rule.</returns>
        </member>
        <member name="P:ClosedXML.Excel.XLCell.ShowPhonetic">
            <inheritdoc />
        </member>
        <member name="M:ClosedXML.Excel.XLCell.PingStyle">
            <summary>
            Ensure the cell has style set directly on the cell, not inherited from column/row/worksheet styles.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCell.GetGlyphBoxes(ClosedXML.Graphics.IXLGraphicEngine,ClosedXML.Graphics.Dpi,System.Collections.Generic.List{ClosedXML.Graphics.GlyphBox})">
            <summary>
            Get glyph bounding boxes for each grapheme in the text. Box size is determined according to
            the font of a grapheme. New lines are represented as default (all dimensions zero) box.
            A line without any text (i.e. contains only new line) should be represented by a box
            with zero advance width, but with a line height of corresponding font.
            </summary>
            <param name="engine">Engine used to determine box size.</param>
            <param name="dpi">DPI used to determine size of glyphs.</param>
            <param name="output">List where items are added.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLCellFormula">
            <summary>
            A representation of a cell formula, not the formula itself (i.e. the tree).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.DataTableFormulaFormat">
            <summary>
            This is only a placeholder, so the data table formula looks like array formula for saving code.
            First argument is replaced by value from current row, second is replaced by value from current column.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.IsDirty">
            <summary>
            Is this formula dirty, i.e. is it potentially out of date due to changes
            to precedent cells?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.A1">
            <summary>
            Formula in A1 notation. Either this or <see cref="P:ClosedXML.Excel.XLCellFormula.R1C1"/> must be set (potentially
            both, due to conversion from one notation to another).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.R1C1">
            <summary>
            Formula in R1C1 notation. Either this or <see cref="P:ClosedXML.Excel.XLCellFormula.A1"/> must be set (potentially
            both, due to conversion from one notation to another).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Range">
            <summary>
            Range for array and data table formulas, otherwise default value.
            </summary>
            <remarks>Doesn't contain sheet, so it doesn't have to deal with
            sheet renames and moving formula around.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.IsRowDataTable">
            <summary>
            True, if 1D data table formula is the row (the displayed formula in Excel is missing the second argument <c>{=TABLE(A1;)}</c>).
            False the 1D data table is a column. (the displayed formula in Excel is missing the first argument <c>{=TABLE(;A1)}</c>)
            This property is meaningless, if called for non-data-table formula.
            </summary>
            <remarks>
            <para>
            If data table is in row (i.e. the value returns <c>true</c>) that means it calculates values in a row,
            it takes formula from a cell from a column one less than its range and replaces the input cell with value
            at the intersection of current cell column and the top row of the range. When data table is a column, it works
            pretty much same, except axis are reversed.
            </para>
            <para>
            Just because data table is 1D doesn't mean its range has to be. It can be rectangular even for 1D
            data table. It just means that data table is applied separately to each row/column (depending on whether
            the data table is row or column).
            </para>
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Is2DDataTable">
            <summary>
            True, if data table is 2D and uses both inputs. Input1 is replaced by
            value from current row, input2 is replaced by a value from current column.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input1">
            <summary>
            Returns a cell that data table formula uses as a variable to replace with values
            for the actual table. Used for 1D data table formula as a single input (row or column)
            and as row for 2D data table. Must be present, even if input marked as deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input2">
            <summary>
            Returns a cell that 2D data table formula uses as a variable to replace with values
            for the actual table. The value is taken from the top of range of the current column.
            Must be present for 2D, even if input marked as deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input1Deleted">
            <summary>
            Returns true, if data table formula has its input1 deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellFormula.Input2Deleted">
            <summary>
            Returns true, if data table formula has its input1 deleted.
            This property is meaningless, if called for non-data-table formula.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.GetFormulaA1(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get stored formula in A1 notation. Returned formula doesn't contain equal sign.
            </summary>
            <param name="cellAddress">Address of the formula cell. Used to convert relative R1C1 to A1, if conversion is necessary.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.GetFormulaR1C1(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get stored formula in R1C1 notation. Returned formula doesn't contain equal sign.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.NormalA1(System.String)">
            <summary>
            A factory method to create a normal A1 formula. Doesn't affect recalculation version.
            </summary>
            <param name="formulaA1">Formula in A1 form. Shouldn't start with <c>=</c>.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.NormalR1C1(System.String)">
            <summary>
            A factory method to create a normal R1C1 formula. Doesn't affect recalculation version.
            </summary>
            <param name="formulaR1C1">Formula in R1C1 form. Shouldn't start with <c>=</c>.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.Array(System.String,ClosedXML.Excel.XLSheetRange,System.Boolean)">
            <summary>
            A factory method to create an array formula. Doesn't affect recalculation version.
            </summary>
            <param name="arrayFormulaA1">Isn't wrapped in <c>{}</c> and doesn't start with <c>=</c>.</param>
            <param name="range">A range of cells that are calculated through the array formula.</param>
            <param name="aca">A flag for always calculate array.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.DataTable1D(ClosedXML.Excel.XLSheetRange,ClosedXML.Excel.XLSheetPoint,System.Boolean,System.Boolean)">
            <summary>
            A factory method to create a cell formula for 1D data table formula. Doesn't affect recalculation version.
            </summary>
            <param name="range">Range of the data table formula. Even 1D table can have rectangular range.</param>
            <param name="input1Address">Address of the input cell that will be replaced in the data table. If input deleted, ignored and value can be anything.</param>
            <param name="input1Deleted">Was the original address deleted?</param>
            <param name="isRowDataTable">Is data table in row (<c>true</c>) or columns (<c>false</c>)?</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.DataTable2D(ClosedXML.Excel.XLSheetRange,ClosedXML.Excel.XLSheetPoint,System.Boolean,ClosedXML.Excel.XLSheetPoint,System.Boolean)">
            <summary>
            A factory method to create a 2D data table formula. Doesn't affect recalculation version.
            </summary>
            <param name="range">Range of the formula.</param>
            <param name="input1Address">Address of the input cell that will be replaced in the data table. If input deleted, ignored and value can be anything.</param>
            <param name="input1Deleted">Was the original address deleted?</param>
            <param name="input2Address">Address of the input cell that will be replaced in the data table. If input deleted, ignored and value can be anything.</param>
            <param name="input2Deleted">Was the original address deleted?</param>
        </member>
        <member name="T:ClosedXML.Excel.XLCellFormula.FormulaFlags">
            <summary>
            An enum to efficiently store various flags for formulas (bool takes up 1-4 bytes due to alignment).
            Note that each type of formula uses different flags.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.AlwaysCalculateArray">
            <summary>
            For Array formula. Not fully clear from documentation, but seems to be some kind of dirty flag.
            Current excel just writes <c>ca="1"</c> to each cell of array formula for cases described in the DOC.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Is2D">
            <summary>
            For data table formula. Flag whether the data table is 2D and has two inputs.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Is1DRow">
            <summary>
            For data table formula. If the set, the data table is in row, not column. It uses input1 in both case, but the position
            is interpreted differently.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Input1Deleted">
            <summary>
            For data table formula. When the input 1 cell has been deleted (not content, but the row or a column where cell was),
            this flag is set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellFormula.FormulaFlags.Input2Deleted">
            <summary>
            For data table formula. When the input 2 cell has been deleted (not content, but the row or a column where cell was),
            this flag is set.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellFormula.GetAst(ClosedXML.Excel.CalcEngine.XLCalcEngine)">
            <summary>
            Get a lazy initialized AST for the formula.
            </summary>
            <param name="engine">Engine to parse the formula into AST, if necessary.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells">
            <summary>
            Get all used cells in the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells(System.Func{ClosedXML.Excel.XLCell,System.Boolean})">
            <summary>
            Get all used cells in the worksheet that satisfy the predicate.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{ClosedXML.Excel.XLCell,System.Boolean})">
            <summary>
            Get all used cells in the range that satisfy the predicate.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetCells(ClosedXML.Excel.XLSheetRange,System.Func{ClosedXML.Excel.XLCell,System.Boolean})">
            <summary>
            Get all used cells in the range that satisfy the predicate.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.GetUsedCell(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get cell or null, if cell is not used.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.RemapRows(System.Collections.Generic.IList{System.Int32},ClosedXML.Excel.XLSheetRange)">
            <summary>
            Remap rows of a range.
            </summary>
            <param name="map">A sorted map of rows. The values must be resorted row numbers from <paramref name="sheetRange"/>.</param>
            <param name="sheetRange">Sheet that should have its rows rearranged.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellsCollection.RemapColumns(System.Collections.Generic.IList{System.Int32},ClosedXML.Excel.XLSheetRange)">
            <summary>
            Remap columns of a range.
            </summary>
            <param name="map">A sorted map of columns. The values must be resorted columns numbers from <paramref name="sheetRange"/>.</param>
            <param name="sheetRange">Sheet that should have its columns rearranged.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumn.Width">
            <summary>
            Gets or sets the width of this column in number of characters (NoC).
            </summary>
            <remarks>
            NoC are a non-linear units displayed as a column width in Excel, next to pixels. NoC combined with default font
            of the workbook can express width of the column in pixels and other units.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Delete">
            <summary>
            Deletes this column and shifts the columns at the right of this one accordingly.
            </summary>
            <remarks>Don't use in a loop due to poor performance. Use <see cref="M:ClosedXML.Excel.IXLRange.Delete(ClosedXML.Excel.XLShiftDeletedCells)"/> instead.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.ColumnNumber">
            <summary>
            Gets this column's number
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.ColumnLetter">
            <summary>
            Gets this column's letter
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.InsertColumnsAfter(System.Int32)">
            <summary>
            Inserts X number of columns at the right of this one.
            <para>All columns at the right will be shifted accordingly.</para>
            </summary>
            <param name="numberOfColumns">The number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.InsertColumnsBefore(System.Int32)">
            <summary>
            Inserts X number of columns at the left of this one.
            <para>This column and all at the right will be shifted accordingly.</para>
            </summary>
            <param name="numberOfColumns">The number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified row.
            </summary>
            <param name="rowNumber">The cell's row.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1,3:5")</para>
            </summary>
            <param name="cellsInColumn">The column cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstRow">The first row in the group of cells to return.</param>
            <param name="lastRow">The last row in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents">
            <summary>
            Adjusts the width of the column based on its contents.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the width of the column based on its contents, starting from the startRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the width of the column based on its contents, starting from the startRow and ending at endRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
            <param name="endRow">The row to end calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AdjustToContents(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adjust width of the column according to the content of the cells.
            </summary>
            <param name="startRow">Number of a first row whose content is considered.</param>
            <param name="endRow">Number of a last row whose content is considered.</param>
            <param name="minWidth">Minimum width of adjusted column, in NoC.</param>
            <param name="maxWidth">Maximum width of adjusted column, in NoC.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Hide">
            <summary>
            Hides this column.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Unhide">
            <summary>Unhides this column.</summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumn.IsHidden">
            <summary>
            Gets a value indicating whether this column is hidden or not.
            </summary>
            <value>
              <c>true</c> if this column is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumn.OutlineLevel">
            <summary>
            Gets or sets the outline level of this column.
            </summary>
            <value>
            The outline level of this column.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group">
            <summary>
            Adds this column to the next outline level (Increments the outline level for this column by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group(System.Boolean)">
            <summary>
            Adds this column to the next outline level (Increments the outline level for this column by 1).
            </summary>
            <param name="collapse">If set to <c>true</c> the column will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group(System.Int32)">
            <summary>
            Sets outline level for this column.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for this column.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the column will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Ungroup">
            <summary>
            Adds this column to the previous outline level (decrements the outline level for this column by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Ungroup(System.Boolean)">
            <summary>
            Adds this column to the previous outline level (decrements the outline level for this column by 1).
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove this column from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Collapse">
            <summary>
            Show this column as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Expand">
            <summary>Expands this column (if it's collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.AddVerticalPageBreak">
            <summary>
            Adds a vertical page break after this column.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumn.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this column.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLColumns.Width">
            <summary>
            Sets the width of all columns.
            </summary>
            <value>
            The width of all columns.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Delete">
            <summary>
            Deletes all columns and shifts the columns at the right of them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AdjustToContents">
            <summary>
            Adjusts the width of all columns based on its contents.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the width of all columns based on its contents, starting from the startRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the width of all columns based on its contents, starting from the startRow and ending at endRow.
            </summary>
            <param name="startRow">The row to start calculating the column width.</param>
            <param name="endRow">The row to end calculating the column width.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Hide">
            <summary>
            Hides all columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Unhide">
            <summary>Unhides all columns.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group">
            <summary>
            Increments the outline level of all columns by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group(System.Boolean)">
            <summary>
            Increments the outline level of all columns by 1.
            </summary>
            <param name="collapse">If set to <c>true</c> the columns will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group(System.Int32)">
            <summary>
            Sets outline level for all columns.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for all columns.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the columns will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Ungroup">
            <summary>
            Decrements the outline level of all columns by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Ungroup(System.Boolean)">
            <summary>
            Decrements the outline level of all columns by 1.
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove the columns from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Collapse">
            <summary>
            Show all columns as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Expand">
            <summary>Expands all columns (if they're collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.CellsUsed(System.Boolean)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="includeFormats">if set to <c>true</c> will return all cells with a value or a style different than the default.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.AddVerticalPageBreaks">
            <summary>
            Adds a vertical page break after these columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLColumns.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these columns.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLColumn.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColumn.CalculateMinColumnWidth(System.Int32,System.Int32,ClosedXML.Graphics.IXLGraphicEngine,ClosedXML.Graphics.Dpi)">
            <summary>
            Calculate column width in pixels according to the content of cells.
            </summary>
            <param name="startRow">First row number whose content is used for determination.</param>
            <param name="endRow">Last row number whose content is used for determination.</param>
            <param name="engine">Engine to determine size of glyphs.</param>
            <param name="dpi">DPI of the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLColumn.AddVerticalPageBreak">
            <summary>
              Adds a vertical page break after this column.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColumns.#ctor(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLStyleValue,System.Collections.Generic.IEnumerable{ClosedXML.Excel.XLColumn})">
            <summary>
            Create a new instance of <see cref="T:ClosedXML.Excel.XLColumns"/>.
            </summary>
            <param name="worksheet">If worksheet is specified it means that the created instance represents
            all columns on a worksheet so changing its width will affect all columns.</param>
            <param name="defaultStyle">Default style to use when initializing child entries.</param>
            <param name="lazyEnumerable">A predefined enumerator of <see cref="T:ClosedXML.Excel.XLColumn"/> to support lazy initialization.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLColumns.AddVerticalPageBreaks">
            <summary>
              Adds a vertical page break after this column.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLComment.Author">
            <summary>
            Gets or sets this comment's author's name
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLComment.SetAuthor(System.String)">
            <summary>
            Sets the name of the comment's author
            </summary>
            <param name="value">Author's name</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLComment.AddSignature">
            <summary>
            Adds a bolded line with the author's name
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLConditionalFormat.Range">
            <summary>
            The first of the <see cref="P:ClosedXML.Excel.IXLConditionalFormat.Ranges"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLConditionalFormat.Priority">
            <summary>
            Priority of formatting rule. Lower values have higher priority than higher values.
            Minimum value is 1. It is basically used for ordering of CF during saving.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLConditionalFormats">
            <summary>
            A container for conditional formatting of a <see cref="T:ClosedXML.Excel.XLWorksheet"/>. It contains
            a collection of <see cref="T:ClosedXML.Excel.XLConditionalFormat"/>. Doesn't contain pivot table formats,
            they are in pivot table <see cref="P:ClosedXML.Excel.XLPivotTable.ConditionalFormats"/>,
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLConditionalFormats.Consolidate">
            <summary>
            The method consolidate the same conditional formats, which are located in adjacent ranges.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLConditionalFormats.ReorderAccordingToOriginalPriority">
            <summary>
            Reorders the according to original priority. Done during load process
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLAddress">
            <summary>
            Reference to a single cell in a workbook. Reference can be absolute, relative or mixed.
            Reference can be with or without a worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAddress.Worksheet">
            <summary>
            Worksheet of the reference. Value is null for address without a worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.Create(System.String)">
            <summary>
            Create address without worksheet. For calculation only!
            </summary>
            <param name="cellAddressString"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using a mixed notation.  Attention: without worksheet for calculation only!
            </summary>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnLetter">The column letter of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using a mixed notation.
            </summary>
            <param name = "worksheet"></param>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnLetter">The column letter of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using R1C1 notation. Attention: without worksheet for calculation only!
            </summary>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnNumber">The column number of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLAddress.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref = "T:ClosedXML.Excel.XLAddress" /> struct using R1C1 notation.
            </summary>
            <param name = "worksheet"></param>
            <param name = "rowNumber">The row number of the cell address.</param>
            <param name = "columnNumber">The column number of the cell address.</param>
            <param name = "fixedRow"></param>
            <param name = "fixedColumn"></param>
        </member>
        <member name="P:ClosedXML.Excel.XLAddress.RowNumber">
            <summary>
            Gets the row number of this address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLAddress.ColumnNumber">
            <summary>
            Gets the column number of this address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLAddress.ColumnLetter">
            <summary>
            Gets the column letter(s) of this address.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLBookArea">
            <summary>
            A specification of an area (rectangular range) of a sheet.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLBookArea.Name">
            <summary>
            Name of the sheet. Sheet may exist or not (e.g. deleted). Never null.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLBookArea.Area">
            <summary>
            An area in the sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLBookArea.Intersect(ClosedXML.Excel.XLBookArea)">
            <summary>
            Perform an intersection.
            </summary>
            <param name="other">The area that is being intersected with this one.</param>
            <returns>The intersection (=same sheet and has non-empty intersection) or null if intersection isn't possible.</returns>
        </member>
        <member name="T:ClosedXML.Excel.XLBookPoint">
            <summary>
            A single point in a workbook. The book point might point to a deleted
            worksheet, so it might be invalid. Make sure it is checked when
            determining the properties of the actual data of the point.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLBookPoint.SheetId">
            TODO: SheetId doesn't work nicely with renames, but will in the future.
            <summary>
            A sheet id of a point. Id of a sheet never changes during workbook
            lifecycle (<see cref="P:ClosedXML.Excel.XLWorksheet.SheetId"/>), but the sheet may be
            deleted, making the sheetId and thus book point invalid.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLBookPoint.Row">
            <inheritdoc cref="F:ClosedXML.Excel.XLSheetPoint.Row"/>
        </member>
        <member name="P:ClosedXML.Excel.XLBookPoint.Column">
            <inheritdoc cref="F:ClosedXML.Excel.XLSheetPoint.Column"/>
        </member>
        <member name="P:ClosedXML.Excel.XLBookPoint.Point">
            <summary>
            A point in the sheet.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLName">
            <summary>
            A name in a worksheet. Unlike <see cref="T:ClosedXML.Excel.IXLDefinedName"/>, this is basically only a reference.
            The actual 
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLName.SheetName">
            <summary>
            Name of a sheet. If null, the scope is a workbook. The sheet might not exist, e.g. it
            is only in a formula. The name of a sheet is not escaped.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLName.Name">
            <summary>
            The defined name in the scope. Case insensitive during comparisons.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLReference">
            <summary>
            A reference without a sheet. Can represent single cell (<c>A1</c>), area
            (<c>B$4:$D$10</c>), row span (<c>4:10</c>) and col span (<c>G:H</c>).
            </summary>
            <remarks>
            This is an actual representation of a reference, while the <see cref="T:ClosedXML.Excel.XLSheetRange"/> is for
            an absolute are of a sheet and <see cref="T:ClosedXML.Excel.XLAddress"/> is only for a cell reference and
            <see cref="T:ClosedXML.Excel.XLRangeAddress"/> only for area reference.
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.XLSheetPoint">
            <summary>
            An point (address) in a worksheet, an equivalent of <c>ST_CellRef</c>.
            </summary>
            <remarks>Unlike the XLAddress, sheet can never be invalid.</remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetPoint.Row">
            <summary>
            1-based row number in a sheet.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetPoint.Column">
            <summary>
            1-based column number in a sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.Parse(System.String)">
            <inheritdoc cref="M:ClosedXML.Excel.XLSheetPoint.Parse(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse point per type <c>ST_CellRef</c> from
            <a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/db11a912-b1cb-4dff-b46d-9bedfd10cef0">2.1.1108 Part 4 Section 3.18.8, ST_CellRef (Cell Reference)</a>
            </summary>
            <param name="input">Input text</param>
            <exception cref="T:System.FormatException">If the input doesn't match expected grammar.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.Format(System.Span{System.Char})">
            <summary>
            Write the sheet point as a reference to the span (e.g. <c>A1</c>).
            </summary>
            <param name="output">Must be at least 10 chars long</param>
            <returns>Number of chars </returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.FromAddress(ClosedXML.Excel.IXLAddress)">
            <summary>
            Create a sheet point from the address. Workbook is ignored.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.InRangeOrBelow(ClosedXML.Excel.XLSheetRange@)">
            <summary>
            Is the point within the range or below the range?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.InRangeOrToLeft(ClosedXML.Excel.XLSheetRange@)">
            <summary>
            Is the point within the range or to the left of the range?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.ShiftRow(System.Int32)">
            <summary>
            Return a new point that has its row coordinate shifted by <paramref name="rowShift"/>.
            </summary>
            <param name="rowShift">How many rows will new point be shifted. Positive - new point
                is downwards, negative - new point is upwards relative to the current point.</param>
            <returns>Shifted point.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetPoint.ShiftColumn(System.Int32)">
            <summary>
            Return a new point that has its column coordinate shifted by <paramref name="columnShift"/>.
            </summary>
            <param name="columnShift">How many columns will new point be shifted. Positive - new
                point is to the right, negative - new point is to the left.</param>
            <returns>Shifted point.</returns>
        </member>
        <member name="T:ClosedXML.Excel.XLSheetRange">
            <summary>
            A representation of a <c>ST_Ref</c>, i.e. an area in a sheet (no reference to the sheet).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetRange.Full">
            <summary>
            A range that covers whole worksheet.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetRange.FirstPoint">
            <summary>
            Top-left point of the sheet range.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLSheetRange.LastPoint">
            <summary>
            Bottom-right point of the sheet range.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLSheetRange.LeftColumn">
            <summary>
            The left column number of the range. From 1 to <see cref="F:ClosedXML.Excel.XLHelper.MaxColumnNumber"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLSheetRange.RightColumn">
            <summary>
            The right column number of the range. From 1 to <see cref="F:ClosedXML.Excel.XLHelper.MaxColumnNumber"/>.
            Greater or equal to <see cref="P:ClosedXML.Excel.XLSheetRange.LeftColumn"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLSheetRange.TopRow">
            <summary>
            The top row number of the range. From 1 to <see cref="F:ClosedXML.Excel.XLHelper.MaxRowNumber"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLSheetRange.BottomRow">
            <summary>
            The bottom row number of the range. From 1 to <see cref="F:ClosedXML.Excel.XLHelper.MaxRowNumber"/>.
            Greater or equal to <see cref="P:ClosedXML.Excel.XLSheetRange.TopRow"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Parse(System.String)">
            <inheritdoc cref="M:ClosedXML.Excel.XLSheetRange.Parse(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse point per type <c>ST_Ref</c> from
            <a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/e7f22870-88a1-4c06-8e5f-d035b1179c50">2.1.1119 Part 4 Section 3.18.64, ST_Ref (Cell Range Reference)</a>
            </summary>
            <remarks>Can be one cell reference (A1) or two separated by a colon (A1:B2). First reference is always in top left corner</remarks>
            <param name="input">Input text</param>
            <exception cref="T:System.FormatException">If the input doesn't match expected grammar.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Format(System.Span{System.Char})">
            <summary>
            Write the sheet range to the span. If range has only one cell, write only the cell.
            </summary>
            <param name="output">Must be at least 21 chars long.</param>
            <returns>Number of written characters.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.BelowRange">
            <summary>
            Return a range that contains all cells below the current range.
            </summary>
            <exception cref="T:System.InvalidOperationException">The range touches the bottom border of the sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.BelowRange(System.Int32)">
            <summary>
            Get a range below the current one <paramref name="rows"/> rows.
            If there isn't enough rows, use as many as possible.
            </summary>
            <exception cref="T:System.InvalidOperationException">The range touches the bottom border of the sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.RightRange">
            <summary>
            Return a range that contains all cells to the right of the range.
            </summary>
            <exception cref="T:System.InvalidOperationException">The range touches the right border of the sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.ExtendBelow(System.Int32)">
            <summary>
            Return a range that contains additional number of rows below.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.ExtendRight(System.Int32)">
            <summary>
            Return a range that contains additional number of columns to the right.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.SliceFromBottom(System.Int32)">
            <summary>
            Create a new range from this one by taking a number of rows from the bottom row up.
            </summary>
            <param name="rows">How many rows to take, must be at least one.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.SliceFromTop(System.Int32)">
            <summary>
            Create a new range from this one by taking a number of rows from the top row down.
            </summary>
            <param name="rows">How many rows to take, must be at least one.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.SliceFromRight(System.Int32)">
            <summary>
            Create a new range from this one by taking a number of rows from the bottom row up.
            </summary>
            <param name="columns">How many columns to take, must be at least one.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Range(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Create a new sheet range that is a result of range operator (<c>:</c>)
            of this sheet range and <paramref name="otherRange"/>
            </summary>
            <param name="otherRange">The other range.</param>
            <returns>A range that contains both this range and <paramref name="otherRange"/>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.Intersect(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Do an intersection between this range and other range.
            </summary>
            <param name="other">Other range.</param>
            <returns>The intersection range if it exists and is non-empty or null, if intersection doesn't exist.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.IsEntireColumn">
            <summary>
            Does range cover all rows, from top row to bottom row of a sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.IsEntireRow">
            <summary>
            Does range cover all columns, from first to last column of a sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.At(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Return a new range that has the same size as the current one,
            </summary>
            <param name="topLeftCorner">New top left coordinate of returned range.</param>
            <returns>New range.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetRange.ShiftRows(System.Int32)">
            <summary>
            Return a new range that has been shifted in vertical direction by <paramref name="rowShift"/>.
            </summary>
            <param name="rowShift">By how much to shift the range, positive - downwards, negative - upwards.</param>
            <returns>Newly created area.</returns>
        </member>
        <member name="T:ClosedXML.Excel.XLSheetReference">
            <summary>
            <see cref="T:ClosedXML.Excel.XLReference"/> that includes a sheet. It can represent cell
            (<c>'Sheet one'!A$1</c>), area (<c>Sheet1!A4:$G$5</c>), row span (<c>'Sales Q1'!4:10</c>)
            and col span (<c>Sales!G:H</c>).
            </summary>
            <param name="Sheet">
            Name of a sheet. Unescaped, so it doesn't include quotes. Note that sheet might not exist.
            </param>
            <param name="Reference">
            Referenced area in the sheet. Can be in A1 or R1C1.
            </param>
        </member>
        <member name="M:ClosedXML.Excel.XLSheetReference.#ctor(System.String,ClosedXML.Excel.XLReference)">
            <summary>
            <see cref="T:ClosedXML.Excel.XLReference"/> that includes a sheet. It can represent cell
            (<c>'Sheet one'!A$1</c>), area (<c>Sheet1!A4:$G$5</c>), row span (<c>'Sales Q1'!4:10</c>)
            and col span (<c>Sales!G:H</c>).
            </summary>
            <param name="Sheet">
            Name of a sheet. Unescaped, so it doesn't include quotes. Note that sheet might not exist.
            </param>
            <param name="Reference">
            Referenced area in the sheet. Can be in A1 or R1C1.
            </param>
        </member>
        <member name="P:ClosedXML.Excel.XLSheetReference.Sheet">
            <summary>
            Name of a sheet. Unescaped, so it doesn't include quotes. Note that sheet might not exist.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLSheetReference.Reference">
            <summary>
            Referenced area in the sheet. Can be in A1 or R1C1.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLDataValidation.Ranges">
            <summary>
            A collection of ranges the data validation rule applies too.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.AddRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Add a range to the collection of ranges this rule applies to.
            If the specified range does not belong to the worksheet of the data validation
            rule it is transferred to the target worksheet.
            </summary>
            <param name="range">A range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.AddRanges(System.Collections.Generic.IEnumerable{ClosedXML.Excel.IXLRange})">
            <summary>
            Add a collection of ranges to the collection of ranges this rule applies to.
            Ranges that do not belong to the worksheet of the data validation
            rule are transferred to the target worksheet.
            </summary>
            <param name="ranges">Ranges to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.ClearRanges">
            <summary>
            Detach data validation rule of all ranges it applies to.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidation.RemoveRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Remove the specified range from the collection of range this rule applies to.
            </summary>
            <param name="range">A range to remove.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidations.Add(ClosedXML.Excel.IXLDataValidation)">
            <summary>
            Add data validation rule to the collection. If the specified rule refers to another
            worksheet than the collection, the copy will be created and its ranges will refer
            to the worksheet of the collection. Otherwise the original instance will be placed
            in the collection.
            </summary>
            <param name="dataValidation">A data validation rule to add.</param>
            <returns>The instance that has actually been added in the collection
            (may be a copy of the specified one).</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidations.GetAllInRange(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Get all data validation rules applied to ranges that intersect the specified range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDataValidations.TryGet(ClosedXML.Excel.IXLRangeAddress,ClosedXML.Excel.IXLDataValidation@)">
            <summary>
            Get the data validation rule for the range with the specified address if it exists.
            </summary>
            <param name="rangeAddress">A range address.</param>
            <param name="dataValidation">Data validation rule which ranges collection includes the specified
            address. The specified range should be fully covered with the data validation rule.
            For example, if the rule is applied to ranges A1:A3,C1:C3 then this method will
            return True for ranges A1:A3, C1:C2, A2:A3, and False for ranges A1:C3, A1:C1, etc.</param>
            <returns>True is the data validation rule was found, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.AddRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Add a range to the collection of ranges this rule applies to.
            If the specified range does not belong to the worksheet of the data validation
            rule it is transferred to the target worksheet.
            </summary>
            <param name="range">A range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.AddRanges(System.Collections.Generic.IEnumerable{ClosedXML.Excel.IXLRange})">
            <summary>
            Add a collection of ranges to the collection of ranges this rule applies to.
            Ranges that do not belong to the worksheet of the data validation
            rule are transferred to the target worksheet.
            </summary>
            <param name="ranges">Ranges to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.ClearRanges">
            <summary>
            Detach data validation rule of all ranges it applies to.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidation.RemoveRange(ClosedXML.Excel.IXLRange)">
            <summary>
            Remove the specified range from the collection of range this rule applies to.
            </summary>
            <param name="range">A range to remove.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLDataValidations._skipSplittingExistingRanges">
            <summary>
            The flag used to avoid unnecessary check for splitting intersected ranges when we already
            are performing the splitting.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidations.GetAllInRange(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Get all data validation rules applied to ranges that intersect the specified range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDataValidations.TryGet(ClosedXML.Excel.IXLRangeAddress,ClosedXML.Excel.IXLDataValidation@)">
            <summary>
            Get the data validation rule for the range with the specified address if it exists.
            </summary>
            <param name="rangeAddress">A range address.</param>
            <param name="dataValidation">Data validation rule which ranges collection includes the specified
            address. The specified range should be fully covered with the data validation rule.
            For example, if the rule is applied to ranges A1:A3,C1:C3 then this method will
            return True for ranges A1:A3, C1:C2, A2:A3, and False for ranges A1:C3, A1:C1, etc.</param>
            <returns>True is the data validation rule was found, false otherwise.</returns>
        </member>
        <member name="T:ClosedXML.Excel.XLDataValidations.XLDataValidationIndexEntry">
            <summary>
            Class used for indexing data validation rules.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLDataValidations.XLDataValidationIndexEntry.RangeAddress">
            <summary>
              Gets an object with the boundaries of this range.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLNamedRangeScope">
            <summary>
            A scope of <see cref="T:ClosedXML.Excel.IXLDefinedName"/>. It determines where can be defined name resolved.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLNamedRangeScope.Worksheet">
            <summary>
            Name is defined at the sheet level and is available only at the sheet
            it is defined or <see cref="P:ClosedXML.Excel.IXLWorksheet.DefinedNames"/> collection or when referred
            with sheet specifier (e.g. <c>Sheet5!Name</c> when name is scoped to <c>Sheet5</c>).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLNamedRangeScope.Workbook">
            <summary>
            Name is defined at the workbook and is available everywhere.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLDefinedName.Comment">
            <summary>
            Gets or sets the comment for this named range.
            </summary>
            <value>
            The comment for this named range.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLDefinedName.IsValid">
            <summary>
            Checks if the named range contains invalid references (#REF!).
            <para>
            <example>Defined name with a formula <c>SUM(#REF!A1, Sheet7!B4)</c> would return
            <c>true</c>, because <c>#REF!A1</c> is an invalid reference.</example>
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLDefinedName.Name">
            <summary>
            Gets or sets the name of the range.
            </summary>
            <value>
            The name of the range.
            </value>
            <exception cref="T:System.ArgumentException">Set value is not a valid name.</exception>
            <exception cref="T:System.InvalidOperationException">The name is colliding with a different name
            that is already defined in the collection.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLDefinedName.Ranges">
            <summary>
            Gets the ranges associated with this named range.
            <para>Note: A named range can point to multiple ranges.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLDefinedName.RefersTo">
            <summary>
            A formula of the named range. In most cases, name is just a range (e.g.
            <c>Sheet5!$A$4</c>), but it can be a constant, lambda or other values.
            The name formula can contain a bang reference (e.g. reference without
            a sheet, but with exclamation mark <c>!$A$5</c>), but can't contain plain
            local cell references (i.e. references without a sheet like <c>A5</c>).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLDefinedName.Scope">
            <summary>
            Gets the scope of this named range.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLDefinedName.Visible">
            <summary>
            Gets or sets the visibility of this named range.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedName.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Copy sheet-scoped defined name to a different sheet. The references to the original
            sheet are changed to refer to the <paramref name="targetSheet"/>:
            <list type="bullet">
              <item>Cell ranges (<c>Org!A1</c> will be <c>New!A1</c>).</item>
              <item>Tables - if the target sheet contains a table of same size at same place as the original sheet.</item>
              <item>Sheet-specified names (<c>Org!Name</c> will be <c>New!Name</c>, but the actual name won't be created).</item>
            </list>
            </summary>
            <param name="targetSheet">Target sheet where to copy the defined name.</param>
            <exception cref="T:System.InvalidOperationException">Defined name is workbook-scoped</exception>
            <exception cref="T:System.InvalidOperationException">Trying to copy defined name to the same sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedName.Delete">
            <summary>
            Deletes this named range (not the cells).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.NamedRange(System.String)">
            <inheritdoc cref="M:ClosedXML.Excel.IXLDefinedNames.DefinedName(System.String)"/>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.DefinedName(System.String)">
            <summary>
            Gets the specified defined name.
            </summary>
            <param name="name">Name identifier.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Name wasn't found.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Add(System.String,System.String)">
            <summary>
            Adds a new defined name.
            </summary>
            <param name="name">Name identifier to add.</param>
            <param name="rangeAddress">The range address to add.</param>
            <exception cref="T:System.ArgumentException">The name or address is invalid.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Add(System.String,ClosedXML.Excel.IXLRange)">
            <summary>
            Adds a new defined name.
            </summary>
            <param name="name">Name identifier to add.</param>
            <param name="range">The range to add.</param>
            <exception cref="T:System.ArgumentException">The name is invalid.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Add(System.String,ClosedXML.Excel.IXLRanges)">
            <summary>
            Adds a new defined name.
            </summary>
            <param name="name">Name identifier to add.</param>
            <param name="ranges">The ranges to add.</param>
            <exception cref="T:System.ArgumentException">The name is invalid.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new defined name.
            </summary>
            <param name="name">Name identifier to add.</param>
            <param name="rangeAddress">The range address to add.</param>
            <param name="comment">The comment for the new named range.</param>
            <exception cref="T:System.ArgumentException">The range name or address is invalid.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Add(System.String,ClosedXML.Excel.IXLRange,System.String)">
            <summary>
            Adds a new defined name.
            </summary>
            <param name="name">Name identifier to add.</param>
            <param name="range">The range to add.</param>
            <param name="comment">The comment for the new named range.</param>
            <exception cref="T:System.ArgumentException">The range name is invalid.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Add(System.String,ClosedXML.Excel.IXLRanges,System.String)">
            <summary>
            Adds a new defined name.
            </summary>
            <param name="name">Name identifier to add.</param>
            <param name="ranges">The ranges to add.</param>
            <param name="comment">The comment for the new named range.</param>
            <exception cref="T:System.ArgumentException">The range name is invalid.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Delete(System.String)">
            <summary>
            Deletes the specified defined name.  Deleting defined name doesn't delete referenced
            cells.
            </summary>
            <param name="name">Name identifier to delete.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.Delete(System.Int32)">
            <summary>
            Deletes the specified defined name's index. Deleting defined name doesn't delete
            referenced cells.
            </summary>
            <param name="index">Index of the defined name to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is outside of named ranges array.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.DeleteAll">
            <summary>
            Deletes all defined names of this collection, i.e. a workbook or a sheet. Deleting
            defined name doesn't delete referenced cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.ValidNamedRanges">
            <summary>
            Returns a subset of defined names that do not have invalid references.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLDefinedNames.InvalidNamedRanges">
            <summary>
            Returns a subset of defined names that do have invalid references.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLDefinedName.SheetReferencesList">
            <summary>
            Get sheet references found in the formula in A1. Doesn't return tables or name references,
            only what has col/row coordinates.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLDefinedNames">
            <summary>
            A collection of a named ranges, either for workbook or for worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDefinedNames.Add(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the specified range name.
            </summary>
            <param name="name">Name of the range.</param>
            <param name="rangeAddress">The range address.</param>
            <param name="comment">The comment.</param>
            <param name="validateName">if set to <c>true</c> validates the name.</param>
            <param name="validateRangeAddress">if set to <c>true</c> range address will be checked for validity.</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentException">
            For named ranges in the workbook scope, specify the sheet name in the reference.
            </exception>
        </member>
        <member name="M:ClosedXML.Excel.XLDefinedNames.ValidNamedRanges">
            <summary>
            Returns a subset of named ranges that do not have invalid references.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLDefinedNames.InvalidNamedRanges">
            <summary>
            Returns a subset of named ranges that do have invalid references.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.Format">
            <summary>
            Type of image. The supported formats are defined by OpenXML's ImagePartType.
            Default value is "jpeg"
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.Width">
            <summary>
            Current width of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.Height">
            <summary>
            Current height of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.OriginalHeight">
            <summary>
            Original height of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Drawings.IXLPicture.OriginalWidth">
            <summary>
            Original width of the picture in pixels.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.IXLPicture.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Create a copy of the picture on a different worksheet.
            </summary>
            <param name="targetSheet">The worksheet to which the picture will be copied.</param>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.IXLPicture.Delete">
            <summary>
            Deletes this picture.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.IXLPicture.Duplicate">
            <summary>
            Create a copy of the picture on the same worksheet.
            </summary>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.XLPicture.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Create a copy of the picture on a different worksheet.
            </summary>
            <param name="targetSheet">The worksheet to which the picture will be copied.</param>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Drawings.XLPicture.Duplicate">
            <summary>
            Create a copy of the picture on the same worksheet.
            </summary>
            <returns>A created copy of the picture.</returns>
        </member>
        <member name="T:ClosedXML.Excel.Exceptions.InvalidReferenceException">
            <summary>
            A reference to the data in a worksheet is not valid. E.g. sheet with
            specific name doesn't exist, name doesn't exist.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.InsertData.IInsertDataReader">
            <summary>
            A universal interface for different data readers used in InsertData logic.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.InsertData.IInsertDataReader.GetRecords">
            <summary>
            Get a collection of records, each as a collection of values, extracted from a source.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.InsertData.IInsertDataReader.GetPropertiesCount">
            <summary>
            Get the number of properties to use as a table with.
            Actual number of may vary in different records.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.InsertData.IInsertDataReader.GetPropertyName(System.Int32)">
            <summary>
            Get the title of the property with the specified index.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.LoadContext._pivotCfs">
            <summary>
            Conditional formats for pivot tables, loaded from sheets. Key is sheet name, value is the
            conditional formats.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.LoadContext._numberFormats">
            <summary>
            A dictionary of styles from <c>styles.xml</c>. Used in other places that reference number style by id reference.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IO.OpenXmlConst">
            <summary>
            Constants used across writers.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.OpenXmlConst.TrueValue">
            <summary>
            Valid and shorter than normal true.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.OpenXmlConst.FalseValue">
            <summary>
            Valid and shorter than normal false.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IO.PartStructureException">
            <summary>
            An exception thrown from parser when there is a problem with data in XML.
            The exception messages are rather generic and not very helpful, but they
            aren't supposed to be. If this exception is thrown, there is either
            a problem with producer of a workbook or ClosedXML. Both should do
            investigation based on a the file causing an error.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IO.PartStructureException.ExpectedElementNotFound(System.String)">
            <summary>
            Create a new exception with info that some element that should be present in a workbook
            is missing.
            </summary>
            <param name="missingElementDesc">optional info about what element is missing.</param>
        </member>
        <member name="F:ClosedXML.Excel.IO.PivotTableDefinitionPartReader.ValuesFieldIndex">
            <summary>
            A field displayed as <c>∑Values</c> in a pivot table that contains names of all aggregation
            function in value fields collection. Also commonly called 'data' field.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IO.TablePartWriter">
            <summary>
            A writer for table definition part.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IO.WorkbookStylesPartWriter.AddDifferentialFormats(DocumentFormat.OpenXml.Packaging.WorkbookStylesPart,ClosedXML.Excel.XLWorkbook,ClosedXML.Excel.XLWorkbook.SaveContext)">
            <summary>
            Populates the differential formats that are currently in the file to the SaveContext
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IO.WorkbookStylesPartWriter.CellFormatsAreEqual(DocumentFormat.OpenXml.Spreadsheet.CellFormat,ClosedXML.Excel.XLWorkbook.StyleInfo,System.Boolean)">
            <summary>
            Check if two style are equivalent.
            </summary>
            <param name="f">Style in the OpenXML format.</param>
            <param name="styleInfo">Style in the ClosedXML format.</param>
            <param name="compareAlignment">Flag specifying whether or not compare the alignments of two styles.
            Styles in x:cellStyleXfs section do not include alignment so we don't have to compare it in this case.
            Styles in x:cellXfs section, on the opposite, do include alignments, and we must compare them.
            </param>
            <returns>True if two formats are equivalent, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IO.WorksheetPartWriter.StreamToPart(DocumentFormat.OpenXml.Spreadsheet.Worksheet,DocumentFormat.OpenXml.Packaging.WorksheetPart,ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLWorkbook.SaveContext,ClosedXML.Excel.SaveOptions)">
            <summary>
            Stream detached worksheet DOM to the worksheet part stream.
            Replaces the content of the part.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.WorksheetPartWriter.FormulaDataType">
            <summary>
            An array to convert data type for a formula cell. Key is <see cref="T:ClosedXML.Excel.XLDataType"/>.
            It saves some performance through direct indexation instead of switch.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.IO.WorksheetPartWriter.ValueDataType">
            <summary>
            An array to convert data type for a cell that only contains a value. Key is <see cref="T:ClosedXML.Excel.XLDataType"/>.
            It saves some performance through direct indexation instead of switch.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.SplitColumn">
            <summary>
            Gets or sets the column after which the horizontal split should take place.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.SplitRow">
            <summary>
            Gets or sets the row after which the vertical split should take place.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.TopLeftCellAddress">
            <summary>
            Gets or sets the location of the top left visible cell
            </summary>
            <value>
            The scroll position's top left cell.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScale">
            <summary>
            Window zoom magnification for current view representing percent values. Horizontal and vertical scale together.
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScaleNormal">
            <summary>
            Zoom magnification to use when in normal view. Horizontal and vertical scale together
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScalePageLayoutView">
            <summary>
            Zoom magnification to use when in page layout view. Horizontal and vertical scale together.
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLSheetView.ZoomScaleSheetLayoutView">
            <summary>
            Zoom magnification to use when in page break preview. Horizontal and vertical scale together.
            </summary>
            <remarks>Representing percent values ranging from 10 to 400.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLSheetView.Freeze(System.Int32,System.Int32)">
            <summary>
            Freezes the specified rows and columns.
            </summary>
            <param name="rows">The rows to freeze.</param>
            <param name="columns">The columns to freeze.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLSheetView.FreezeColumns(System.Int32)">
            <summary>
            Freezes the left X columns.
            </summary>
            <param name="columns">The columns to freeze.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLSheetView.FreezeRows(System.Int32)">
            <summary>
            Freezes the top X rows.
            </summary>
            <param name="rows">The rows to freeze.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.CalculateMode">
            <summary>
              Gets or sets the workbook's calculation mode.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.ColumnWidth">
            <summary>
              Gets or sets the default column width for the workbook.
              <para>All new worksheets will use this column width.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.DefinedNames">
            <summary>
              Gets an object to manipulate this workbook's defined names.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Outline">
            <summary>
              Gets or sets the default outline options for the workbook.
              <para>All new worksheets will use these outline options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.PageOptions">
            <summary>
              Gets or sets the default page options for the workbook.
              <para>All new worksheets will use these page options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.PivotCaches">
            <summary>
              Gets all pivot caches in a workbook. A one cache can be
              used by multiple tables. Unused caches are not saved.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Properties">
            <summary>
              Gets or sets the workbook's properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.ReferenceStyle">
            <summary>
              Gets or sets the workbook's reference style.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.RowHeight">
            <summary>
              Gets or sets the default row height for the workbook.
              <para>All new worksheets will use this row height.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Style">
            <summary>
              Gets or sets the default style for the workbook.
              <para>All new worksheets will use this style.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Theme">
            <summary>
              Gets an object to manipulate this workbook's theme.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorkbook.Worksheets">
            <summary>
              Gets an object to manipulate the worksheets.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.AddWorksheet(System.Data.DataTable)">
            <summary>
            Add a worksheet with a table at Cell(row:1, column:1). The dataTable's name is used for the
            worksheet name. The name of a table will be generated as <em>Table{number suffix}</em>.
            </summary>
            <param name="dataTable">Datatable to insert</param>
            <returns>Inserted Worksheet</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.AddWorksheet(System.Data.DataTable,System.String)">
            <summary>
            Add a worksheet with a table at Cell(row:1, column:1). The sheetName provided is used for the
            worksheet name. The name of a table will be generated as <em>Table{number suffix}</em>.
            </summary>
            <param name="dataTable">dataTable to insert as Excel Table</param>
            <param name="sheetName">Worksheet and Excel Table name</param>
            <returns>Inserted Worksheet</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.AddWorksheet(System.Data.DataTable,System.String,System.String)">
            <summary>
            Add a worksheet with a table at Cell(row:1, column:1).
            </summary>
            <param name="dataTable">dataTable to insert as Excel Table</param>
            <param name="sheetName">Worksheet name</param>
            <param name="tableName">Excel Table name</param>
            <returns>Inserted Worksheet</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Evaluate(System.String)">
            <summary>
            Evaluate a formula expression.
            </summary>
            <param name="expression">Formula expression to evaluate.</param>
            <exception cref="T:ClosedXML.Excel.CalcEngine.Exceptions.MissingContextException">
            If the expression contains a function that requires a context (e.g. current cell or worksheet).
            </exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.DefinedName(System.String)">
            <summary>
            Try to find a defined name. If <paramref name="name"/> specifies a sheet, try to find
            name in the sheet first and fall back to the workbook if not found in the sheet.
            <para>
            <example>
            Requested name <c>Sheet1!Name</c> will first try to find <c>Name</c> in a sheet
            <c>Sheet1</c> (if such sheet exists) and if not found there, tries to find <c>Name</c>
            in workbook.
            </example>
            </para>
            <para>
            <example>
            Requested name <c>Name</c> will be searched only in a workbooks <see cref="P:ClosedXML.Excel.IXLWorkbook.DefinedNames"/>.
            </example>
            </para>
            </summary>
            <param name="name">Name of requested name, either plain name (e.g. <c>Name</c>) or with
            sheet specified (e.g. <c>Sheet!Name</c>).</param>
            <returns>Found name or null.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.RecalculateAllFormulas">
            <summary>
            Force recalculation of all cell formulas.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Save">
            <summary>
              Saves the current workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Save(System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook and optionally performs validation
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.String)">
            <summary>
              Saves the current workbook to a file.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a file and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.IO.Stream)">
            <summary>
              Saves the current workbook to a stream.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.SaveAs(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a stream and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Search(System.String,System.Globalization.CompareOptions,System.Boolean)">
            <summary>
            Searches the cells' contents for a given piece of text
            </summary>
            <param name="searchText">The search text.</param>
            <param name="compareOptions">The compare options.</param>
            <param name="searchFormulae">if set to <c>true</c> search formulae instead of cell values.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorkbook.Table(System.String,System.StringComparison)">
            <summary>
            Gets the Excel table of the given name
            </summary>
            <param name="tableName">Name of the table to return.</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The table with given name</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If no tables with this name could be found in the workbook.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Workbook">
            <summary>
            Gets the workbook that contains this worksheet
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.ColumnWidth">
            <summary>
            Gets or sets the default column width for this worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.RowHeight">
            <summary>
            Gets or sets the default row height for this worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Name">
            <summary>
            Gets or sets the name (caption) of this worksheet. The sheet rename also renames sheet
            in formulas and defined names.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Position">
            <summary>
            Gets or sets the position of the sheet.
            <para>When setting the Position all other sheets' positions are shifted accordingly.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.PageSetup">
            <summary>
            Gets an object to manipulate the sheet's print options.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Outline">
            <summary>
            Gets an object to manipulate the Outline levels.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstRow">
            <summary>
            Gets the first row of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstRowUsed">
            <summary>
            Gets the first non-empty row of the worksheet that contains a cell with a value.
            <para>Formatted empty cells do not count.</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstRowUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the first non-empty row of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastRow">
            <summary>
            Gets the last row of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastRowUsed">
            <summary>
            Gets the last non-empty row of the worksheet that contains a cell with a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastRowUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the last non-empty row of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstColumn">
            <summary>
            Gets the first column of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstColumnUsed">
            <summary>
            Gets the first non-empty column of the worksheet that contains a cell with a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.FirstColumnUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the first non-empty column of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastColumn">
            <summary>
            Gets the last column of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastColumnUsed">
            <summary>
            Gets the last non-empty column of the worksheet that contains a cell with a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.LastColumnUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Gets the last non-empty column of the worksheet that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns">
            <summary>
            Gets a collection of all columns in this worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns(System.String)">
            <summary>
            Gets a collection of the specified columns in this worksheet, separated by commas.
            <para>e.g. Columns("G:H"), Columns("10:11,13:14"), Columns("P:Q,S:T"), Columns("V")</para>
            </summary>
            <param name="columns">The columns to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns(System.String,System.String)">
            <summary>
            Gets a collection of the specified columns in this worksheet.
            </summary>
            <param name="firstColumn">The first column to return.</param>
            <param name="lastColumn">The last column to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Columns(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified columns in this worksheet.
            </summary>
            <param name="firstColumn">The first column to return.</param>
            <param name="lastColumn">The last column to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Rows">
            <summary>
            Gets a collection of all rows in this worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Rows(System.String)">
            <summary>
            Gets a collection of the specified rows in this worksheet, separated by commas.
            <para>e.g. Rows("4:5"), Rows("7:8,10:11"), Rows("13")</para>
            </summary>
            <param name="rows">The rows to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Rows(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified rows in this worksheet.
            </summary>
            <param name="firstRow">The first row to return.</param>
            <param name="lastRow">The last row to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Row(System.Int32)">
            <summary>
            Gets the specified row of the worksheet.
            </summary>
            <param name="row">The worksheet's row.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Column(System.Int32)">
            <summary>
            Gets the specified column of the worksheet.
            </summary>
            <param name="column">The worksheet's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Column(System.String)">
            <summary>
            Gets the specified column of the worksheet.
            </summary>
            <param name="column">The worksheet's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified row and column.
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(System.String)">
            <summary>Gets the cell at the specified address.</summary>
            <param name="cellAddressInRange">The cell address in the worksheet.</param>
            <exception cref="T:System.ArgumentException">Address is not A1 or workbook-scoped named range.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(System.Int32,System.String)">
            <summary>
            Gets the cell at the specified row and column.
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Cell(ClosedXML.Excel.IXLAddress)">
            <summary>Gets the cell at the specified address.</summary>
            <param name="cellAddressInRange">The cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns the specified range.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(System.String)">
            <summary>Returns the specified range.</summary>
            <para>e.g. Range("A1"), Range("A1:C2")</para>
            <param name="rangeAddress">The range boundaries.</param>
            <exception cref="T:System.ArgumentException"><paramref name="rangeAddress"/> is not a valid address or named range.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLCell)">
            <summary>Returns the specified range.</summary>
            <param name="firstCell">The first cell in the range.</param>
            <param name="lastCell"> The last cell in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(System.String,System.String)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress"> The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress"> The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Ranges(System.String)">
            <summary>Returns a collection of ranges, separated by commas.</summary>
            <para>e.g. Ranges("A1"), Ranges("A1:C2"), Ranges("A1:B2,D1:D4")</para>
            <param name="ranges">The ranges to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Range(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellRow">   The first cell's row of the range to return.</param>
            <param name="firstCellColumn">The first cell's column of the range to return.</param>
            <param name="lastCellRow">    The last cell's row of the range to return.</param>
            <param name="lastCellColumn"> The last cell's column of the range to return.</param>
            <returns>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.RowCount">
            <summary>Gets the number of rows in this worksheet.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ColumnCount">
            <summary>Gets the number of columns in this worksheet.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseRows">
            <summary>
            Collapses all outlined rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseColumns">
            <summary>
            Collapses all outlined columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandRows">
            <summary>
            Expands all outlined rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandColumns">
            <summary>
            Expands all outlined columns.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseRows(System.Int32)">
            <summary>
            Collapses the outlined rows of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CollapseColumns(System.Int32)">
            <summary>
            Collapses the outlined columns of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandRows(System.Int32)">
            <summary>
            Expands the outlined rows of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.ExpandColumns(System.Int32)">
            <summary>
            Expands the outlined columns of the specified level.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Delete">
            <summary>
            Deletes this worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.DefinedNames">
            <summary>
            Gets an object to manage this worksheet's defined names.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.DefinedName(System.String)">
            <summary>
            Gets the specified defined name.
            </summary>
            <param name="name">Name identifier of defined name, without sheet name.</param>
            <exception cref="T:System.ArgumentException">Name wasn't found in sheets defined names.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.SheetView">
            <summary>
            Gets an object to manage how the worksheet is going to displayed by Excel.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Table(System.Int32)">
            <summary>
            Gets the Excel table of the given index
            </summary>
            <param name="index">Index of the table to return</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Table(System.String)">
            <summary>
            Gets the Excel table of the given name
            </summary>
            <param name="name">Name of the table to return</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.Tables">
            <summary>
            Gets an object to manage this worksheet's Excel tables
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CopyTo(System.String)">
            <summary>
            Copies the
            </summary>
            <param name="newSheetName"></param>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.CopyTo(ClosedXML.Excel.XLWorkbook,System.String)">
            <summary>
            Copy a worksheet from this workbook to a different workbook as a new sheet.
            </summary>
            <param name="workbook">Workbook into which copy this sheet.</param>
            <param name="newSheetName">Name of new sheet in the <paramref name="workbook"/> where will the data be copied. Sheet will be in the last position.</param>
            <returns>Newly created sheet in the <paramref name="workbook"/>.</returns>
        </member>
        <member name="P:ClosedXML.Excel.IXLWorksheet.ActiveCell">
            <summary>
            The active cell of the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.Evaluate(System.String,System.String)">
            <summary>
            Evaluate an formula and return a result.
            </summary>
            <param name="expression">Formula to evaluate.</param>
            <param name="formulaAddress">A cell address that is used to provide context for formula calculation (mostly implicit intersection).</param>
            <exception cref="T:ClosedXML.Excel.CalcEngine.Exceptions.MissingContextException">If <paramref name="formulaAddress"/> was needed for some part of calculation.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLWorksheet.RecalculateAllFormulas">
            <summary>
            Force recalculation of all cell formulas in the sheet while leaving other sheets without change, even if their dirty cells.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.LoadOptions">
            <summary>
            A class that defines various aspects of a newly created workbook.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.DefaultGraphicEngine">
            <summary>
            A graphics engine that will be used for workbooks without explicitly set engine.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.RecalculateAllFormulas">
            <summary>
            Should all formulas in a workbook be recalculated during load? Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.GraphicEngine">
            <summary>
            Graphic engine used by the workbook.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.LoadOptions.Dpi">
            <summary>
            DPI for the workbook. Default is 96.
            </summary>
            <remarks>Used in various places, e.g. determining a physical size of an image without a DPI or to determine a size of a text in a cell.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLHeaderFooter.Left">
            <summary>
            Gets the left header/footer item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLHeaderFooter.Center">
            <summary>
            Gets the middle header/footer item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLHeaderFooter.Right">
            <summary>
            Gets the right header/footer item.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLHeaderFooter.GetText(ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Gets the text of the specified header/footer occurrence.
            </summary>
            <param name="occurrence">The occurrence.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.GetText(ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Gets the text of the specified header/footer occurrence.
            </summary>
            <param name="occurrence">The occurrence.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.AddText(ClosedXML.Excel.XLHFPredefinedText)">
            <summary>
            Adds the given predefined text to this header/footer item.
            </summary>
            <param name="predefinedText">The predefined text to add to this header/footer item.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.AddText(System.String,ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Adds the given text to this header/footer item.
            </summary>
            <param name="text">The text to add to this header/footer item.</param>
            <param name="occurrence">The occurrence for the text.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.AddText(ClosedXML.Excel.XLHFPredefinedText,ClosedXML.Excel.XLHFOccurrence)">
            <summary>
            Adds the given predefined text to this header/footer item.
            </summary>
            <param name="predefinedText">The predefined text to add to this header/footer item.</param>
            <param name="occurrence">The occurrence for the predefined text.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLHFItem.Clear(ClosedXML.Excel.XLHFOccurrence)">
            <summary>Clears the text/formats of this header/footer item.</summary>
            <param name="occurrence">The occurrence to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Left">
            <summary>Gets or sets the Left margin.</summary>
            <value>The Left margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Right">
            <summary>Gets or sets the Right margin.</summary>
            <value>The Right margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Top">
            <summary>Gets or sets the Top margin.</summary>
            <value>The Top margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Bottom">
            <summary>Gets or sets the Bottom margin.</summary>
            <value>The Bottom margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Header">
            <summary>Gets or sets the Header margin.</summary>
            <value>The Header margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLMargins.Footer">
            <summary>Gets or sets the Footer margin.</summary>
            <value>The Footer margin.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PrintAreas">
            <summary>
            Gets an object to manage the print areas of the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.FirstRowToRepeatAtTop">
            <summary>
            Gets the first row that will repeat on the top of the printed pages.
            <para>Use SetRowsToRepeatAtTop() to set the rows that will be repeated on the top of the printed pages.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.LastRowToRepeatAtTop">
            <summary>
            Gets the last row that will repeat on the top of the printed pages.
            <para>Use SetRowsToRepeatAtTop() to set the rows that will be repeated on the top of the printed pages.</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetRowsToRepeatAtTop(System.String)">
            <summary>
            Sets the rows to repeat on the top of the printed pages.
            </summary>
            <param name="range">The range of rows to repeat on the top of the printed pages.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetRowsToRepeatAtTop(System.Int32,System.Int32)">
            <summary>
            Sets the rows to repeat on the top of the printed pages.
            </summary>
            <param name="firstRowToRepeatAtTop">The first row to repeat at top.</param>
            <param name="lastRowToRepeatAtTop">The last row to repeat at top.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.FirstColumnToRepeatAtLeft">
            <summary>Gets the first column to repeat on the left of the printed pages.</summary>
            <value>The first column to repeat on the left of the printed pages.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.LastColumnToRepeatAtLeft">
            <summary>Gets the last column to repeat on the left of the printed pages.</summary>
            <value>The last column to repeat on the left of the printed pages.</value>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetColumnsToRepeatAtLeft(System.Int32,System.Int32)">
            <summary>
            Sets the rows to repeat on the left of the printed pages.
            </summary>
            <param name="firstColumnToRepeatAtLeft">The first column to repeat at left.</param>
            <param name="lastColumnToRepeatAtLeft">The last column to repeat at left.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetColumnsToRepeatAtLeft(System.String)">
            <summary>
            Sets the rows to repeat on the left of the printed pages.
            </summary>
            <param name="range">The range of rows to repeat on the left of the printed pages.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PageOrientation">
            <summary>Gets or sets the page orientation for printing.</summary>
            <value>The page orientation.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PagesWide">
            <summary>
            Gets or sets the number of pages wide (horizontal) the worksheet will be printed on.
            <para>If you don't specify the PagesTall, Excel will adjust that value</para>
            <para>based on the contents of the worksheet and the PagesWide number.</para>
            <para>Setting this value will override the Scale value.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PagesTall">
            <summary>
            Gets or sets the number of pages tall (vertical) the worksheet will be printed on.
            <para>If you don't specify the PagesWide, Excel will adjust that value</para>
            <para>based on the contents of the worksheet and the PagesTall number.</para>
            <para>Setting this value will override the Scale value.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Scale">
            <summary>
            Gets or sets the scale at which the worksheet will be printed.
            <para>The worksheet will be printed on as many pages as necessary to print at the given scale.</para>
            <para>Setting this value will override the PagesWide and PagesTall values.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.HorizontalDpi">
            <summary>
            Gets or sets the horizontal dpi for printing the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.VerticalDpi">
            <summary>
            Gets or sets the vertical dpi for printing the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.FirstPageNumber">
            <summary>
            Gets or sets the page number that will begin the printout.
            <para>For example, the first page of your printout could be numbered page 5.</para>
            </summary>
            <remarks>First page number can be negative, e.g. <c>-2</c>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.CenterHorizontally">
            <summary>
            Gets or sets a value indicating whether the worksheet will be centered on the page horizontally.
            </summary>
            <value>
              <c>true</c> if the worksheet will be centered on the page horizontally; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.CenterVertically">
            <summary>
            Gets or sets a value indicating whether the worksheet will be centered on the page vertically.
            </summary>
            <value>
              <c>true</c> if the worksheet will be centered on the page vertically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.AdjustTo(System.Int32)">
            <summary>
            Sets the scale at which the worksheet will be printed. This is equivalent to setting the Scale property.
            <para>The worksheet will be printed on as many pages as necessary to print at the given scale.</para>
            <para>Setting this value will override the PagesWide and PagesTall values.</para>
            </summary>
            <param name="percentageOfNormalSize">The scale at which the worksheet will be printed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.FitToPages(System.Int32,System.Int32)">
            <summary>
            Gets or sets the number of pages the worksheet will be printed on.
            <para>This is equivalent to setting both PagesWide and PagesTall properties.</para>
            <para>Setting this value will override the Scale value.</para>
            </summary>
            <param name="pagesWide">The pages wide.</param>
            <param name="pagesTall">The pages tall.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PaperSize">
            <summary>
            Gets or sets the size of the paper to print the worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Margins">
            <summary>
            Gets an object to work with the page margins.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Header">
            <summary>
            Gets an object to work with the page headers.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.Footer">
            <summary>
            Gets an object to work with the page footers.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ScaleHFWithDocument">
            <summary>
            Gets or sets a value indicating whether Excel will automatically adjust the font size to the scale of the worksheet.
            </summary>
            <value>
            	<c>true</c> if Excel will automatically adjust the font size to the scale of the worksheet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.AlignHFWithMargins">
            <summary>
            Gets or sets a value indicating whether the header and footer margins are aligned with the left and right margins of the worksheet.
            </summary>
            <value>
              <c>true</c> if the header and footer margins are aligned with the left and right margins of the worksheet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ShowGridlines">
            <summary>
            Gets or sets a value indicating whether the gridlines will be printed.
            </summary>
            <value>
              <c>true</c> if the gridlines will be printed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ShowRowAndColumnHeadings">
            <summary>
            Gets or sets a value indicating whether to show row numbers and column letters/numbers.
            </summary>
            <value>
            	<c>true</c> to show row numbers and column letters/numbers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.BlackAndWhite">
            <summary>
            Gets or sets a value indicating whether the worksheet will be printed in black and white.
            </summary>
            <value>
              <c>true</c> if the worksheet will be printed in black and white; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.DraftQuality">
            <summary>
            Gets or sets a value indicating whether the worksheet will be printed in draft quality.
            </summary>
            <value>
              <c>true</c> if the worksheet will be printed in draft quality; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PageOrder">
            <summary>
            Gets or sets the page order for printing.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ShowComments">
            <summary>
            Gets or sets how the comments will be printed.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.RowBreaks">
            <summary>
            Gets a list with the row breaks (for printing).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.ColumnBreaks">
            <summary>
            Gets a list with the column breaks (for printing).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.AddHorizontalPageBreak(System.Int32)">
            <summary>
            Adds a horizontal page break after the given row.
            </summary>
            <param name="row">The row to insert the break.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.AddVerticalPageBreak(System.Int32)">
            <summary>
            Adds a vertical page break after the given column.
            </summary>
            <param name="column">The column to insert the break.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLPageSetup.PrintErrorValue">
            <summary>
            Gets or sets how error values will be printed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPageSetup.SetFirstPageNumber(System.Nullable{System.Int32})">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPageSetup.FirstPageNumber"/>>
            <param name="value">First page number or <c>null</c> for auto/default page numbering.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Clear">
            <summary>Removes the print areas from the worksheet.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Adds a range to the print areas.</summary>
            <param name="firstCellRow">   The first cell row.</param>
            <param name="firstCellColumn">The first cell column.</param>
            <param name="lastCellRow">    The last cell row.</param>
            <param name="lastCellColumn"> The last cell column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(System.String)">
            <summary>Adds a range to the print areas.</summary>
            <param name="rangeAddress">The range address to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(System.String,System.String)">
            <summary>Adds a range to the print areas.</summary>
            <param name="firstCellAddress">The first cell address.</param>
            <param name="lastCellAddress"> The last cell address.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPrintAreas.Add(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>Adds a range to the print areas.</summary>
            <param name="firstCellAddress">The first cell address.</param>
            <param name="lastCellAddress"> The last cell address.</param>
        </member>
        <member name="T:ClosedXML.Excel.Patterns.Quadrant">
            <summary>
            Implementation of QuadTree adapted to Excel worksheet specifics. Differences with the classic implementation
            are that the topmost level is split to 128 square parts (2 columns of 64 blocks, each 8192*8192 cells) and that splitting
            the quadrant onto 4 smaller quadrants does not depend on the number of items in this quadrant. When the range is added to the
            QuadTree it is placed on the bottommost level where it fits to a single quadrant. That means, row-wide and column-wide ranges
            are always placed at the level 0, and the smaller the range is the deeper it goes down the tree. This approach eliminates
            the need of transferring ranges between levels.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Children">
            <summary>
            Smaller quadrants which the current one is split to. Is NULL until ranges are added to child quadrants.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Level">
            <summary>
            The level of current quadrant. Top most has level 0, child quadrants has levels (Level + 1).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MinimumColumn">
            <summary>
            Minimum column included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MinimumRow">
            <summary>
            Minimum row included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MaximumColumn">
            <summary>
            Maximum column included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.MaximumRow">
            <summary>
            Maximum row included in this quadrant.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Ranges">
            <summary>
            Collection of ranges belonging to this quadrant (does not include ranges from child quadrants).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.X">
            <summary>
            The number of current quadrant by horizontal axis.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.Patterns.Quadrant.Y">
            <summary>
            The number of current quadrant by vertical axis.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Add(ClosedXML.Excel.IXLAddressable)">
            <summary>
            Add a range to the quadrant or to one of the child quadrants (recursively).
            </summary>
            <returns>True, if range was successfully added, false if it has been added before.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.GetAll">
            <summary>
            Get all ranges from the quadrant and all child quadrants (recursively).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Get all ranges from the quadrant and all child quadrants (recursively) that intersect the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.GetIntersectedRanges(ClosedXML.Excel.IXLAddress)">
            <summary>
            Get all ranges from the quadrant and all child quadrants (recursively) that cover the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Remove(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Remove the range from the quadrant or from child quadrants (recursively).
            </summary>
            <returns>True if the range was removed, false if it does not exist in the QuadTree.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.RemoveAll(System.Predicate{ClosedXML.Excel.IXLAddressable})">
            <summary>
            Remove all the ranges matching specified criteria from the quadrant and its child quadrants (recursively).
            Don't use it for searching intersections as it would be much less efficient than <see cref="M:ClosedXML.Excel.Patterns.Quadrant.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Patterns.Quadrant.MAX_LEVEL">
            <summary>
            Maximum depth of the QuadTree. Value 10 corresponds to the smallest quadrants having size 16*16 cells.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Patterns.Quadrant._ranges">
            <summary>
            Collection of ranges belonging to the current quadrant (that cannot fit into child quadrants).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.AddInternal(ClosedXML.Excel.IXLAddressable)">
            <summary>
            Add a range to the collection of quadrant's own ranges.
            </summary>
            <returns>True if the range was successfully added, false if it had been added before.</returns>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Covers(ClosedXML.Excel.IXLRangeAddress@)">
            <summary>
            Check if the current quadrant fully covers the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Covers(ClosedXML.Excel.IXLAddress@)">
            <summary>
            Check if the current quadrant covers the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.Intersects(ClosedXML.Excel.IXLRangeAddress@)">
            <summary>
            Check if the current quadrant intersects the specified address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.Patterns.Quadrant.CreateChildren">
            <summary>
            Create a collection of child quadrants dividing the current one.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Patterns.Quadrant`1">
            <summary>
            A generic version of <see cref="T:ClosedXML.Excel.Patterns.Quadrant"/>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.FieldIndex">
            <summary>
            A type for field index, so there is a better idea what is a semantic content of some
            variable/props. Not detrimental to performance, JIT will inline struct to int.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.FieldIndex.DataField">
            <summary>
            The index of a 'data' field (<see cref="F:ClosedXML.Excel.XLConstants.PivotTable.ValuesSentinalLabel"/>).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.FieldIndex.Value">
            <summary>
            Index of a field in <see cref="P:ClosedXML.Excel.XLPivotTable.PivotFields"/>. Can be -2 for 'data' field,
            otherwise non-negative.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.FieldIndex.IsDataField">
            <summary>
            Is this index for a 'data' field?
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotField">
            <summary>
            A fluent API representation of a field on an <see cref="P:ClosedXML.Excel.IXLPivotTable.RowLabels">row</see>,
            <see cref="P:ClosedXML.Excel.IXLPivotTable.ColumnLabels">column</see> or <see cref="P:ClosedXML.Excel.IXLPivotTable.ReportFilters">
            filter</see> axis of a <see cref="T:ClosedXML.Excel.IXLPivotTable"/>.
            </summary>
            <remarks>
            If the field is a 'data' field, a lot of properties don't make sense and can't be set. In
            such case, the setter will throw <exception cref="T:System.InvalidOperationException"/> and getter
            will return default value for the field.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotField.SourceName">
            <summary>
            <para>
            Name of the field in a pivot table <see cref="P:ClosedXML.Excel.IXLPivotTable.PivotCache"/>. If the field
            is 'data' field, return <see cref="F:ClosedXML.Excel.XLConstants.PivotTable.ValuesSentinalLabel"/>.
            </para>
            <para>
            Note that field name in pivot cache is generally same as in the source data range, but
            not always. Field names are unique in the cache and if the source data range contains
            duplicate column names, the cache will rename them to keep all names unique.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotField.CustomName">
            <summary>
            <see cref="P:ClosedXML.Excel.IXLPivotField.CustomName"/> of the field in the pivot table. Custom name is a unique
            across all fields used in the pivot table (e.g. if same field is added to values area
            multiple times, it must have custom name, e.g. <c>Sum1 of Field</c>,
            <c>Sum2 of Field</c>).
            </summary>
            <exception cref="T:System.ArgumentException">When setting name to a name that is already used by
                another field.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotField.Subtotals">
            <summary>
            Get subtotals of the field. The content of the collection depends on the type of subtotal:
            <list type="bullet">
              <item>None - the collection is empty.</item>
              <item>Automatic - the collection contains one element with function <see cref="F:ClosedXML.Excel.XLSubtotalFunction.Automatic"/>.</item>
              <item>Custom - the collection contains a set of functions (at least one) except the <see cref="F:ClosedXML.Excel.XLSubtotalFunction.Automatic"/>.</item>
            </list>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotField.Collapsed">
            <summary>
            Are all items of the field collapsed?
            </summary>
            <remarks>
            If only a subset of items is collapsed, getter returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotField.SetCustomName(System.String)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotField.CustomName"/>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotField.SelectedValues">
            <summary>
            Selected values for <see cref="P:ClosedXML.Excel.IXLPivotTable.ReportFilters"/> filter of the pivot
            table. Empty for non-filter fields.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotField.AddSelectedValue(ClosedXML.Excel.XLCellValue)">
            <summary>
            Add a value to selected values of a filter field (<see cref="P:ClosedXML.Excel.IXLPivotTable.ReportFilters"/>).
            Doesn't do anything, if this field is not a filter fields.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotField.AddSelectedValues(System.Collections.Generic.IEnumerable{ClosedXML.Excel.XLCellValue})">
            <summary>
            Add a values to a selected values of a filter field. Doesn't do anything if this field
            is not a filter fields.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotField.Offset">
            <summary>
            Index of a field in <see cref="P:ClosedXML.Excel.XLPivotTable.PivotFields">all pivot fields</see> or -2
            for data field.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotFields">
            <summary>
            <para>
            A collection of fields on <see cref="P:ClosedXML.Excel.IXLPivotTable.ColumnLabels">column labels</see>,
            <see cref="P:ClosedXML.Excel.IXLPivotTable.RowLabels">row labels</see> or
            <see cref="P:ClosedXML.Excel.IXLPivotTable.ReportFilters">report filters</see> of a
            <see cref="T:ClosedXML.Excel.IXLPivotTable"/>.
            </para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.Add(System.String,System.String)">
            <summary>
            Add a field to the axis labels/report filters.
            </summary>
            <param name="sourceName">Name of the field in <see cref="T:ClosedXML.Excel.IXLPivotCache"/>. The value can
                also be <see cref="F:ClosedXML.Excel.XLConstants.PivotTable.ValuesSentinalLabel"/> for
                <c>&#931;Values</c> field.</param>
            <param name="customName">Display name of added field. Custom name of a filed must be unique
                in pivot table. Ignored for 'data' field.</param>
            <returns>The added field.</returns>
            <exception cref="T:System.ArgumentException">Field can't be added (e.g. it is already used or can't
                be added to specific collection).</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.Clear">
            <summary>
            Remove all fields from the axis. It also removes data of removed fields, like custom names and items.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.Contains(System.String)">
            <summary>
            Does this axis contain a field?
            </summary>
            <param name="sourceName">Name of the field in <see cref="T:ClosedXML.Excel.IXLPivotCache"/>. Use
                <see cref="F:ClosedXML.Excel.XLConstants.PivotTable.ValuesSentinalLabel"/> for data field.</param>
            <returns><c>true</c> if the axis contains the field, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.Contains(ClosedXML.Excel.IXLPivotField)">
            <summary>
            Does this axis contain a field?
            </summary>
            <param name="pivotField">Checked pivot field.</param>
            <returns><c>true</c> if the axis contains the field, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.Get(System.String)">
            <summary>
            Get a field in the axis.
            </summary>
            <param name="sourceName">Name of the field in <see cref="T:ClosedXML.Excel.IXLPivotCache"/> we are looking
                for in the axis.</param>
            <returns>Found field.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Axis doesn't contain field with specified name.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.Get(System.Int32)">
            <summary>
            Get field by index in the collection.
            </summary>
            <param name="index">Index of the field in this collection.</param>
            <returns>Found field.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.IndexOf(System.String)">
            <summary>
            Get index of a field in the collection. Use the index in the <see cref="M:ClosedXML.Excel.IXLPivotFields.Get(System.Int32)"/> method.
            </summary>
            <param name="sourceName"><see cref="P:ClosedXML.Excel.IXLPivotField.SourceName"/> of the field in the pivot cache.</param>
            <returns>Index of the field or -1 if not found.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.IndexOf(ClosedXML.Excel.IXLPivotField)">
            <summary>
            Get index of a field in the collection. Use the index in the <see cref="M:ClosedXML.Excel.IXLPivotFields.Get(System.Int32)"/> method.
            </summary>
            <param name="pf">Field to find. Uses <see cref="P:ClosedXML.Excel.IXLPivotField.CustomName"/>.</param>
            <returns>Index of the field or -1 if not a member of this collection.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotFields.Remove(System.String)">
            <summary>
            Remove a field from axis. Doesn't throw, if field is not present.
            </summary>
            <param name="sourceName"><see cref="P:ClosedXML.Excel.IXLPivotField.SourceName"/> of a field to remove.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotAxis">
            <summary>
            Describes an axis of a pivot table. Used to determine which areas should be styled through
            <see cref="P:ClosedXML.Excel.XLPivotFormat.PivotArea"/>.
            </summary>
            <remarks>
            [ISO-29500] 18.18.1 ST_Axis(PivotTable Axis).
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotDataField">
            <summary>
            A field that describes calculation of value to display in the <see cref="F:ClosedXML.Excel.XLPivotAreaType.Data"/>
            area of pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotDataField.DataFieldName">
            <summary>
            Custom name of the data field (e.g. <em>Sum of Sold</em>). Can be left empty to keep same
            as source name. Use <see cref="P:ClosedXML.Excel.XLPivotDataField.CustomName"/> to get value with fallback.
            </summary>
            <remarks>
            For data fields, the name is duplicated at <see cref="P:ClosedXML.Excel.XLPivotTableField.Name"/> and here.
            This property has a preference.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotDataField.Field">
            <summary>
            Field index to <see cref="P:ClosedXML.Excel.XLPivotTable.PivotFields"/>.
            </summary>
            <remarks>
            Unlike axis, this field index can't be <c>-2</c> for data fields. That field can't be in
            the data area.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotDataField.Subtotal">
            <summary>
            An aggregation function that calculates the value to display in the data cells of pivot area.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotDataField.ShowDataAsFormat">
            <summary>
            A calculation takes value calculated by <see cref="P:ClosedXML.Excel.XLPivotDataField.Subtotal"/> aggregation and transforms
            it into the final value to display to the user. The calculation might need
            <see cref="P:ClosedXML.Excel.XLPivotDataField.BaseField"/> and/or <see cref="P:ClosedXML.Excel.XLPivotDataField.BaseItem"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotDataField.BaseField">
            <summary>
            Index to the base field (<see cref="P:ClosedXML.Excel.XLPivotTable.PivotFields"/>) when
            <see cref="P:ClosedXML.Excel.XLPivotDataField.ShowDataAsFormat"/> needs a field for its calculation.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotDataField.BaseItem">
            <summary>
            Index to the base item of <see cref="P:ClosedXML.Excel.XLPivotDataField.BaseField"/> when <see cref="P:ClosedXML.Excel.XLPivotDataField.ShowDataAsFormat"/> needs
            an item for its calculation.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotDataField.NumberFormatValue">
            <summary>
            Formatting to apply to the data field. If <see cref="T:ClosedXML.Excel.XLPivotFormat"/> disagree, this has precedence.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotDataFields">
            <summary>
            A collection of <see cref="T:ClosedXML.Excel.XLPivotDataField"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotDataFields._fields">
            <summary>
            Fields displayed in the data area of the pivot table, in the order fields are displayed.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotFieldAxisItem">
            <summary>
            A representation of a single row/column axis values in a <see cref="T:ClosedXML.Excel.XLPivotTableAxis"/>.
            </summary>
            <remarks>
            Represents 18.10.1.44 i (Row Items) and 18.10.1.96 x (Member Property Index).
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldAxisItem.FieldItem">
            <summary>
            Each item is an index to field items of corresponding field from
            <see cref="P:ClosedXML.Excel.XLPivotTableAxis.Fields"/>. Value <c>1048832</c> specifies that no item appears
            at the position. 
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldAxisItem.ItemType">
            <summary>
            Type of item.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldAxisItem.DataItem">
            <summary>
            If this item (row/column) contains 'data' field, this contains an index into the <see cref="P:ClosedXML.Excel.XLPivotTable.DataFields"/>
            that should be used as a value. The value for 'data' field in the <see cref="P:ClosedXML.Excel.XLPivotFieldAxisItem.FieldItem"/> is ignored, but Excel fills
            same number as this index.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotFieldItem">
            <summary>
            Representation of item (basically one value of a field). Each value used somewhere in pivot
            table (e.g. data area, row/column labels and so on) must have an entry here. By itself, it
            doesn't contain values, it only references shared items of the field in the
            <see cref="T:ClosedXML.Excel.XLPivotCache"/>.
            </summary>
            <remarks>
            [OI29500] 18.10.1.45 item (PivotTable Field Item). 
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.ItemUserCaption">
            <summary>
            If present, must be unique within the containing field items.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.Hidden">
            <summary>
            <para>
            Flag indicating the item is hidden. Used for <see cref="T:ClosedXML.Excel.XLPivotPageField"/>. When
            item field is a page field, the hidden flag mean unselected values in the page filter.
            Non-hidden values are selected in the filter.
            </para>
            <para>
            Allowed for non-OLAP pivot tables only.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.ValueIsString">
            <summary>
            Flag indicating that the item has a character value.
            </summary>
            <remarks>Allowed for OLAP pivot tables only.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.ShowDetails">
            <summary>
            Excel uses the <c>sd</c> attribute to indicate whether the item is expanded.
            </summary>
            <remarks>Allowed for non-OLAP pivot tables only. Spec for the <c>sd</c> had to be patched..</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.CalculatedMember">
            <remarks>Allowed for non-OLAP pivot tables only.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.Missing">
            <summary>
            Item itself is missing from the source data
            </summary>
            <remarks>Allowed for non-OLAP pivot tables only.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.ApproximatelyHasChildren">
            <remarks>Allowed for OLAP pivot tables only.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.ItemIndex">
            <summary>
            Index to an item in the sharedItems of the field. The index must be unique in containing field items. When <see cref="P:ClosedXML.Excel.XLPivotFieldItem.ItemType"/> is <see cref="F:ClosedXML.Excel.XLPivotItemType.Data"/>, it must be set.
            Never negative.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.DrillAcrossAttributes">
            <remarks>Allowed for OLAP pivot tables only.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFieldItem.Details">
            <summary>
            Attributes <c>sd</c> (show detail) and <c>d</c> (detail) were swapped in spec, fixed by OI29500.
            A flag that indicates whether details are hidden for this item?
            </summary>
            <remarks><c>d</c> attribute. Allowed for OLAP pivot tables only.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotFieldItem.GetValue">
            <summary>
            Get value of an item from cache or null if not data item.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotTableAxis">
            <summary>
            A description of one axis (<see cref="P:ClosedXML.Excel.XLPivotTable.RowAxis"/>/<see cref="P:ClosedXML.Excel.XLPivotTable.ColumnAxis"/>)
            of a <see cref="T:ClosedXML.Excel.XLPivotTable"/>. It consists of fields in a specific order and values that make up
            individual rows/columns of the axis.
            </summary>
            <remarks>
            [ISO-29500] 18.10.1.17 colItems (Column Items), 18.10.1.84 rowItems (Row Items).
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotTableAxis._fields">
            <summary>
            Fields displayed on the axis, in the order of the fields on the axis.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotTableAxis._axisItems">
            <summary>
            Values of one row/column in an axis. Items are not kept in sync with <see cref="F:ClosedXML.Excel.XLPivotTableAxis._fields"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableAxis.Fields">
            <summary>
            A list of fields to displayed on the axis. It determines which fields and in what order
            should the fields be displayed.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableAxis.Items">
            <summary>
            Individual row/column parts of the axis.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTableAxis.AddField(ClosedXML.Excel.FieldIndex)">
            <summary>
            Add field to the axis, as an index.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTableAxis.AddItem(ClosedXML.Excel.XLPivotFieldAxisItem)">
            <summary>
            Add a row/column axis values (i.e. values visible on the axis).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotTableAxisField">
            <summary>
            A fluent API for one field in <see cref="T:ClosedXML.Excel.XLPivotTableAxis"/>, either
            <see cref="P:ClosedXML.Excel.XLPivotTable.RowLabels"/> or <see cref="P:ClosedXML.Excel.XLPivotTable.ColumnLabels"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableAxisField.Position">
            <summary>
            Get position of the field on the axis, starting at 0.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotTableFilters">
            <summary>
            Page/filter fields of a <see cref="T:ClosedXML.Excel.XLPivotTable"/>. It determines filter values and layout.
            It is accessible through fluent API <see cref="P:ClosedXML.Excel.XLPivotTable.ReportFilters"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotTableFilters._fields">
            <summary>
            Filter fields in correct order. The layout is determined by
            <see cref="P:ClosedXML.Excel.XLPivotTable.FilterFieldsPageWrap"/> and
            <see cref="P:ClosedXML.Excel.XLPivotTable.FilterAreaOrder"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTableFilters.GetSize">
            <summary>
            Number of rows/cols occupied by the filter area. Filter area is above the pivot table and it
            optional (i.e. size <c>0</c> indicates no filter).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTableFilters.GetSizeWithGap">
            <summary>
            Number of rows/cols occupied by the filter area, including the gap below, if there is at least one filter.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotTablePageField">
            <summary>
            Fluent API for filter fields of a <see cref="T:ClosedXML.Excel.XLPivotTable"/>. This class shouldn't contain any
            state, only logic to change state per API.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotCache">
            <summary>
            A cache of pivot data - essentially a collection of fields and their values that can be
            displayed by a <see cref="T:ClosedXML.Excel.IXLPivotTable"/>. Data for the cache are retrieved from
            an area (a table or a range). The pivot cache data are <strong>cached</strong>, i.e.
            the data in the source are not immediately updated once the data in a worksheet change.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.FieldNames">
            <summary>
            Get names of all fields in the source, in left to right order. Every field name is unique.
            </summary>
            <remarks>
            The field names are case insensitive. The field names of the cached
            source might differ from actual names of the columns
            in the data cells.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.ItemsToRetainPerField">
            <summary>
            Gets the number of unused items in shared items to allow before discarding unused items.
            </summary>
            <remarks>
            Shared items are distinct values of a source field values. Updating them can be expensive
            and this controls, when should the cache be updated. Application-dependent attribute.
            </remarks>
            <value>Default value is <see cref="F:ClosedXML.Excel.XLItemsToRetain.Automatic"/>.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.RefreshDataOnOpen">
            <summary>
            Will Excel refresh the cache when it opens the workbook.
            </summary>
            <value>Default value is <c>false</c>.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotCache.SaveSourceData">
            <summary>
            Should the cached values of the pivot source be saved into the workbook file?
            If source data are not saved, they will have to be refreshed from the source
            reference which might cause a change in the table values.
            </summary>
            <value>Default value is <c>true</c>.</value>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.Refresh">
            <summary>
            Refresh data in the pivot source from the source reference data.
            </summary>
            <exception cref="T:ClosedXML.Excel.Exceptions.InvalidReferenceException">The data source for the pivot table can't be found.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetItemsToRetainPerField(ClosedXML.Excel.XLItemsToRetain)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.ItemsToRetainPerField"/>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetRefreshDataOnOpen">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.RefreshDataOnOpen"/>
            <remarks>Sets the value to <c>true</c>.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetRefreshDataOnOpen(System.Boolean)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.RefreshDataOnOpen"/>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetSaveSourceData">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.SaveSourceData"/>
            <remarks>Sets the value to <c>true</c>.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCache.SetSaveSourceData(System.Boolean)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLPivotCache.SaveSourceData"/>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotCaches">
            <summary>
            A collection of <see cref="T:ClosedXML.Excel.IXLPivotCache">pivot caches</see>. Pivot cache
            can be added from a <see cref="T:ClosedXML.Excel.IXLRange"/> or a <see cref="T:ClosedXML.Excel.IXLTable"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotCaches.Add(ClosedXML.Excel.IXLRange)">
            <summary>
            Add a new pivot cache for the range. If the range area is same as
            an area of a table, the created cache will reference the table
            as source of data instead of a range of cells.
            </summary>
            <param name="range">Range for which to create the pivot cache.</param>
            <returns>The pivot cache for the range.</returns>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.ColumnLabels">
            <summary>
            Labels displayed in columns (i.e. horizontal axis) of the pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.RowLabels">
            <summary>
            Labels displayed in rows (i.e. vertical axis) of the pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.TargetCell">
            <summary>
            Top left corner cell of a pivot table. If the pivot table contains filters fields, the target cell is top
            left cell of the first filter field.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.PivotCache">
            <summary>
            The cache of data for the pivot table. The pivot table is created
            from cached data, not up-to-date data in a worksheet.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.FilterAreaOrder">
            <summary>
            Filter fields layout setting that indicates layout order of filter fields. The layout
            uses <see cref="P:ClosedXML.Excel.IXLPivotTable.FilterFieldsPageWrap"/> to determine when to break to a new row or
            column. Default value is <see cref="F:ClosedXML.Excel.XLFilterAreaOrder.DownThenOver"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.FilterFieldsPageWrap">
            <summary>
            Specifies the number of page fields to display before starting another row or column.
            Value = 0 means unlimited.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If value &lt; 0.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotTable.SetShowGrandTotalsColumns">
            <summary>
            Should pivot table display a grand total for each row in the last column of a pivot
            table (it will enlarge pivot table for extra column).
            </summary>
            <remarks>
            This API has inverse row/column names than the Excel. Excel: <em>On for rows
            </em> should use this method <em>ShowGrandTotalsColumns</em>.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTable.Layout">
            <summary>
            Set the layout of the pivot table. It also changes layout of all pivot fields.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotTables.Add(System.String,ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLPivotCache)">
            <summary>
            Add a pivot table that will use the pivot cache.
            </summary>
            <param name="name">Name of new pivot table.</param>
            <param name="targetCell">A cell where will the pivot table be have it's left top corner.</param>
            <param name="pivotCache">Pivot cache to use for the pivot table.</param>
            <returns>Added pivot table.</returns>
            <exception cref="T:System.ArgumentException">There already is a pivot table with the same name.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotTables.Add(System.String,ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLRange)">
            <summary>
            Add a pivot table from source data of <paramref name="range"/>.
            If workbook already contains a cache for same range as the
            <paramref name="range"/>, the matching pivot cache is used.
            </summary>
            <param name="name">Name of new pivot table</param>
            <param name="targetCell">A cell where will the pivot table be have it's left top corner.</param>
            <param name="range">A range to add/find pivot cache.</param>
            <exception cref="T:System.ArgumentException">There already is a pivot table with the same name.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotTables.Add(System.String,ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLTable)">
            <summary>
            Add a pivot table from source data of <paramref name="table"/>.
            If workbook already contains a cache for same range as the
            <paramref name="table"/>, the matching pivot cache is used.
            </summary>
            <param name="name">Name of new pivot table</param>
            <param name="targetCell">A cell where will the pivot table be have it's left top corner.</param>
            <param name="table">A table to add/find pivot cache.</param>
            <exception cref="T:System.ArgumentException">There already is a pivot table with the same name.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotTables.PivotTable(System.String)">
            <summary>
            Get pivot table with the specified name (case insensitive).
            </summary>
            <param name="name">Name of a pivot table to return.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No such pivot table found.</exception>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotFieldStyleFormats">
            <summary>
            Interface to change the style of a <see cref="T:ClosedXML.Excel.IXLPivotField"/> or its parts.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotFieldStyleFormats.DataValuesFormat">
            <summary>
            Pivot table style of the field values displayed in the data area of the pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotFieldStyleFormats.Header">
            <summary>
            Get the style of the pivot field header. The head usually contains a name of the field.
            In some layouts, header is not individually displayed (e.g. compact), while in others
            it is (e.g. tabular).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotFieldStyleFormats.Label">
            <summary>
            Get the style of the pivot field label values on horizontal or vertical axis.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotStyleFormat">
            <summary>
            A interface for styling various parts of a pivot table, e.g. the whole table, specific
            area or just a field. Use <see cref="P:ClosedXML.Excel.IXLPivotTable.StyleFormats"/> and <see cref="P:ClosedXML.Excel.IXLPivotField.StyleFormats"/>
            to access it.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotStyleFormat.AppliesTo">
            <summary>
            To what part of the pivot table part will the style apply to.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotStyleFormat.Style">
            <summary>
            The differential style of the part.
            </summary>
            <remarks>
            The final displayed style is done by composing all differential styles that overlap the element.
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotStyleFormats">
            <summary>
            An API for setting style of parts consisting of <see cref="T:ClosedXML.Excel.XLPivotStyleFormatElement"/>, e.g. grand
            totals. The enumerator enumerates only existing formats, it doesn't add them.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotStyleFormats.ForElement(ClosedXML.Excel.XLPivotStyleFormatElement)">
            <summary>
            Get styling object for specified <paramref name="element"/>.
            </summary>
            <param name="element">Which part do we want style for?</param>
            <returns>An API to inspect/modify style of the <paramref name="element"/>.</returns>
            <exception cref="T:System.ArgumentException">When <see cref="F:ClosedXML.Excel.XLPivotStyleFormatElement.None"/> is
                passed as an argument.</exception>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotTableStyleFormats">
            <summary>
            An API for modifying the pivot table styles that affect whole <see cref="T:ClosedXML.Excel.IXLPivotTable"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTableStyleFormats.ColumnGrandTotalFormats">
            <summary>
            Get style formats of a grand total column in a pivot table (i.e. the right column a pivot table).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotTableStyleFormats.RowGrandTotalFormats">
            <summary>
            Get style formats of a grand total row in a pivot table (i.e. the bottom row of a pivot table).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotValueStyleFormat">
            <summary>
            A fluent API for styling a <see cref="T:ClosedXML.Excel.IXLPivotValue"/> field of a <see cref="T:ClosedXML.Excel.IXLPivotTable"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValueStyleFormat.AndWith(ClosedXML.Excel.IXLPivotField)">
            <summary>
            Adds a limitation so the <see cref="P:ClosedXML.Excel.IXLPivotStyleFormat.Style"/> is only applied to cells in a pivot table
            that also belong to the <paramref name="field"/> (label or data).
            </summary>
            <param name="field">Only cells in a pivot table under this field will be styled.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValueStyleFormat.AndWith(ClosedXML.Excel.IXLPivotField,System.Predicate{ClosedXML.Excel.XLCellValue})">
            <summary>
            Adds a limitation so the <see cref="P:ClosedXML.Excel.IXLPivotStyleFormat.Style"/> is only applied to cells in a pivot table
            that also belong to the <paramref name="field"/> data cells. The cell values also must satisfy the <paramref name="predicate"/>.
            </summary>
            <remarks>
            The pivot style is bound by the field index in a pivot table, not field value. E.g. if field values
            are Jan, Feb and the predicate marks Feb (offset 1) = second field (Feb) will be highlighted.
            If user later reverses order in Excel to Feb, Jan, the style would still apply to the second value - Jan.
            </remarks>
            <param name="field">Only cells in a pivot table under this field will be styled.</param>
            <param name="predicate">A predicate to determine which index of the field should be styled.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValueStyleFormat.ForValueField(ClosedXML.Excel.IXLPivotValue)">
            <summary>
            Adds a limitation so the <see cref="P:ClosedXML.Excel.IXLPivotStyleFormat.Style"/> is only applied to cells in a pivot table
            that display values for <paramref name="valueField"/> cells (i.e. data cells and grand total).
            </summary>
            <param name="valueField">One of <see cref="P:ClosedXML.Excel.IXLPivotTable.Values">value fields</see> of the pivot table.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotStyleFormatBase">
            <summary>
            A base class for pivot styling API. It has takes a selected <see cref="T:ClosedXML.Excel.XLPivotArea"/>
            and applies the style using <c>.Style*</c> API. The derived classes are responsible for
            exposing API so user can define an area and then create the desired area (from what user
            specified) through <see cref="M:ClosedXML.Excel.XLPivotStyleFormatBase.GetCurrentArea"/> method.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotStyleFormats">
            <summary>
            An API for grand totals from <see cref="T:ClosedXML.Excel.XLPivotTableStyleFormats"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotValueStyleFormat._fieldReferences">
            <summary>
            A list of references that specify which data cells will be styled.
            A data cell will be styled, if it lies on all referenced fields.
            The term "lie on" means that either column or a row of data cell
            intersects a label cell of referenced field.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCalculation">
            <summary>
            Enum describing how is a pivot field values (i.e. in data area) displayed.
            </summary>
            <remarks>
            [ISO-29500] 18.18.70 ST_ShowDataAs
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCalculation.Normal">
            <summary>
            Field values are displayed normally.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCalculation.Index">
            <summary>
            Basically a relative importance of a value. Closer the value to 1.0 is, the less
            important it is. Calculated as <c>(value-in-cell * grand-total-of-grand-totals) /
            (grand-total-row * grand-total-column)</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCalculationItem">
            <summary>
            Some calculation from <see cref="T:ClosedXML.Excel.XLPivotCalculation"/> need a value as another an argument
            of a calculation (e.g. difference from). This enum specifies how to find the reference value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotSummary">
            <summary>
            An enum that specifies how are grouped pivot field values summed up in a single cell of a
            pivot table.
            </summary>
            <remarks>
            [ISO-29500] 18.18.17 ST_DataConsolidateFunction
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotSummary.Sum">
            <summary>
            Values are summed up.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotValue">
            <summary>
            A pivot value field, it is basically a specification of how to determine and
            format values from source to display in the pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotValue.BaseFieldName">
            <summary>
            Specifies the index to the base field when the ShowDataAs calculation is in use.
            Instead of base item, previous or next value can be used through <see cref="P:ClosedXML.Excel.IXLPivotValue.CalculationItem" />
            </summary>
            <remarks>Used only if the value should be showed <b>Show Values As</b> in the value field settings.</remarks>
            <value>
            The name of the column of the relevant base field.
            </value>
            <example>
            Show values as a percent of a specific value of a different field, e.g. as a % of units sold from Q1 (quarts is a base field and Q1 is a base item).
            </example>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotValue.BaseItemValue">
            <summary>
            The value of a base item to calculate a value to show in the pivot table. The base item is selected from values of a base field.
            Returns <c>blank</c>, when value can't be determined.
            </summary>
            <remarks>Used only if the value should be showed <b>Show Values As</b> in the value field settings.</remarks>
            <value>
            The value of the referenced base field item.
            </value>
            <example>
            Show values as a percent of a specific value of a different field, e.g. as a % of units sold from Q1 (quarts is a base field and Q1 is a base item).
            </example>
        </member>
        <member name="P:ClosedXML.Excel.IXLPivotValue.CustomName">
            <summary>
            Get custom name of pivot value. If custom name is not specified, return source name as
            a fallback.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotValueCombination">
            <summary>
            An interface for fluent configuration of how to show <see cref="T:ClosedXML.Excel.IXLPivotValue"/>,
            when the value should be displayed not as a value itself, but in relation to another
            value (e.g. percentage difference in relation to different value).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValueCombination.AndPrevious">
            <summary>
            The base item value for calculation will be the value of the previous row of base
            field, depending on the order of base field values in a row/column. If there isn't
            a previous value, the same value will be used.
            <para>
            This only affects display how are values displayed, not the values themselves.
            </para>
            <para>
            Example:
            We have a table of sales and a pivot table, where sales are summed per month.
            The months are sorted from Jan to Dec. To display a percentage increase of
            sales per month (the base value is previous month):
            <c>
            IXLPivotValue sales;
            sales.SetSummaryFormula(XLPivotSummary.Sum).ShowAsPercentageDifferenceFrom("Month").AndPrevious();
            </c>
            </para>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLPivotValueFormat">
            <summary>
            An API for manipulating a <see cref="P:ClosedXML.Excel.IXLPivotValue.NumberFormat">format</see> of one
            <see cref="T:ClosedXML.Excel.IXLPivotTable"/> <see cref="T:ClosedXML.Excel.IXLPivotValue">data field</see>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValueFormat.SetNumberFormatId(System.Int32)">
            <summary>
            Set number formatting using one of predefined codes. Predefined codes are described in
            the <see cref="T:ClosedXML.Excel.XLPredefinedFormat"/>.
            </summary>
            <param name="value">A numeric value describing how should the number be formatted.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValues.Add(System.String)">
            <summary>
            Add a new value field to the pivot table. If addition would cause, the
            <see cref="F:ClosedXML.Excel.XLConstants.PivotTable.ValuesSentinalLabel"/> field is added to the
            <see cref="P:ClosedXML.Excel.IXLPivotTable.ColumnLabels"/>. The added field will use passed
            <paramref name="sourceName"/> as the <see cref="P:ClosedXML.Excel.IXLPivotField.CustomName"/>.
            </summary>
            <param name="sourceName">The <see cref="P:ClosedXML.Excel.IXLPivotField.SourceName"/> that is used as a
                data. Multiple data fields can use same source (e.g. sum and count).</param>
            <returns>Newly added field.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLPivotValues.Add(System.String,System.String)">
            <summary>
            Add a new value field to the pivot table. If addition would cause, the
            <see cref="F:ClosedXML.Excel.XLConstants.PivotTable.ValuesSentinalLabel"/> field is added to the
            <see cref="P:ClosedXML.Excel.IXLPivotTable.ColumnLabels"/>.
            </summary>
            <param name="sourceName">The <see cref="P:ClosedXML.Excel.IXLPivotField.SourceName"/> that is used as a
                data. Multiple data fields can use same source (e.g. sum and count).</param>
            <param name="customName">The added data field <see cref="P:ClosedXML.Excel.IXLPivotField.CustomName"/>.</param>
            <returns>Newly added field.</returns>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotArea">
            <summary>
            A rule describing a subset of pivot table. Used mostly for styling through <see cref="T:ClosedXML.Excel.XLPivotFormat"/>.
            </summary>
            <remarks>
            [ISO-29500] 18.3.1.68 PivotArea
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.References">
            <summary>
            A subset of field values that are part of the pivot area.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.Field">
            <summary>
            Index of the field that this selection rule refers to.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.Type">
            <summary>
            An area of aspect of pivot table that is part of the pivot area.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.DataOnly">
            <summary>
            Flag indicating whether only the data values (in the data area of the view) for an item
            selection are selected and does not include the item labels. Can't be set with together
            with <see cref="P:ClosedXML.Excel.XLPivotArea.LabelOnly"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.LabelOnly">
            <summary>
            Flag indicating whether only the item labels for an item selection are selected and does
            not include the data values(in the data area of the view). Can't be set with together
            with <see cref="P:ClosedXML.Excel.XLPivotArea.DataOnly"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.GrandRow">
            <summary>
            Flag indicating whether the row grand total is included.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.GrandCol">
            <summary>
            Flag indicating whether the column grand total is included.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.CacheIndex">
            <summary>
            Flag indicating whether indexes refer to fields or items in the pivot cache and not the
            view.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.Outline">
            <summary>
            Flag indicating whether the rule refers to an area that is in outline mode.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.Offset">
            <summary>
            A reference that specifies a subset of the selection area. Points are relative to the top
            left of the selection area.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.CollapsedLevelsAreSubtotals">
            <summary>
            Flag indicating if collapsed levels/dimensions are considered subtotals.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.Axis">
            <summary>
            The region of the pivot table to which this rule applies.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotArea.FieldPosition">
            <summary>
            Position of the field within the axis to which this rule applies.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotAreaType">
            <summary>
            An area of aspect of pivot table that is part of the <see cref="P:ClosedXML.Excel.XLPivotArea.Type"/>.
            </summary>
            <remarks>
            [ISO-29500] 18.18.58 ST_PivotAreaType
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCache._values">
            <summary>
            Length is a number of fields, in same order as <see cref="F:ClosedXML.Excel.XLPivotCache._fieldNames"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotCache.FieldCount">
            <summary>
            Number of fields in the cache.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotCache.CacheId">
            <summary>
            Pivot cache definition id from the file.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotCache.TryGetFieldIndex(System.String,System.Int32@)">
            <summary>
            Try to get a field index for a field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="index">The found index, start at 0.</param>
            <returns>True if source contains the field.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotCaches.Find(ClosedXML.Excel.XLBookArea)">
            <summary>
            Try to find an existing pivot cache for the passed area. The area
            is checked against both types of source references (tables and
            ranges) and if area matches, the cache is returned.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCacheSharedItems">
            <summary>
            <para>
            A list of <see cref="T:ClosedXML.Excel.XLPivotCacheValue"/> in the pivot table cache
            definition. Generally, it contains all strings of the field records
            (record just indexes them through <see cref="F:ClosedXML.Excel.XLPivotCacheValueType.Index"/>)
            and also values used directly in pivot table (e.g. filter field reference
            the table definition, not record).
            </para>
            <para>
            Shared items can't contain <see cref="F:ClosedXML.Excel.XLPivotCacheValueType.Index"/>.
            </para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheSharedItems._stringStorage">
            <summary>
            Storage of strings to save 8 bytes per <c>XLPivotCacheValue</c>
            (reference can't be aliased with a number).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheSharedItems._stringMap">
            <summary>
            Strings in a pivot table are case-insensitive.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotCacheSharedItems.IndexOf(ClosedXML.Excel.XLCellValue)">
            <summary>
            Get index of value or -1 if not among shared items.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCacheValue">
            <summary>
            Represents a single value in a pivot cache record.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValue._value">
            <summary>
            A memory used to hold value of a <see cref="P:ClosedXML.Excel.XLPivotCacheValue.Type"/>. Its
            interpretation depends on the type. It doesn't hold value
            for strings directly, because GC doesn't allow aliasing
            same 8 bytes for number or references. For strings, it contains
            an index to a string storage array that is stored separately.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCacheValues">
            <summary>
            All values of a cache field for a pivot table.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValues._containsInteger">
            <inheritdoc cref="P:ClosedXML.Excel.XLPivotCacheValuesStats.ContainsInteger"/>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValues._containsString">
            <inheritdoc cref="P:ClosedXML.Excel.XLPivotCacheValuesStats.ContainsString"/>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValues._longText">
            <inheritdoc cref="P:ClosedXML.Excel.XLPivotCacheValuesStats.LongText"/>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValues._containsDate">
            <inheritdoc cref="P:ClosedXML.Excel.XLPivotCacheValuesStats.ContainsDate"/>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotCacheValues.GetOrAddSharedItem(ClosedXML.Excel.XLCellValue)">
            <summary>
            Get or add a value to the shared items. Throw, if value is not in items.
            </summary>
            <returns>Index in shared items.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotCacheValues.ContainsRecord(ClosedXML.Excel.XLCellValue)">
            <summary>
            Is among the <c>value</c> among values of the record.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCacheValuesStats">
            <summary>
            Statistics about a <see cref="T:ClosedXML.Excel.XLPivotCacheValues">pivot cache field
            values</see>. These statistics are available, even if cache field
            doesn't have any record values.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotCacheValuesStats.ContainsInteger">
            <summary>
            Are all numbers in the field integers? Doesn't
            have to fit into int32/64, just no fractions.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotCacheValuesStats.ContainsString">
            <summary>
            Does field contain any string, boolean or error?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotCacheValuesStats.LongText">
            <summary>
            Is any text longer than 255 chars?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotCacheValuesStats.ContainsDate">
            <summary>
            Is any value <c>DateTime</c> or <c>TimeSpan</c>? TimeSpan is
            converted to <em>1899-12-31TXX:XX:XX</em> date.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCacheValueType">
            <summary>
            An enum that represents types of values in pivot cache records. It represents
            values under <c>CT_Record</c> type.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValueType.Missing">
            <summary>
            A blank value. Keep at 0 so newly allocated arrays of values have a value of missing.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValueType.Number">
            <summary>
            Double precision number, not <c>NaN</c> or <c>infinity</c>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValueType.Boolean">
            <summary>
            Bool value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValueType.Error">
            <summary>
            <see cref="T:ClosedXML.Excel.XLError"/> value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValueType.String">
            <summary>
            Cache value is a string. Because references can't be converted to number (GC would not accept it),
            the value is an index into a table of strings in the cache.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValueType.DateTime">
            <summary>
            Value is a date time. Although the value can be in theory <c>csd:dateTime</c> (i.e. with offsets and zulu),
            the time offsets are not permitted (Excel refused to load cache data) and zulu is ignored.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCacheValueType.Index">
            <summary>
            Value is a reference to the shared item. The index value is an
            index into the shared items array of the field.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCfRuleType">
            <summary>
            Specifies how to apply <see cref="F:ClosedXML.Excel.XLConditionalFormatType.Top10"/> conditional formatting rule
            on a pivot table <see cref="T:ClosedXML.Excel.XLPivotConditionalFormat"/>. Avoid if possible, doesn't seem to
            work and row/column causes Excel to repair file.
            </summary>
            <remarks>18.18.84 ST_Type.</remarks>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotCfScope">
            <summary>
            Defines a scope of conditional formatting applied to <see cref="T:ClosedXML.Excel.XLPivotTable"/>. The scope is
            more of a "user preference", it doesn't determine actual scope. The actual scope is determined
            by <see cref="P:ClosedXML.Excel.XLPivotConditionalFormat.Areas"/>. The scope determines what is in GUI and when
            reapplied, it updates the <see cref="P:ClosedXML.Excel.XLPivotConditionalFormat.Areas"/> according to selected
            values.
            </summary>
            <remarks>18.18.67 ST_Scope</remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCfScope.SelectedCells">
            <summary>
            Conditional formatting is applied to selected cells. When scope is applied, CF areas are be
            updated to contain currently selected cells in GUI.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCfScope.DataFields">
            <summary>
            Conditional formatting is applied to selected data fields. When scope is applied, CF areas
            are be updated to contain data fields of selected cells in GUI.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotCfScope.FieldIntersections">
            <summary>
            Conditional formatting is applied to selected pivot fields intersections. When scope is
            applied, CF areas are be updated to contain row/column intersection of currently selected
            cell in GUI.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotConditionalFormat">
            <summary>
            Specification of conditional formatting of a pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotConditionalFormat.Scope">
            <summary>
            An option to display in GUI on how to update <see cref="P:ClosedXML.Excel.XLPivotConditionalFormat.Areas"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotConditionalFormat.Type">
            <summary>
            A rule that determines how should CF be applied to <see cref="P:ClosedXML.Excel.XLPivotConditionalFormat.Areas"/>.
            </summary>
            <remarks>Doesn't seem to work, Excel has no dialogue, nothing found on web and Excel tries
                to repair on row/column values. Avoid if possible.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotConditionalFormat.Areas">
            <summary>
            Areas of pivot table the rule should be applied. The areas are projected to the sheet
            <see cref="P:ClosedXML.Excel.XLConditionalFormat.Ranges"/> that Excel actually uses to display CF.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotConditionalFormat.Format">
            <summary>
            Conditional format applied to the <see cref="P:ClosedXML.Excel.XLPivotConditionalFormat.Areas"/>.
            </summary>
            <remarks>
            The <see cref="P:ClosedXML.Excel.XLConditionalFormat.Priority"/> of the format is used as a identifier used
            to connect pivot CF element and sheet CF element. Pivot CF is ultimately part of sheet CFs
            and the priority determines order of CF application (note that CF has
            <see cref="P:ClosedXML.Excel.XLConditionalFormat.StopIfTrue"/> flag).
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotFormat">
            <summary>
            A description of formatting that should be applied to a <see cref="T:ClosedXML.Excel.XLPivotTable"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFormat.PivotArea">
            <summary>
            Pivot area that should be formatted.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFormat.Action">
            <summary>
            Should the formatting (determined by <see cref="P:ClosedXML.Excel.XLPivotFormat.DxfStyleValue"/>) be applied or not?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotFormat.DxfStyleValue">
            <summary>
            Differential formatting to apply to the <see cref="P:ClosedXML.Excel.XLPivotFormat.PivotArea"/>. It can be empty, e.g. if
            <see cref="P:ClosedXML.Excel.XLPivotFormat.Action"/> is blank. Empty dxf is represented by <see cref="P:ClosedXML.Excel.XLStyle.Default"/>,
            until we get better dxf representation.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotFormatAction">
            <summary>
            An enum describing if <see cref="T:ClosedXML.Excel.XLPivotFormat"/> applies formatting to the cells of pivot
            table or not.
            </summary>
            <remarks>
            <para>
            [ISO-29500] 18.18.34 ST_FormatAction
            </para>
            <para>
            [MS-OI29500] 2.1.761 Excel does not support the <c>Drill</c> and <c>Formula</c> values for the
            action attribute. Therefore, neither do we, although <c>Drill</c> and <c>Formula</c> values
            are present in the ISO <c>ST_FormatAction</c> enum.
            </para>
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotFormatAction.Blank">
            <summary>
            No format is applied to the pivot table. This is used when formatting is cleared from
            already formatted cells of pivot table.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotFormatAction.Formatting">
            <summary>
            Pivot table has formatting. This is the default value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotItemType">
            <summary>
            A categorization of <see cref="T:ClosedXML.Excel.XLPivotFieldItem"/> or <see cref="T:ClosedXML.Excel.XLPivotFieldAxisItem"/>.
            </summary>
            <remarks>
            18.18.43 ST_ItemType (PivotItem Type).
            </remarks>>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Avg">
            <summary>
            The pivot item represents an "average" aggregate function.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Blank">
            <summary>
            The pivot item represents a blank line.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Count">
            <summary>
            The pivot item represents custom the "count numbers" aggregate.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.CountA">
            <summary>
            The pivot item represents the "count" aggregate function (i.e. number, text and everything
            else, except blanks).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Data">
            <summary>
            The pivot item represents data.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Default">
            <summary>
            The pivot item represents the default type for this pivot table, i.e. the "total" aggregate function.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Grand">
            <summary>
            The pivot items represents the grand total line.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Max">
            <summary>
            The pivot item represents the "maximum" aggregate function.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Min">
            <summary>
            The pivot item represents the "minimum" aggregate function.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Product">
            <summary>
            The pivot item represents the "product" function.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.StdDev">
            <summary>
            The pivot item represents the "standard deviation" aggregate function.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.StdDevP">
            <summary>
            The pivot item represents the "standard deviation population" aggregate function.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Sum">
            <summary>
            The pivot item represents the "sum" aggregate value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.Var">
            <summary>
            The pivot item represents the "variance" aggregate value.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotItemType.VarP">
            <summary>
            The pivot item represents the "variance population" aggregate value.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotPageField">
            <summary>
            A field displayed in the filters part of a pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotPageField.Field">
            <summary>
            Field index to <see cref="P:ClosedXML.Excel.XLPivotTable.PivotFields"/>. Can't contain
            <see cref="F:ClosedXML.Excel.XLConstants.PivotTable.ValuesSentinalLabel">'data'</see>
            field <c>-2</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotPageField.ItemIndex">
            <summary>
            If a single item is selected, item index. Null, if nothing selected or multiple selected.
            Multiple selected values are indicated directly in <see cref="P:ClosedXML.Excel.XLPivotTableField.Items"/>
            through <see cref="P:ClosedXML.Excel.XLPivotFieldItem.Hidden"/> flags. Items that are not selected are hidden,
            rest isn't.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotReference">
            <summary>
            Represents a set of selected fields and selected items within those fields. It's used to select
            an area for <see cref="T:ClosedXML.Excel.XLPivotArea"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotReference.FieldItems">
            <summary>
            <para>
            If <see cref="P:ClosedXML.Excel.XLPivotArea.CacheIndex"/> is <c>false</c>, then it is index into pivot fields
            items of pivot field <see cref="P:ClosedXML.Excel.XLPivotReference.Field"/> (unless <see cref="P:ClosedXML.Excel.XLPivotReference.ByPosition"/> is <c>true</c>).
            </para>
            <para>
            If <see cref="P:ClosedXML.Excel.XLPivotArea.CacheIndex"/> is <c>true</c>, then it is index into shared items
            of a cached field with index <see cref="P:ClosedXML.Excel.XLPivotReference.Field"/> (unless <see cref="P:ClosedXML.Excel.XLPivotReference.ByPosition"/> is
            <c>true</c>).
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotReference.Field">
            <summary>
            Specifies the index of the field to which this filter refers. A value of -2/4294967294
            indicates the 'data' field. It can represent pivot field or cache field, depending on
            <see cref="P:ClosedXML.Excel.XLPivotArea.CacheIndex"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotReference.Selected">
            <summary>
            Flag indicating whether this field has selection. This attribute is used when the
            pivot table is in outline view. It is also used when both header and data
            cells have selection.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotReference.ByPosition">
            <summary>
            Flag indicating whether the item in <see cref="P:ClosedXML.Excel.XLPivotReference.FieldItems"/> is referred to by position rather
            than item index.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotReference.Relative">
            <summary>
            Flag indicating whether the item is referred to by a relative reference rather than an
            absolute reference. This attribute is used if posRef is set to true.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotSourceReference">
            <summary>
            A reference to the pivot source. The source might exist or not, that
            is evaluated during pivot cache record refresh.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotSourceReference.Area">
            <summary>
            Book area with the source data. Either this or <see cref="P:ClosedXML.Excel.XLPivotSourceReference.Name"/> is set.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotSourceReference.Name">
            <summary>
            Name of a table or a book-scoped named range that contain the source data.
            Either this or <see cref="P:ClosedXML.Excel.XLPivotSourceReference.Area"/> is set.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotSourceReference.TryGetSource(ClosedXML.Excel.XLWorkbook,ClosedXML.Excel.XLWorksheet@,System.Nullable{ClosedXML.Excel.XLSheetRange}@)">
            <summary>
            Try to determine actual area of the source reference in the
            workbook. Source reference might not be valid in the workbook.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotTable._fields">
            <summary>
            List of all fields in the pivot table, roughly represents <c>pivotTableDefinition.
            pivotFields</c>. Contains info about each field, mostly page/axis info (data field can
            reference same field multiple times, so it mostly stores data in data fields).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.Theme">
            <summary>
            Table theme this pivot table will use.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.PivotFields">
            <summary>
            All fields reflected in the pivot cache.
            Order of fields is same as for in the <see cref="P:ClosedXML.Excel.XLPivotTable.PivotCache"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowLastColumn">
            <summary>
            Part of the pivot table style.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.Area">
            <summary>
            Area of a pivot table. Area doesn't include page fields, they are above the area with
            one empty row between area and filters.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.FirstHeaderRow">
            <summary>
            First row of pivot table header, relative to the <see cref="P:ClosedXML.Excel.XLPivotTable.Area"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.FirstDataRow">
            <summary>
            First row of pivot table data area, relative to the <see cref="P:ClosedXML.Excel.XLPivotTable.Area"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.FirstDataCol">
            <summary>
            First column of pivot table data area, relative to the <see cref="P:ClosedXML.Excel.XLPivotTable.Area"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.DataOnRows">
            <summary>
            Determines the whether 'data' field is on <see cref="P:ClosedXML.Excel.XLPivotTable.RowAxis"/> (<c>true</c>) or
            <see cref="P:ClosedXML.Excel.XLPivotTable.ColumnAxis"/>(<c>false</c>).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.DataPosition">
            <summary>
            Determines the default 'data' field position, when it is automatically added to row/column fields.
            0 = first (e.g. before all column/row fields), 1 = second (i.e. after first row/column field) and so on.
            &gt; number of fields or <c>null</c> indicates the last position.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.AutoFormatId">
            <summary>
            <para>
            An identification of legacy table auto-format to apply to the pivot table. The
            <c>Apply*Formats</c> properties specifies which parts of auto-format to apply. If
            <c>null</c> or <see cref="P:ClosedXML.Excel.XLPivotTable.AutofitColumns"/> is not <c>true</c>, legacy auto-format is
            not applied.
            </para>
            <para>
            The value must be less than 21 or greater than 4096 and less than or equal to 4117. See
            ISO-29500 Annex G.3 for how auto formats look like.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ApplyNumberFormats">
            <summary>
            If auto-format should be applied (<see cref="P:ClosedXML.Excel.XLPivotTable.AutofitColumns"/> and <see cref="P:ClosedXML.Excel.XLPivotTable.AutoFormatId"/>
            are set), apply legacy auto-format number format properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ApplyBorderFormats">
            <summary>
            If auto-format should be applied (<see cref="P:ClosedXML.Excel.XLPivotTable.AutofitColumns"/> and <see cref="P:ClosedXML.Excel.XLPivotTable.AutoFormatId"/>
            are set), apply legacy auto-format border properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ApplyFontFormats">
            <summary>
            If auto-format should be applied (<see cref="P:ClosedXML.Excel.XLPivotTable.AutofitColumns"/> and <see cref="P:ClosedXML.Excel.XLPivotTable.AutoFormatId"/>
            are set), apply legacy auto-format font properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ApplyPatternFormats">
            <summary>
            If auto-format should be applied (<see cref="P:ClosedXML.Excel.XLPivotTable.AutofitColumns"/> and <see cref="P:ClosedXML.Excel.XLPivotTable.AutoFormatId"/>
            are set), apply legacy auto-format pattern properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ApplyAlignmentFormats">
            <summary>
            If auto-format should be applied (<see cref="P:ClosedXML.Excel.XLPivotTable.AutofitColumns"/> and <see cref="P:ClosedXML.Excel.XLPivotTable.AutoFormatId"/>
            are set), apply legacy auto-format alignment properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ApplyWidthHeightFormats">
            <summary>
            If auto-format should be applied (<see cref="P:ClosedXML.Excel.XLPivotTable.AutofitColumns"/> and <see cref="P:ClosedXML.Excel.XLPivotTable.AutoFormatId"/>
            are set), apply legacy auto-format width/height properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.DataCaption">
            <summary>
            Initial text of 'data' field. This is doesn't do anything, Excel always displays
            dynamically a text 'Values', translated to current culture.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ErrorValueReplacement">
            <summary>
            Text to display when in cells that contain error.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowError">
            <summary>
            Flag indicating if <see cref="P:ClosedXML.Excel.XLPivotTable.ErrorValueReplacement"/> should be shown when cell contain an error.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.MissingCaption">
            <summary>
            Test to display for missing items, when <see cref="P:ClosedXML.Excel.XLPivotTable.ShowMissing"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowMissing">
            <summary>
            Flag indicating if <see cref="P:ClosedXML.Excel.XLPivotTable.MissingCaption"/> should be shown when cell has no value.
            </summary>
            <remarks>Doesn't seem to work in Excel.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.PageStyle">
            <summary>
            Name of style to apply to <see cref="T:ClosedXML.Excel.XLPivotPageField"/> items headers in <see cref="F:ClosedXML.Excel.XLPivotAxis.AxisPage"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.PivotTableStyleName">
            <remarks>Doesn't seem to work in Excel.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.VacatedStyle">
            <summary>
            Name of a style to apply to the cells left blank when a pivot table shrinks during a refresh operation.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.UpdatedVersion">
            <summary>
            Version of the application that last updated the pivot table. Application-dependent.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.MinRefreshableVersion">
            <summary>
            Minimum version of the application required to update the pivot table. Application-dependent.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.AsteriskTotals">
            <remarks>OLAP related.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.DisplayItemLabels">
            <summary>
            <para>
            Should field items be displayed on the axis despite pivot table not having any value
            field? <c>true</c> will display items even without data field, <c>false</c> won't.
            </para>
            <para>
            Example: There is an empty pivot table with no value fields. Add field 'Name'
            to row fields. Should names be displayed on row despite not having any value field?
            </para>
            </summary>
            <remarks>Also called ShowItems</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.EditData">
            <summary>
            Flag indicating if user is allowed to edit cells in data area.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.DisableFieldList">
            <summary>
            Flag indicating if UI to modify the fields of pivot table is disabled. In Excel, the
            whole field area is hidden.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowCalculatedMembers">
            <remarks>OLAP only.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.VisualTotals">
            <remarks>OLAP only.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowMultipleLabel">
            <summary>
            A flag indicating whether a page field that has selected multiple items (but not
            necessarily all) display "(multiple items)" instead of "All"? If value is <c>false</c>.
            page fields will display "All" regardless of whether only item subset is selected or
            all items are selected.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowDataDropDown">
            <summary>
            Doesn't seem to do anything. Should hide drop down filters.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowExpandCollapseButtons">
            <summary>
            A flag indicating whether UI should display collapse/expand (drill) buttons in pivot
            table axes.
            </summary>
            <remarks>Also called ShowDrill.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.PrintExpandCollapsedButtons">
            <summary>
            A flag indicating whether collapse/expand (drill) buttons in pivot table axes should
            be printed.
            </summary>
            <remarks>Also called PrintDrill.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowPropertiesInTooltips">
            <remarks>OLAP only. Also called ShowMemberPropertyTips.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowContextualTooltips">
            <summary>
            A flag indicating whether UI should display a tooltip on data items of pivot table. The
            tooltip contain info about value field name, row/col items used to aggregate the value
            ect. Note that this tooltip generally hides cell notes, because mouseover displays data
            tool tip, rather than the note.
            </summary>
            <remarks>Also called ShowDataTips.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.EnableEditingMechanism">
            <summary>
            A flag indicating whether UI should provide a mechanism to edit the pivot table. If the
            value is <c>false</c>, Excel provides ability to refresh data through context menu, but
            ribbon or other options to manipulate field or pivot table settings are not present.
            </summary>
            <remarks>Also called enableWizard.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.EnableShowDetails">
            <remarks>Likely OLAP only. Do not confuse with collapse/expand buttons.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.EnableFieldProperties">
            <summary>
            A flag indicating whether the user is prevented from displaying PivotField properties.
            Not very consistent in Excel, e.g. can't display field properties through context menu
            of a pivot table, but can display properties menu through context menu in editing wizard.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.PreserveCellFormatting">
            <summary>
            A flag that indicates whether the formatting applied by the user to the pivot table
            cells is preserved on refresh. 
            </summary>
            <remarks>Once again, ISO-29500 is buggy and says the opposite. Also called <em>
            PreserveFormatting</em></remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.AutofitColumns">
            <summary>
            A flag that indicates whether legacy auto formatting has been applied to the PivotTable
            view.
            </summary>
            <remarks>Also called UseAutoFormatting.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.FilterFieldsPageWrap">
            <inheritdoc />
            <remarks>Also called PageWrap.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.FilterAreaOrder">
            <inheritdoc />
            <remarks>Also called <em>PageOverThenDown</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.FilteredItemsInSubtotals">
            <summary>
            A flag that indicates whether hidden pivot items should be included in subtotal
            calculated values. If <c>true</c>, data for hidden items are included in subtotals
            calculated values. If <c>false</c>, hidden values are not included in subtotal
            calculations.
            </summary>
            <remarks>Also called <em>SubtotalHiddenItems</em>. OLAP only. Option in Excel is grayed
                out and does nothing. The option is un-grayed out when pivot cache is part of data
                model.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowGrandTotalsRows">
            <summary>
            A flag indicating whether grand totals should be displayed for the PivotTable rows.
            </summary>
            <remarks>Also called <em>RowGrandTotals</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowGrandTotalsColumns">
            <summary>
            A flag indicating whether grand totals should be displayed for the PivotTable columns.
            </summary>
            <remarks>Also called <em>ColumnGrandTotals</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.PrintTitles">
            <summary>
            A flag indicating whether when a field name should be printed on all pages.
            </summary>
            <remarks>Also called <em>FieldPrintTitles</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.RepeatRowLabels">
            <summary>
            A flag indicating whether whether PivotItem names should be repeated at the top of each
            printed page (e.g. if axis item spans multiple pages, it will be repeated an all pages).
            </summary>
            <remarks>Also called <em>ItemPrintTitles</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.MergeAndCenterWithLabels">
            <summary>
            A flag indicating whether row or column titles that span multiple cells should be
            merged into a single cell. Useful only in in tabular layout, titles in other layouts
            don't span across multiple cells.
            </summary>
            <remarks>Also called <em>MergeItem</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowDropZones">
            <summary>
            A flag indicating whether UI for the pivot table should display large text in field
            drop zones when there are no fields in the data region (e.g. <em>Drop Value Fields
            Here</em>). Only works in legacy layout mode (i.e. <see cref="P:ClosedXML.Excel.XLPivotTable.ClassicPivotTableLayout"/>
            is <c>true</c>).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.PivotCacheCreatedVersion">
            <summary>
            Specifies the version of the application that created the pivot cache. Application-dependent.
            </summary>
            <remarks>Also called <em>CreatedVersion</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.RowLabelIndent">
            <summary>
            A row indentation increment for row axis when pivot table is in compact layout. Units
            are characters.
            </summary>
            <remarks>Also called <em>Indent</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowEmptyItemsOnRows">
            <summary>
            A flag indicating whether to include empty rows in the pivot table (i.e. row axis items
            are blank and data items are blank).
            </summary>
            <remarks>Also called <em>ShowEmptyRow</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ShowEmptyItemsOnColumns">
            <summary>
            A flag indicating whether to include empty columns in the table (i.e. column axis items
            are blank and data items are blank).
            </summary>
            <remarks>Also called <em>ShowEmptyColumn</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.DisplayCaptionsAndDropdowns">
            <summary>
            A flag indicating whether to show field names on axis. The axis items are still
            displayed, only field names are not. The dropdowns next to the axis field names
            are also displayed/hidden based on the flag.
            </summary>
            <remarks>Also called <em>ShowHeaders</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.Compact">
            <summary>
            A flag indicating whether new fields should have their
            <see cref="P:ClosedXML.Excel.XLPivotTableField.Compact"/> flag set to <c>true</c>. By new, it means field
            added to page, axes or data fields, not a new field from cache.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.Outline">
            <summary>
            A flag indicating whether new fields should have their
            <see cref="P:ClosedXML.Excel.XLPivotTableField.Outline"/> flag set to <c>true</c>. By new, it means field
            added to page, axes or data fields, not a new field from cache.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.OutlineData">
            <summary>
            <para>
            A flag that indicates whether 'data'/-2 fields in the PivotTable should be displayed in
            outline next column of the sheet. This is basically an equivalent of
            <see cref="P:ClosedXML.Excel.XLPivotTableField.Outline"/> property for the 'data' fields, because 'data'
            field is implicit.
            </para>
            <para>
            When <c>true</c>, the labels from the next field (as ordered by
            <see cref="P:ClosedXML.Excel.XLPivotTableAxis.Fields"/> for row or column) are displayed in the next
            column. Has no effect if 'data' field is last field.
            </para>
            </summary>
            <remarks>Doesn't seem to do much in column axis, only in row axis. Also, Excel
                sometimes seems to favor <see cref="P:ClosedXML.Excel.XLPivotTable.Outline"/> flag instead (likely some less used
                paths in the Excel code).</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.CompactData">
            <summary>
            <para>
            A flag that indicates whether 'data'/-2 fields in the PivotTable should be displayed in
            compact mode (=same column of the sheet). This is basically an equivalent of
            <see cref="P:ClosedXML.Excel.XLPivotTableField.Compact"/> property for the 'data' fields, because 'data'
            field is implicit.
            </para>
            <para>
            When <c>true</c>, the labels from the next field (as ordered by
            <see cref="P:ClosedXML.Excel.XLPivotTableAxis.Fields"/> for row or column) are displayed in the same
            column (one row below). Has no effect if 'data' field is last field.
            </para>
            </summary>
            <remarks>Doesn't seem to do much in column axis, only in row axis. Also, Excel
                sometimes seems to favor <see cref="P:ClosedXML.Excel.XLPivotTable.Compact"/> flag instead (likely some less used
                paths in the Excel code).</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.Published">
            <summary>
            A flag that indicates whether data fields in the pivot table are published and
            available for viewing in a server rendering environment.
            </summary>
            <remarks>No idea what this does. Likely flag for other components that display table
                on a web page.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ClassicPivotTableLayout">
            <summary>
            A flag that indicates whether to apply the classic layout. Classic layout displays the
            grid zones in UI where user can drop fields (unless disabled through
            <see cref="P:ClosedXML.Excel.XLPivotTable.ShowDropZones"/>).
            </summary>
            <remarks>Also called <em>GridDropZones</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.StopImmersiveUi">
            <summary>
            Likely a flag whether immersive reader should be turned off. Not sure if immersive
            reader was ever used outside Word, though Excel for Web added some support in 2023.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.AllowMultipleFilters">
            <summary>
            <para>
            A flag indicating whether field can have at most most one filter type used. This flag
            doesn't allow multiple filters of same type, only multiple different filter types.
            </para>
            <para>
            If false, field can have at most one filter, if user tries to set multiple, previous
            one is cleared.
            </para>
            </summary>
            <remarks>Also called <em>multipleFieldFilters</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ChartFormat">
            <summary>
            Specifies the next pivot chart formatting identifier to use on the pivot table. First
            actually used identifier should be 1. The format is used in <c>/chartSpace/pivotSource/
            fmtId/@val</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.RowHeaderCaption">
            <summary>
            The text that will be displayed in row header in compact mode. It is next to drop down
            (if enabled) of a label/values filter for fields (if
            <see cref="P:ClosedXML.Excel.XLPivotTable.DisplayCaptionsAndDropdowns"/> is set to <c>true</c>). Use localized text
            <em>Row labels</em> if property is not specified.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.ColumnHeaderCaption">
            <summary>
            The text that will be displayed in column header in compact mode. It is next to drop down
            (if enabled) of a label/values filter for fields (if
            <see cref="P:ClosedXML.Excel.XLPivotTable.DisplayCaptionsAndDropdowns"/> is set to <c>true</c>). Use localized text
            <em>Column labels</em> if property is not specified.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.SortFieldsAtoZ">
            <summary>
            A flag that controls how are fields sorted in the field list UI. <c>true</c> will
            display fields sorted alphabetically, <c>false</c> will display fields in the order
            fields appear in <see cref="T:ClosedXML.Excel.XLPivotCache"/>. OLAP data sources always use alphabetical
            sorting.
            </summary>
            <remarks>Also called <em>fieldListSortAscending</em>.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.MdxSubQueries">
            <summary>
            A flag indicating whether MDX sub-queries are supported by OLAP data provider of this
            pivot table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTable.UseCustomListsForSorting">
            <summary>
            A flag that indicates whether custom lists are used for sorting items of fields, both
            initially when the PivotField is initialized and the PivotItems are ordered by their
            captions, and later when the user applies a sort.
            </summary>
            <remarks>Also called <em>customSortList</em>.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTable.AddFieldToAxis(System.String,System.String,ClosedXML.Excel.XLPivotAxis)">
            <summary>
            Add field to a specific axis (page/row/col). Only modified <see cref="P:ClosedXML.Excel.XLPivotTable.PivotFields"/>, doesn't modify
            additional info in <see cref="P:ClosedXML.Excel.XLPivotTable.RowAxis"/>, <see cref="P:ClosedXML.Excel.XLPivotTable.ColumnAxis"/> or <see cref="P:ClosedXML.Excel.XLPivotTable.Filters"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTable.UpdateCacheFields(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Refresh cache fields after cache has changed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTable.IsFieldUsedOnAxis(ClosedXML.Excel.FieldIndex)">
            <summary>
            Is field used by any axis (row, column, filter), but not data.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLItemsToRetain">
            <summary>
            Specifies the number of unused items to allow in a <see cref="T:ClosedXML.Excel.IXLPivotCache"/>
            before discarding unused items.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLItemsToRetain.Automatic">
            <summary>
            The threshold is set automatically based on the number of items.
            </summary>
            <remarks>Default behavior.</remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLItemsToRetain.None">
            <summary>
            When even one item is unused.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLItemsToRetain.Max">
            <summary>
            When all shared items of a filed are unused.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotSortType">
            <summary>
            An enum describing how are values of a <see cref="T:ClosedXML.Excel.XLPivotTableField">pivot field</see> are sorted.
            </summary>
            <remarks>
            [ISO-29500] 18.18.28 ST_FieldSortType.
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotSortType.Default">
            <summary>
            Field values are sorted manually.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotSortType.Ascending">
            <summary>
            Field values are sorted in ascending order.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotSortType.Descending">
            <summary>
            Field values are sorted in descending order.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotTableSourceType.Area">
            <summary>
            A range in a sheet of the workbook.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPivotTableSourceType.Named">
            <summary>
            Book-scoped named range or a table.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPivotTableField">
            <summary>
            One field in a <see cref="T:ClosedXML.Excel.XLPivotTable"/>. Pivot table must contain field for each entry of
            pivot cache and both are accessed through same index. Pivot field contains items, which are
            cache field values referenced anywhere in the pivot table (e.g. caption, axis value ect.).
            </summary>
            <remarks>
            See <em>[OI-29500] 18.10.1.69 pivotField(PivotTable Field)</em> for details.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.Items">
            <summary>
            Pivot field item, doesn't contain value, only indexes to <see cref="T:ClosedXML.Excel.XLPivotCache"/> shared items.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.Name">
            <summary>
            Custom name of the field.
            </summary>
            <remarks>
            [MS-OI29500] Office requires @name to be unique for non-OLAP PivotTables. Ignored by data
            fields that use <see cref="P:ClosedXML.Excel.XLPivotDataField.DataFieldName"/>.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.Axis">
            <summary>
            If the value is set, the field must also be in <c>rowFields</c>/<c>colFields</c>/
            <c>pageFields</c>/<c>dataFields</c> collection in the pivot table part (otherwise Excel
            will consider it a corrupt file).
            </summary>
            <remarks>
            [MS-OI29500] In Office, axisValues shall not be used for the axis attribute.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.DataField">
            <summary>
            Is this field a data field (i.e. it is referenced the <c>pivotTableDefinition.
            dataFields</c>)? Excel will crash, unless these two things both set correctly.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.Compact">
            <summary>
            <para>
            Should the headers be displayed in a same column. This field has meaning only when
            <see cref="P:ClosedXML.Excel.XLPivotTableField.Outline"/> is set to <c>true</c>. Excel displays the flag in <em>Field settings
            - Layout &amp; Print - Display labels from next field in the same column</em>.
            </para>
            <para>
            The value doesn't affect anything individually per field. When <em>ALL</em> fields of the pivot table
            are <c>false</c>, the headers are displayed individually. If <em>ANY</em> field is <c>true</c>, headers
            are grouped to single column.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.AllDrilled">
            <summary>
            Are all items expanded?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.Outline">
            <summary>
            <para>
            A flag that determines if field is in tabular form (<c>false</c>) or outline form
            (<c>true</c>). If it is in outline form, the <see cref="P:ClosedXML.Excel.XLPivotTableField.Compact"/> can also switch
            to <see cref="F:ClosedXML.Excel.XLPivotLayout.Compact"/> form.
            </para>
            <para>
            Excel displays it on <em>Field Settings - Layout &amp; Print</em> as a radio box.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.ShowAll">
            <summary>
            A flag that indicates whether to show all items for this field.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.InsertBlankRow">
            <summary>
            Insert empty row below every item if the field is row/column axis. The last field in axis
            doesn't add extra item at the end. If multiple fields in axis have extra item, only once
            blank row is inserted.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.Subtotals">
            <summary>
            Subtotal functions represented in XML. It's kind of convoluted mess, because
            it represents three possible results:
            <list type="bullet">
              <item>None - Collection is empty.</item>
              <item>Automatic - Collection contains only <see cref="F:ClosedXML.Excel.XLSubtotalFunction.Automatic"/>.</item>
              <item>Custom - Collection contains subtotal functions other than <see cref="F:ClosedXML.Excel.XLSubtotalFunction.Automatic"/>.
                  The <see cref="F:ClosedXML.Excel.XLSubtotalFunction.Automatic"/> is ignored in that case, even if it is present.</item>
            </list>.
            </summary>
            <remarks>
            Excel requires that pivot field contains a item if and only if  there is a declared subtotal function.
            The subtotal items must be kept at the end of the <see cref="F:ClosedXML.Excel.XLPivotTableField._items"/>, otherwise Excel will try to repair
            workbook.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLPivotTableField.RepeatItemLabels">
            <summary>
            Are item labels on row/column axis repeated for each nested item?
            </summary>
            <remarks>
            Also called <c>FillDownLabels</c>. Attribute is ignored if both the <see cref="P:ClosedXML.Excel.XLPivotTableField.Compact"/>
            and the <see cref="P:ClosedXML.Excel.XLPivotTableField.Outline"/> are <c>true</c>. Attribute is ignored if the field is not on
            the <see cref="P:ClosedXML.Excel.XLPivotTable.RowAxis"/> or the <see cref="P:ClosedXML.Excel.XLPivotTable.ColumnAxis"/>.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTableField.AddItem(ClosedXML.Excel.XLPivotFieldItem)">
            <summary>
            Add an item when it is used anywhere in the pivot table.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Index of added item.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTableField.GetAllItems(System.Predicate{ClosedXML.Excel.XLCellValue})">
            <summary>
            <para>
            Filter all shared items of the field through a <paramref name="predicate"/> and return
            all <see cref="P:ClosedXML.Excel.XLPivotTableField.Items">items</see> that represent a value that satisfies the <paramref
            name="predicate"/>.
            </para>
            <para>
            The <see cref="P:ClosedXML.Excel.XLPivotTableField.Items"/> don't necessarily contain all indexes to shared items
            and if the value is missing in <see cref="P:ClosedXML.Excel.XLPivotTableField.Items"/> but is present in shared items,
            add it (that's why method has prefix <c>All</c>).
            </para>
            </summary>
            <param name="predicate">Condition to satisfy.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLPivotTables.PivotTable(System.String)">
            <inheritdoc cref="M:ClosedXML.Excel.IXLPivotTables.PivotTable(System.String)"/>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection`1.AllowedElements">
            <summary>Gets or sets the elements that are allowed to be edited by the user, i.e. those that are not protected.</summary>
            <value>The allowed elements.</value>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.AllowElement(`0,System.Boolean)">
            <summary>
            Adds the specified element to the list of allowed elements.
            Beware that if you pass through "None", this will have no effect.
            </summary>
            <param name="element">The element to add</param>
            <param name="allowed">Set to <c>true</c> to allow the element or <c>false</c> to disallow the element</param>
            <returns>The current protection instance</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.AllowEverything">
            <summary>Allows all elements to be edited.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.AllowNone">
            <summary>Allows no elements to be edited. Protects all elements.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.CopyFrom(ClosedXML.Excel.IXLElementProtection{`0})">
            <summary>Copies all the protection settings from a different instance.</summary>
            <param name="protectable">The protectable.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.DisallowElement(`0)">
            <summary>
            Removes the element to the list of allowed elements.
            Beware that if you pass through "None", this will have no effect.
            </summary>
            <param name="element">The element to remove</param>
            <returns>The current protection instance</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance without a password.</summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance using the specified password and password hash algorithm.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Unprotect">
            <summary>Unprotects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLElementProtection`1.Unprotect(System.String)">
            <summary>Unprotects this instance using the specified password.</summary>
            <param name="password">The password.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection.Algorithm">
            <summary>Gets the algorithm used to hash the password.</summary>
            <value>The algorithm.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection.IsPasswordProtected">
            <summary>Gets a value indicating whether this instance is protected with a password.</summary>
            <value>
              <c>true</c> if this instance is password protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLElementProtection.IsProtected">
            <summary>Gets a value indicating whether this instance is protected, either with or without a password.</summary>
            <value>
              <c>true</c> if this instance is protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(`1)">
            <summary>Protects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm,`1)">
            <summary>Protects this instance with the specified password, password hash algorithm and set elements that the user is allowed to change.</summary>
            <param name="algorithm">The algorithm.</param>
            <param name="allowedElements">The allowed elements.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance using the specified password and password hash algorithm.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm,`1)">
            <summary>Protects this instance with the specified password, password hash algorithm and set elements that the user is allowed to change.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
            <param name="allowedElements">The allowed elements.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Unprotect">
            <summary>Unprotects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable`2.Unprotect(System.String)">
            <summary>Unprotects this instance using the specified password.</summary>
            <param name="password">The password.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLProtectable.IsPasswordProtected">
            <summary>Gets a value indicating whether this instance is protected with a password.</summary>
            <value>
              <c>true</c> if this instance is password protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLProtectable.IsProtected">
            <summary>Gets a value indicating whether this instance is protected, either with or without a password.</summary>
            <value>
              <c>true</c> if this instance is protected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Protect(ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Protect(System.String,ClosedXML.Excel.XLProtectionAlgorithm.Algorithm)">
            <summary>Protects this instance using the specified password and password hash algorithm.</summary>
            <param name="password">The password.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Unprotect">
            <summary>Unprotects this instance without a password.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLProtectable.Unprotect(System.String)">
            <summary>Unprotects this instance using the specified password.</summary>
            <param name="password">The password.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLWorkbookProtectionElements.Windows">
            <summary>
            The Windows option is available only in Excel 2007, Excel 2010, Excel for Mac 2011, and Excel 2016 for Mac. Select the Windows option if you want to prevent users from moving, resizing, or closing the workbook window, or hide/unhide windows.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Ranges.Index.IXLRangeIndex">
            <summary>
            Interface for the engine aimed to speed-up the search for the range intersections.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Ranges.Index.XLRangeIndex">
            <summary>
            Implementation of <see cref="T:ClosedXML.Excel.Ranges.Index.IXLRangeIndex"/> internally using QuadTree.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Ranges.Index.XLRangeIndex.MinimumCountForIndexing">
            <summary>
            The minimum number of ranges to be included into a QuadTree. Until it is reached the ranges
            are added into a simple list to minimize the overhead of searching intersections on small collections.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.Ranges.Index.XLRangeIndex._rangeList">
            <summary>
            A collection of ranges used before the QuadTree is initialized (until <see cref="F:ClosedXML.Excel.Ranges.Index.XLRangeIndex.MinimumCountForIndexing"/>
            is reached.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.Ranges.Index.XLRangeIndex`1">
            <summary>
            Generic version of <see cref="T:ClosedXML.Excel.Ranges.Index.XLRangeIndex"/>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLAddressable">
            <summary>
            A very lightweight interface for entities that have an address as
            a rectangular range.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAddressable.RangeAddress">
            <summary>
              Gets an object with the boundaries of this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.AddToNamed(System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <para>The default scope for the named range is Workbook.</para>
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            <param name="comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLBaseCollection`2.Value">
            <summary>
            Sets the cells' value.
            <para>If the object is an IEnumerable ClosedXML will copy the collection's data into a table starting from each cell.</para>
            <para>If the object is a range ClosedXML will copy the range starting from each cell.</para>
            <para>Setting the value to an object (not IEnumerable/range) will call the object's ToString() method.</para>
            <para>ClosedXML will try to translate it to the corresponding type, if it can't then the value will be left as a string.</para>
            </summary>
            <value>
            The object containing the value(s) to set.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.CellsUsed(System.Boolean)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="includeFormats">if set to <c>true</c> will return all cells with a value or a style different than the default.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLBaseCollection`2.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these ranges.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLTransposeOptions">
            <summary>
            A behavior of extra outside cells for transpose operation. The option
            is meaningful only for transposition of non-squared ranges, because
            squared ranges can always be transposed without effecting outside cells. 
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLTransposeOptions.MoveCells">
            <summary>
            Shift cells of the smaller side to its direction so
            there is a space to transpose other side (e.g. if A1:C5
            range is transposed, move D1:XFD5 are moved 2 columns
            to the right).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLTransposeOptions.ReplaceCells">
            <summary>
            Data of the cells are replaced by the transposed cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified row and column.
            <para>The cell address is relative to the parent range.</para>
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(System.String)">
            <summary>Gets the cell at the specified address.</summary>
            <para>The cell address is relative to the parent range.</para>
            <param name="cellAddressInRange">The cell address in the parent range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(System.Int32,System.String)">
            <summary>
            Gets the cell at the specified row and column.
            <para>The cell address is relative to the parent range.</para>
            </summary>
            <param name="row">The cell's row.</param>
            <param name="column">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Cell(ClosedXML.Excel.IXLAddress)">
            <summary>Gets the cell at the specified address.</summary>
            <para>The cell address is relative to the parent range.</para>
            <param name="cellAddressInRange">The cell address in the parent range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Column(System.Int32)">
            <summary>
            Gets the specified column of the range.
            </summary>
            <param name="columnNumber">1-based column number relative to the first column of this range.</param>
            <returns>The relevant column</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Column(System.String)">
            <summary>
            Gets the specified column of the range.
            </summary>
            <param name="columnLetter">Column letter.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstColumn(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the first column of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstColumnUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the first non-empty column of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastColumn(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the last column of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastColumnUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets the last non-empty column of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Gets a collection of all columns in this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified columns in this range.
            </summary>
            <param name="firstColumn">The first column to return. 1-based column number relative to the first column of this range.</param>
            <param name="lastColumn">The last column to return. 1-based column number relative to the first column of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.String,System.String)">
            <summary>
            Gets a collection of the specified columns in this range.
            </summary>
            <param name="firstColumn">The first column to return.</param>
            <param name="lastColumn">The last column to return.</param>
            <returns>The relevant columns</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Columns(System.String)">
            <summary>
            Gets a collection of the specified columns in this range, separated by commas.
            <para>e.g. Columns("G:H"), Columns("10:11,13:14"), Columns("P:Q,S:T"), Columns("V")</para>
            </summary>
            <param name="columns">The columns to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FindColumn(System.Func{ClosedXML.Excel.IXLRangeColumn,System.Boolean})">
            <summary>
            Returns the first row that matches the given predicate
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FindRow(System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Returns the first row that matches the given predicate
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstRow(System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the first row of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.FirstRowUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the first non-empty row of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastRow(System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the last row of the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.LastRowUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLRangeRow,System.Boolean})">
            <summary>
            Gets the last non-empty row of the range that contains a cell with a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate to choose cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Row(System.Int32)">
            <summary>
            Gets the specified row of the range.
            </summary>
            <param name="row">1-based row number relative to the first row of this range.</param>
            <returns>The relevant row</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Rows(System.Int32,System.Int32)">
            <summary>
            Gets a collection of the specified rows in this range.
            </summary>
            <param name="firstRow">The first row to return. 1-based row number relative to the first row of this range.</param>
            <param name="lastRow">The last row to return. 1-based row number relative to the first row of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Rows(System.String)">
            <summary>
            Gets a collection of the specified rows in this range, separated by commas.
            <para>e.g. Rows("4:5"), Rows("7:8,10:11"), Rows("13")</para>
            </summary>
            <param name="rows">The rows to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns the specified range.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(System.String)">
            <summary>Returns the specified range.</summary>
            <para>e.g. Range("A1"), Range("A1:C2")</para>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLCell)">
            <summary>Returns the specified range.</summary>
            <param name="firstCell">The first cell in the range.</param>
            <param name="lastCell"> The last cell in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(System.String,System.String)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the range.</param>
            <param name="lastCellAddress"> The last cell address in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellAddress">The first cell address in the range.</param>
            <param name="lastCellAddress"> The last cell address in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Ranges(System.String)">
            <summary>Returns a collection of ranges, separated by commas.</summary>
            <para>e.g. Ranges("A1"), Ranges("A1:C2"), Ranges("A1:B2,D1:D4")</para>
            <param name="ranges">The ranges to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Range(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns the specified range.</summary>
            <param name="firstCellRow">   The first cell's row of the range to return.</param>
            <param name="firstCellColumn">The first cell's column of the range to return.</param>
            <param name="lastCellRow">    The last cell's row of the range to return.</param>
            <param name="lastCellColumn"> The last cell's column of the range to return.</param>
            <returns>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.RowCount">
            <summary>Gets the number of rows in this range.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.ColumnCount">
            <summary>Gets the number of columns in this range.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertColumnsAfter(System.Int32)">
            <summary>
            Inserts X number of columns to the right of this range.
            <para>All cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertColumnsBefore(System.Int32)">
            <summary>
            Inserts X number of columns to the left of this range.
            <para>This range and all cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertRowsAbove(System.Int32)">
            <summary>
            Inserts X number of rows on top of this range.
            <para>This range and all cells below this range will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.InsertRowsBelow(System.Int32)">
            <summary>
            Inserts X number of rows below this range.
            <para>All cells below this range will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes this range and shifts the surrounding cells accordingly.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Transpose(ClosedXML.Excel.XLTransposeOptions)">
            <summary>
            Transposes the contents and styles of all cells in this range.
            </summary>
            <param name="transposeOption">How to handle the surrounding cells when transposing the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.AsTable">
            <summary>
            Use this range as a table, but do not add it to the Tables list
            </summary>
            <remarks>
            NOTES:<br/>
                The AsTable method will use the first row of the range as a header row.<br/>
                If this range contains only one row, then an empty data row will be inserted into the returned table.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.AsTable(System.String)">
            <summary>
            Use this range as a table with the passed name, but do not add it to the Tables list
            </summary>
            <param name="name">Table name to be used.</param>
            <remarks>
            NOTES:<br/>
                The AsTable method will use the first row of the range as a header row.<br/>
                If this range contains only one row, then an empty data row will be inserted into the returned table.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLRange.SortRows">
            <summary>
            Rows used for sorting columns. Automatically updated each time a <see cref="M:ClosedXML.Excel.IXLRange.SortLeftToRight(ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/>
            is called.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRange.SortColumns">
            <summary>
            Columns used for sorting rows. Automatically updated each time a <see cref="M:ClosedXML.Excel.IXLRange.Sort(System.String,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/>
            or <see cref="M:ClosedXML.Excel.IXLRange.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/>.
            </summary>
            <remarks>
            User can set desired sorting order here and then call <see cref="M:ClosedXML.Excel.IXLRange.Sort"/> method.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Sort">
            <summary>
            Sort rows of the range using the <see cref="P:ClosedXML.Excel.IXLRange.SortColumns"/> (if non-empty) or by using
            all columns of the range in ascending order.
            </summary>
            <remarks>
            This method can be used fort sorting, after user specified desired sorting order
            in <see cref="P:ClosedXML.Excel.IXLRange.SortColumns"/>.
            </remarks>
            <returns>This range.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Sort(System.String,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)">
            <summary>
            Sort rows of the range according to values in columns specified by <paramref name="columnsToSortBy"/>.
            </summary>
            <param name="columnsToSortBy">
            Columns which should be used to sort the range and their order. Columns are separated
            by a comma (<strong>,</strong>). The column can be specified either by column number or
            by column letter. Sort order is parsed case insensitive and can be <c>ASC</c> or
            <c>DESC</c>. The specified column is relative to the origin of the range.
            <para>
            <example><c>2 DESC, 1, C asc</c> means sort by second column of a range in descending
            order, then by first column of a range in <paramref name="sortOrder"/> and then by
            column <c>C</c> in ascending order.</example>.
            </para>
            </param>
            <param name="sortOrder">
            What should be the default sorting order or columns in <paramref name="columnsToSortBy"/>
            without specified sorting order.
            </param>
            <param name="matchCase">
            When cell value is a <see cref="F:ClosedXML.Excel.XLDataType.Text"/>, should sorting be case insensitive
            (<c>false</c>, Excel default behavior) or case sensitive (<c>true</c>). Doesn't affect
            other cell value types.
            </param>
            <param name="ignoreBlanks">
            When <c>true</c> (recommended, matches Excel behavior), blank cell values are always
            sorted at the end regardless of sorting order. When <c>false</c>, blank values are
            considered empty strings and are sorted among other cell values with a type
            <see cref="F:ClosedXML.Excel.XLDataType.Text"/>.
            </param>
            <returns>This range.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Sort(System.Int32,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)">
            <summary>
            Sort rows of the range according to values in <paramref name="columnToSortBy"/> column.
            </summary>
            <param name="columnToSortBy">Column number that will be used to sort the range rows.</param>
            <param name="sortOrder">Sorting order used by <paramref name="columnToSortBy"/>.</param>
            <param name="matchCase"><inheritdoc cref="M:ClosedXML.Excel.IXLRange.Sort(System.String,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/></param>
            <param name="ignoreBlanks"><inheritdoc cref="M:ClosedXML.Excel.IXLRange.Sort(System.String,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/></param>
            <returns>This range.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.SortLeftToRight(ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)">
            <summary>
            Sort columns in a range. The sorting is done using the values in each column of the range.
            </summary>
            <param name="sortOrder">In what order should columns be sorted</param>
            <param name="matchCase"><inheritdoc cref="M:ClosedXML.Excel.IXLRange.Sort(System.String,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/></param>
            <param name="ignoreBlanks"><inheritdoc cref="M:ClosedXML.Excel.IXLRange.Sort(System.String,ClosedXML.Excel.XLSortOrder,System.Boolean,System.Boolean)"/></param>
            <returns>This range.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRange.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this range.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.ColumnSpan">
            <summary>
            Gets the number of columns in the area covered by the range address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.FirstAddress">
            <summary>
            Gets or sets the first address in the range.
            </summary>
            <value>
            The first address.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.IsValid">
            <summary>
            Gets or sets a value indicating whether this range is valid.
            </summary>
            <value>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.LastAddress">
            <summary>
            Gets or sets the last address in the range.
            </summary>
            <value>
            The last address.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.NumberOfCells">
            <summary>
            Gets the number of cells in the area covered by the range address.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeAddress.RowSpan">
            <summary>
            Gets the number of rows in the area covered by the range address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.AsRange">
            <summary>Allocates the current range address in the internal range repository and returns it</summary>
            <returns>Range of the address or null, if the range is not a valid address.</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.Intersection(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns the intersection of this range address with another range address on the same worksheet.
            </summary>
            <param name="otherRangeAddress">The other range address.</param>
            <returns>The intersection's range address</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.IsEntireColumn">
            <summary>
            Determines whether range address spans the entire column.
            </summary>
            <returns>
              <c>true</c> if is entire column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.IsEntireRow">
            <summary>
            Determines whether range address spans the entire row.
            </summary>
            <returns>
              <c>true</c> if is entire row; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.IsEntireSheet">
            <summary>
            Determines whether the range address spans the entire worksheet.
            </summary>
            <returns>
              <c>true</c> if is entire sheet; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeAddress.Relative(ClosedXML.Excel.IXLRangeAddress,ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Returns a range address so that its offset from the target base address is equal to the offset of the current range address to the source base address.
            For example, if the current range address is D4:E4, the source base address is A1:C3, then the relative address to the target base address B10:D13 is E14:F14
            </summary>
            <param name="sourceRangeAddress">The source base range address.</param>
            <param name="targetRangeAddress">The target base range address.</param>
            <returns>The relative range</returns>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.Value">
            <summary>
            Sets a value to every cell in this range.
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.FormulaA1">
            <summary>
              Sets the cells' formula with A1 references.
            </summary>
            <value>The formula with A1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.FormulaArrayA1">
            <summary>
            Create an array formula for all cells in the range.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the range overlaps with a table, pivot table, merged cells or partially overlaps another array formula.</exception>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.FormulaR1C1">
            <summary>
              Sets the cells' formula with R1C1 references.
            </summary>
            <value>The formula with R1C1 references.</value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRangeBase.ShareString">
            <summary>
              Gets or sets a value indicating whether this cell's text should be shared or not.
            </summary>
            <value>
              If false the cell's text will not be shared and stored as an inline value.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Cells">
            <summary>
              Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.CellsUsed">
            <summary>
              Returns the collection of cells that have a value. Formats are ignored.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Search(System.String,System.Globalization.CompareOptions,System.Boolean)">
            <summary>
            Searches the cells' contents for a given piece of text
            </summary>
            <param name="searchText">The search text.</param>
            <param name="compareOptions">The compare options.</param>
            <param name="searchFormulae">if set to <c>true</c> search formulae instead of cell values.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCell">
            <summary>
              Returns the first cell of this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCellUsed">
            <summary>
              Returns the first non-empty cell with a value of this range. Formats are ignored.
              <para>The cell's address is going to be ([First Row with a value], [First Column with a value])</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCellUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the first non-empty cell with a value of this range.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.FirstCellUsed(ClosedXML.Excel.XLCellsUsedOptions,System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns the first non-empty cell with a value of this range.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
            <param name="predicate">The predicate used to choose cells</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.LastCell">
            <summary>
              Returns the last cell of this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.LastCellUsed">
            <summary>
              Returns the last non-empty cell with a value of this range. Formats are ignored.
              <para>The cell's address is going to be ([Last Row with a value], [Last Column with a value])</para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.LastCellUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the last non-empty cell with a value of this range.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Contains(System.String)">
            <summary>
              Determines whether this range contains the specified range (completely).
              <para>For partial matches use the range.Intersects method.</para>
            </summary>
            <param name = "rangeAddress">The range address.</param>
            <returns>
              <c>true</c> if this range contains the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Contains(ClosedXML.Excel.IXLRangeBase)">
            <summary>
              Determines whether this range contains the specified range (completely).
              <para>For partial matches use the range.Intersects method.</para>
            </summary>
            <param name = "range">The range to match.</param>
            <returns>
              <c>true</c> if this range contains the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Intersects(System.String)">
            <summary>
              Determines whether this range intersects the specified range.
              <para>For whole matches use the range.Contains method.</para>
            </summary>
            <param name = "rangeAddress">The range address.</param>
            <returns>
              <c>true</c> if this range intersects the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Intersects(ClosedXML.Excel.IXLRangeBase)">
            <summary>
              Determines whether this range contains the specified range.
              <para>For whole matches use the range.Contains method.</para>
            </summary>
            <param name = "range">The range to match.</param>
            <returns>
              <c>true</c> if this range intersects the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Unmerge">
            <summary>
              Unmerges this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Merge">
            <summary>
            Merges this range. Only the top-left cell will have a value, other values will be blank.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AddToNamed(System.String)">
            <summary>
            Creates/adds this range to workbook scoped <see cref="T:ClosedXML.Excel.IXLDefinedNames"/>.
            <para>If the named range exists, it will add this range to that named range.</para>
            </summary>
            <param name = "name">Name of the defined name, without sheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
            Creates/adds this range to <see cref="T:ClosedXML.Excel.IXLDefinedNames"/>.
            <para>If the named range exists, it will add this range to that named range.</para>
            <param name = "name">Name of the defined name, without sheet.</param>
            <param name = "scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
            Creates/adds this range to <see cref="T:ClosedXML.Excel.IXLDefinedNames"/>.
            <para>If the named range exists, it will add this range to that named range.</para>
            <param name = "name">Name of the defined name, without sheet.</param>
            <param name = "scope">The scope for the named range.</param>
            <param name = "comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this range.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.DeleteComments">
            <summary>
              Deletes the cell comments from this range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.SetValue(ClosedXML.Excel.XLCellValue)">
            <summary>
            Set value to all cells in the range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.AsRange">
            <summary>
              Converts this object to a range.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.IsEntireColumn">
            <summary>
            Determines whether range address spans the entire column.
            </summary>
            <returns>
              <c>true</c> if is entire column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.IsEntireRow">
            <summary>
            Determines whether range address spans the entire row.
            </summary>
            <returns>
              <c>true</c> if is entire row; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.IsEntireSheet">
            <summary>
            Determines whether the range address spans the entire worksheet.
            </summary>
            <returns>
              <c>true</c> if is entire sheet; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.GetDataValidation">
            <summary>
            Returns a data validation rule assigned to the range, if any, or creates a new instance of data validation rule if no rule exists.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.CreateDataValidation">
            <summary>
            Creates a new data validation rule for the range, replacing the existing one.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Grow">
            <summary>
            Grows this the current range by one cell to each side
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Grow(System.Int32)">
            <summary>
            Grows this the current range by the specified number of cells to each side.
            </summary>
            <param name="growCount">The grow count.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Shrink">
            <summary>
            Shrinks this current range by one cell.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Shrink(System.Int32)">
            <summary>
            Shrinks the current range by the specified number of cells from each side.
            </summary>
            <param name="shrinkCount">The shrink count.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Intersection(ClosedXML.Excel.IXLRangeBase,System.Func{ClosedXML.Excel.IXLCell,System.Boolean},System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns the intersection of this range with another range on the same worksheet.
            </summary>
            <param name="otherRange">The other range.</param>
            <param name="thisRangePredicate">Predicate applied to this range's cells.</param>
            <param name="otherRangePredicate">Predicate applied to the other range's cells.</param>
            <returns>The range address of the intersection</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.SurroundingCells(System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns the set of cells surrounding the current range.
            </summary>
            <param name="predicate">The predicate to apply on the resulting set of cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Union(ClosedXML.Excel.IXLRangeBase,System.Func{ClosedXML.Excel.IXLCell,System.Boolean},System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Calculates the union of two ranges on the same worksheet.
            </summary>
            <param name="otherRange">The other range.</param>
            <param name="thisRangePredicate">Predicate applied to this range's cells.</param>
            <param name="otherRangePredicate">Predicate applied to the other range's cells.</param>
            <returns>
            The union
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Difference(ClosedXML.Excel.IXLRangeBase,System.Func{ClosedXML.Excel.IXLCell,System.Boolean},System.Func{ClosedXML.Excel.IXLCell,System.Boolean})">
            <summary>
            Returns all cells in the current range that are not in the other range.
            </summary>
            <param name="otherRange">The other range.</param>
            <param name="thisRangePredicate">Predicate applied to this range's cells.</param>
            <param name="otherRangePredicate">Predicate applied to the other range's cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeBase.Relative(ClosedXML.Excel.IXLRangeBase,ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Returns a range so that its offset from the target base range is equal to the offset of the current range to the source base range.
            For example, if the current range is D4:E4, the source base range is A1:C3, then the relative range to the target base range B10:D13 is E14:F14
            </summary>
            <param name="sourceBaseRange">The source base range.</param>
            <param name="targetBaseRange">The target base range.</param>
            <returns>The relative range</returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified row.
            </summary>
            <param name="rowNumber">The cell's row.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1:2,4:5")</para>
            </summary>
            <param name="cellsInColumn">The column cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstRow">The first row in the group of cells to return.</param>
            <param name="lastRow">The last row in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertColumnsAfter(System.Int32)">
            <summary>
            Inserts X number of columns to the right of this range.
            <para>All cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertColumnsBefore(System.Int32)">
            <summary>
            Inserts X number of columns to the left of this range.
            <para>This range and all cells to the right of this range will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of columns to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertCellsAbove(System.Int32)">
            <summary>
            Inserts X number of cells on top of this column.
            <para>This column and all cells below it will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.InsertCellsBelow(System.Int32)">
            <summary>
            Inserts X number of cells below this range.
            <para>All cells below this column will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Delete">
            <summary>
            Deletes this range and shifts the cells at the right.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes this range and shifts the surrounding cells accordingly.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.ColumnNumber">
            <summary>
            Gets this column's number in the range
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.ColumnLetter">
            <summary>
            Gets this column's letter in the range
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumn.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this column.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Add(ClosedXML.Excel.IXLRangeColumn)">
            <summary>
            Adds a column range to this group.
            </summary>
            <param name="columRange">The column range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Delete">
            <summary>
            Deletes all columns and shifts the columns at the right of them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeColumns.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these columns.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnNumber">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cell(System.String)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnLetter">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1:2,4:5")</para>
            </summary>
            <param name="cellsInRow">The row's cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Cells(System.String,System.String)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertCellsAfter(System.Int32)">
            <summary>
            Inserts X number of cells to the right of this row.
            <para>All cells to the right of this row will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertCellsBefore(System.Int32)">
            <summary>
            Inserts X number of cells to the left of this row.
            <para>This row and all cells to the right of it will be shifted X number of columns.</para>
            </summary>
            <param name="numberOfColumns">Number of cells to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertRowsAbove(System.Int32)">
            <summary>
            Inserts X number of rows on top of this row.
            <para>This row and all cells below it will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.InsertRowsBelow(System.Int32)">
            <summary>
            Inserts X number of rows below this row.
            <para>All cells below this row will be shifted X number of rows.</para>
            </summary>
            <param name="numberOfRows">Number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Delete">
            <summary>
            Deletes this range and shifts the cells below.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Delete(ClosedXML.Excel.XLShiftDeletedCells)">
            <summary>
            Deletes this range and shifts the surrounding cells accordingly.
            </summary>
            <param name="shiftDeleteCells">How to shift the surrounding cells.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.RowNumber">
            <summary>
            Gets this row's number in the range
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRow.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this row.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Add(ClosedXML.Excel.IXLRangeRow)">
            <summary>
            Adds a row range to this group.
            </summary>
            <param name="rowRange">The row range to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Delete">
            <summary>
            Deletes all rows and shifts the rows below them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRangeRows.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these rows.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Add(ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Adds the specified range to this group.
            </summary>
            <param name="range">The range to add to this group.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Remove(ClosedXML.Excel.IXLRange)">
            <summary>
            Removes the specified range from this group.
            </summary>
            <param name="range">The range to remove from this group.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.RemoveAll(System.Predicate{ClosedXML.Excel.IXLRange},System.Boolean)">
            <summary>
            Removes ranges matching the criteria from the collection, optionally releasing their event handlers.
            </summary>
            <param name="match">Criteria to filter ranges. Only those ranges that satisfy the criteria will be removed.
            Null means the entire collection should be cleared.</param>
            <param name="releaseEventHandlers">Specify whether or not should removed ranges be unsubscribed from
            row/column shifting events. Until ranges are unsubscribed they cannot be collected by GC.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLCell)">
            <summary>
            Filter ranges from a collection that intersect the specified cell. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.CreateDataValidation">
            <summary>
            Creates a new data validation rule for the ranges collection, replacing the existing ones.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.AddToNamed(System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <para>The default scope for the named range is Workbook.</para>
            </summary>
            <param name="rangeName">Name of the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.AddToNamed(System.String,ClosedXML.Excel.XLScope)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.AddToNamed(System.String,ClosedXML.Excel.XLScope,System.String)">
            <summary>
            Creates a named range out of these ranges.
            <para>If the named range exists, it will add these ranges to that named range.</para>
            <param name="rangeName">Name of the range.</param>
            <param name="scope">The scope for the named range.</param>
            <param name="comment">The comments for the named range.</param>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRanges.Value">
            <summary>
            Sets the cells' value.
            <para>
            Setter will clear a formula, if the cell contains a formula.
            If the value is a text that starts with a single quote, setter will prefix the value with a single quote through
            <see cref="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix"/> in Excel too and the value of cell is set to to non-quoted text.
            </para>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these ranges.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRanges.Consolidate">
            <summary>
            Create a new collection of ranges which are consolidated version of source ranges.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSortElement.ElementNumber">
            <summary>
            Column or row number whose values will be used for sorting.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSortElement.SortOrder">
            <summary>
            Sorting order.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSortElement.IgnoreBlanks">
            <summary>
            When <c>true</c> (recommended, matches Excel behavior), blank cell values are always
            sorted at the end regardless of sorting order. When <c>false</c>, blank values are
            considered empty strings and are sorted among other cell values with a type
            <see cref="F:ClosedXML.Excel.XLDataType.Text"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLSortElement.MatchCase">
            <summary>
            When cell value is a <see cref="F:ClosedXML.Excel.XLDataType.Text"/>, should sorting be case insensitive
            (<c>false</c>, Excel default behavior) or case sensitive (<c>true</c>). Doesn't affect
            other cell value types.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLCellValueSortComparer">
            <summary>
            A comparator of two cell value. It uses semantic of a sort feature in Excel:
            <list>
              <item>Order by type is number, text, logical, error, blank.</item>
              <item>Errors are not sorted.</item>
              <item>Blanks are always last, both in ascending and descending order.</item>
              <item>Stable sort.</item>
            </list>
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLRangeRowsSortComparer">
            <summary>
            A comparer of rows in a range. It uses semantic of a sort feature in Excel.
            </summary>
            <remarks>
            The comparer should work separate from data, but it would necessitate to sort over
            <see cref="T:ClosedXML.Excel.XLRangeRow"/>. That would require to not only instantiate a new object for each
            sorted row, but since <see cref="T:ClosedXML.Excel.XLRangeRow"/>, it would also be be tracked in range
            repository, slowing each subsequent operation. To improve performance, comparer has
            reference to underlaying data and compares row numbers that can be stores in a single
            allocated array of indexes.
            </remarks>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeAddress.Normalize">
            <summary>
            Lead a range address to a normal form - when <see cref="P:ClosedXML.Excel.XLRangeAddress.FirstAddress"/> points to the top-left address and
            <see cref="P:ClosedXML.Excel.XLRangeAddress.LastAddress"/> points to the bottom-right address.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeAddress.ContainsWhole(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Does this range contains whole another range?
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeColumn.#ctor(ClosedXML.Excel.XLRangeParameters)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLRangeConsolidationEngine">
            <summary>
            Engine for ranges consolidation. Supports IXLRanges including ranges from either one or multiple worksheets.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLRangeConsolidationEngine.XLRangeConsolidationMatrix">
            <summary>
            Class representing the area covering ranges to be consolidated as a set of bit matrices. Does all the dirty job
            of ranges consolidation.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeConsolidationEngine.XLRangeConsolidationMatrix.#ctor(ClosedXML.Excel.IXLWorksheet,System.Collections.Generic.IReadOnlyCollection{ClosedXML.Excel.IXLRange})">
            <summary>
            Constructor.
            </summary>
            <param name="worksheet">Current worksheet.</param>
            <param name="ranges">Ranges to be consolidated. They are expected to belong to the current worksheet, no check is performed.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeConsolidationEngine.XLRangeConsolidationMatrix.GetConsolidatedRanges">
            <summary>
            Get consolidated ranges equivalent to the input ones.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeKey.Equals(ClosedXML.Excel.XLRangeKey)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeKey.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeKey.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLRangeRow.#ctor(ClosedXML.Excel.XLRangeParameters)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLRanges._indexes">
            <summary>
            Normally, XLRanges collection includes ranges from a single worksheet, but not necessarily.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRanges.RemoveAll(System.Predicate{ClosedXML.Excel.IXLRange},System.Boolean)">
            <summary>
            Removes ranges matching the criteria from the collection, optionally releasing their event handlers.
            </summary>
            <param name="match">Criteria to filter ranges. Only those ranges that satisfy the criteria will be removed.
            Null means the entire collection should be cleared.</param>
            <param name="releaseEventHandlers">Specify whether or not should removed ranges be unsubscribed from
            row/column shifting events. Until ranges are unsubscribed they cannot be collected by GC.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRanges.GetIntersectedRanges(ClosedXML.Excel.IXLAddress)">
            <summary>
            Filter ranges from a collection that intersect the specified address. Is much more efficient
            that using Linq expression .Where().
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLFormattedText`1.CopyFrom(ClosedXML.Excel.IXLFormattedText{`0})">
            <summary>
            Replace the text and formatting of this text by texts and formatting from the <paramref name="original"/> text.
            </summary>
            <param name="original">Original to copy from.</param>
            <returns>This text.</returns>
        </member>
        <member name="P:ClosedXML.Excel.IXLFormattedText`1.Count">
            <summary>
            How many rich strings is the formatted text composed of.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLFormattedText`1.Length">
            <summary>
            Length of the whole formatted text.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLFormattedText`1.Text">
            <summary>
            Get text of the whole formatted text.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLFormattedText`1.HasPhonetics">
            <summary>
            Does this text has phonetics? Unlike accessing the <see cref="P:ClosedXML.Excel.IXLFormattedText`1.Phonetics"/> property, this method
            doesn't create a new instance on access.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLFormattedText`1.Phonetics">
            <summary>
            Get or create phonetics for the text. Use <see cref="P:ClosedXML.Excel.IXLFormattedText`1.HasPhonetics"/> to check for existence to avoid unnecessary creation.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPhonetics.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Add a phonetic run above a base text. Phonetic runs can't overlap.
            </summary>
            <param name="text">Text to display above a section of a base text. Can't be empty.</param>
            <param name="start">Index of a first character of a base  text above which should <paramref name="text"/> be displayed. Valid values are <c>0</c>..<c>length-1</c>.</param>
            <param name="end">The excluded ending index in a base text (the hint is not displayed above the <c>end</c>). Must be &gt; <paramref name="start"/>. Valid values are <c>1</c>..<c>length</c>.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLPhonetics.ClearText">
            <summary>
            Remove all phonetic runs. Keeps font properties.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLPhonetics.ClearFont">
            <summary>
            Reset font properties to the default font of a container (likely <c>IXLCell</c>). Keeps phonetic runs, <see cref="P:ClosedXML.Excel.IXLPhonetics.Type"/> and <see cref="P:ClosedXML.Excel.IXLPhonetics.Alignment"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLPhonetics.Count">
            <summary>
            Number of phonetic runs above the base text.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRichString.SetFontScheme(ClosedXML.Excel.XLFontScheme)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLFontBase.FontScheme"/>
        </member>
        <member name="F:ClosedXML.Excel.XLFormattedText`1._defaultFont">
            <summary>
            Font used for a new rich text run, never modified. It is generally provided by a container of the formatted text.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLFormattedText`1.Phonetics">
            <inheritdoc cref="P:ClosedXML.Excel.IXLFormattedText`1.Phonetics"/>
        </member>
        <member name="M:ClosedXML.Excel.XLFormattedText`1.OnContentChanged">
            <summary>
            This method is called every time the formatted text is changed (new runs, font props, phonetics...).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLImmutableRichText">
            <summary>
            A class for holding <see cref="T:ClosedXML.Excel.XLRichText"/> in a <see cref="T:ClosedXML.Excel.SharedStringTable"/>.
            It's immutable (keys in reverse dictionary can't change) and more memory efficient
            than mutable rich text.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLImmutableRichText.Text">
            <summary>
            A text of a whole rich text, without styling.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLImmutableRichText.Runs">
            <summary>
            Individual rich text runs that make up the <see cref="P:ClosedXML.Excel.XLImmutableRichText.Text"/>, in ascending order, non-overlapping.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLImmutableRichText.PhoneticRuns">
            <summary>
            All phonetics runs of rich text. Empty array, if no phonetic run. In ascending order, non-overlapping.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLImmutableRichText.PhoneticsProperties">
            <summary>
            Properties used to display phonetic runs.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLImmutableRichText.Create``1(ClosedXML.Excel.XLFormattedText{``0})">
            <summary>
            Create an immutable rich text with same content as the original <paramref name="formattedText"/>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLImmutableRichText.PhoneticRun">
            <summary>
            Phonetic runs can't overlap and must be in order (i.e. start index must be ascending).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLImmutableRichText.PhoneticRun.Text">
            <summary>
            Text that is displayed above a segment indicating how should segment be read.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLImmutableRichText.PhoneticRun.StartIndex">
            <summary>
            Starting index of displayed phonetic (first character is 0).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLImmutableRichText.PhoneticRun.EndIndex">
            <summary>
            End index, excluding (the last index is a length of the rich text).
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLImmutableRichText.PhoneticProperties">
            <summary>
            Properties of phonetic runs. All phonetic runs of a rich text have same font and other properties.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLImmutableRichText.PhoneticProperties.Font">
            <summary>
            Font used for text of phonetic runs. All phonetic runs use same font. There can be no phonetic runs,
            but with specified font (e.g. the mutable API has only specified font, but no text yet).
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLImmutableRichText.PhoneticProperties.Type">
            <summary>
            Type of phonetics. Default is <see cref="F:ClosedXML.Excel.XLPhoneticType.FullWidthKatakana"/>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLImmutableRichText.PhoneticProperties.Alignment">
            <summary>
            Alignment of phonetics. Default is <see cref="F:ClosedXML.Excel.XLPhoneticAlignment.Left"/>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRichText.#ctor(ClosedXML.Excel.XLCell,ClosedXML.Excel.XLImmutableRichText)">
            <summary>
            Copy ctor to return user modifiable rich text from immutable rich text stored
            in the shared string table.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRow.Height">
            <summary>
            Gets or sets the height of this row.
            </summary>
            <value>
            The width of this row in points.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.ClearHeight">
            <summary>
            Clears the height for the row and defaults it to the spreadsheet row height.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Delete">
            <summary>
            Deletes this row and shifts the rows below this one accordingly.
            </summary>
            <remarks>Don't use in a loop due to poor performance. Use <see cref="M:ClosedXML.Excel.IXLRange.Delete(ClosedXML.Excel.XLShiftDeletedCells)"/> instead.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.RowNumber">
            <summary>
            Gets this row's number
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.InsertRowsBelow(System.Int32)">
            <summary>
            Inserts X number of rows below this one.
            <para>All rows below will be shifted accordingly.</para>
            </summary>
            <param name="numberOfRows">The number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.InsertRowsAbove(System.Int32)">
            <summary>
            Inserts X number of rows above this one.
            <para>This row and all below will be shifted accordingly.</para>
            </summary>
            <param name="numberOfRows">The number of rows to insert.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the height of the row based on its contents, starting from the startColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the height of the row based on its contents, starting from the startColumn and ending at endColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
            <param name="endColumn">The column to end calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AdjustToContents(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adjust height of the column according to the content of the cells.
            </summary>
            <param name="startColumn">Number of a first column whose content is considered.</param>
            <param name="endColumn">Number of a last column whose content is considered.</param>
            <param name="minHeightPt">Minimum height of adjusted column, in points.</param>
            <param name="maxHeightPt">Maximum height of adjusted column, in points.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Hide">
            <summary>Hides this row.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Unhide">
            <summary>Unhides this row.</summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLRow.IsHidden">
            <summary>
            Gets a value indicating whether this row is hidden or not.
            </summary>
            <value>
              <c>true</c> if this row is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLRow.OutlineLevel">
            <summary>
            Gets or sets the outline level of this row.
            </summary>
            <value>
            The outline level of this row.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group">
            <summary>
            Adds this row to the next outline level (Increments the outline level for this row by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group(System.Boolean)">
            <summary>
            Adds this row to the next outline level (Increments the outline level for this row by 1).
            </summary>
            <param name="collapse">If set to <c>true</c> the row will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group(System.Int32)">
            <summary>
            Sets outline level for this row.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for this row.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the row will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Ungroup">
            <summary>
            Adds this row to the previous outline level (decrements the outline level for this row by 1).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Ungroup(System.Boolean)">
            <summary>
            Adds this row to the previous outline level (decrements the outline level for this row by 1).
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove this row from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Collapse">
            <summary>
            Show this row as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cell(System.Int32)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnNumber">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cell(System.String)">
            <summary>
            Gets the cell in the specified column.
            </summary>
            <param name="columnLetter">The cell's column.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cells(System.String)">
            <summary>
            Returns the specified group of cells, separated by commas.
            <para>e.g. Cells("1"), Cells("1:5"), Cells("1,3:5")</para>
            </summary>
            <param name="cellsInRow">The row's cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cells(System.Int32,System.Int32)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Cells(System.String,System.String)">
            <summary>
            Returns the specified group of cells.
            </summary>
            <param name="firstColumn">The first column in the group of cells to return.</param>
            <param name="lastColumn">The last column in the group of cells to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Expand">
            <summary>Expands this row (if it's collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.AddHorizontalPageBreak">
            <summary>
            Adds a horizontal page break after this row.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRow.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this row.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLRows.Height">
            <summary>
            Sets the height of all rows.
            </summary>
            <value>
            The height of all rows.
            </value>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Delete">
            <summary>
            Deletes all rows and shifts the rows below them accordingly.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AdjustToContents">
            <summary>
            Adjusts the height of all rows based on its contents.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AdjustToContents(System.Int32)">
            <summary>
            Adjusts the height of all rows based on its contents, starting from the startColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AdjustToContents(System.Int32,System.Int32)">
            <summary>
            Adjusts the height of all rows based on its contents, starting from the startColumn and ending at endColumn.
            </summary>
            <param name="startColumn">The column to start calculating the row height.</param>
            <param name="endColumn">The column to end calculating the row height.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Hide">
            <summary>
            Hides all rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Unhide">
            <summary>Unhides all rows.</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group">
            <summary>
            Increments the outline level of all rows by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group(System.Boolean)">
            <summary>
            Increments the outline level of all rows by 1.
            </summary>
            <param name="collapse">If set to <c>true</c> the rows will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group(System.Int32)">
            <summary>
            Sets outline level for all rows.
            </summary>
            <param name="outlineLevel">The outline level.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Group(System.Int32,System.Boolean)">
            <summary>
            Sets outline level for all rows.
            </summary>
            <param name="outlineLevel">The outline level.</param>
            <param name="collapse">If set to <c>true</c> the rows will be shown collapsed.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Ungroup">
            <summary>
            Decrements the outline level of all rows by 1.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Ungroup(System.Boolean)">
            <summary>
            Decrements the outline level of all rows by 1.
            </summary>
            <param name="fromAll">If set to <c>true</c> it will remove the rows from all outline levels.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Collapse">
            <summary>
            Show all rows as collapsed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Expand">
            <summary>Expands all rows (if they're collapsed).</summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.AddHorizontalPageBreaks">
            <summary>
            Adds a horizontal page break after these rows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLRows.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these rows.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLRow._flags">
            <summary>
            Don't use directly, use properties.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRow.#ctor(ClosedXML.Excel.XLWorksheet,System.Int32)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLRow.DyDescent">
            <summary>
            Distance in pixels from the bottom of the cells in the current row to the typographical
            baseline of the cell content if, hypothetically, the zoom level for the sheet containing
            this row is 100 percent and the cell has bottom-alignment formatting.
            </summary>
            <remarks>
            If the attribute is set, it sets customHeight to true even if the customHeight is explicitly
            set to false. Custom height means no auto-sizing by Excel on load, so if row has this
            attribute, it stops Excel from auto-sizing the height of a row to fit the content on load.
            </remarks>
        </member>
        <member name="P:ClosedXML.Excel.XLRow.ShowPhonetic">
            <summary>
            Should cells in the row display phonetic? This doesn't actually affect whether the phonetic are
            shown in the row, that depends entirely on the <see cref="P:ClosedXML.Excel.IXLCell.ShowPhonetic"/> property
            of a cell. This property determines whether a new cell in the row will have it's phonetic turned on
            (and also the state of the "Show or hide phonetic" in Excel when whole row is selected).
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLRow.HeightChanged">
            <summary>
            Does row have an individual height or is it derived from the worksheet <see cref="P:ClosedXML.Excel.XLWorksheet.RowHeight"/>?
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLRow.XlRowFlags">
            <summary>
            Flag enum to save space, instead of wasting byte for each flag.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLRows.#ctor(ClosedXML.Excel.XLWorksheet,ClosedXML.Excel.XLStyleValue,System.Collections.Generic.IEnumerable{ClosedXML.Excel.XLRow})">
            <summary>
            Create a new instance of <see cref="T:ClosedXML.Excel.XLRows"/>.
            </summary>
            <param name="worksheet">If worksheet is specified it means that the created instance represents
            all rows on a worksheet so changing its height will affect all rows.</param>
            <param name="defaultStyle">Default style to use when initializing child entries.</param>
            <param name="lazyEnumerable">A predefined enumerator of <see cref="T:ClosedXML.Excel.XLRow"/> to support lazy initialization.</param>
        </member>
        <member name="P:ClosedXML.Excel.SaveOptions.EvaluateFormulasBeforeSaving">
            <summary>
            Evaluate a cells with a formula and save the calculated value along with the formula.
            <list type="bullet">
            <item>
              True - formulas are evaluated and the calculated values are saved to the file.
              If evaluation of a formula throws an exception, value is not saved but file is still saved.
            </item>
            <item>
              False (default) - formulas are not evaluated and the formula cells don't have their values saved to the file.
            </item>
            </list>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.SaveOptions.FilterPrivacy">
            <summary>
            Gets or sets the filter privacy flag. Set to null to leave the current property in saved workbook unchanged
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLSparklineGroup.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Copy this sparkline group to the specified worksheet
            </summary>
            <param name="targetSheet">The worksheet to copy this sparkline group to</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparkline.#ctor(ClosedXML.Excel.IXLSparklineGroup,ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLRange)">
            <summary>
            Create a new sparkline
            </summary>
            <param name="sparklineGroup">The sparkline group to add the sparkline to</param>
            <param name="cell">The cell to place the sparkline in</param>
            <param name="sourceData">The range the sparkline gets data from</param>
        </member>
        <member name="P:ClosedXML.Excel.XLSparklineGroup.Worksheet">
            <summary>
            The worksheet this sparkline group is associated with
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLWorksheet,ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <param name="targetWorksheet">The worksheet the sparkline group is being added to</param>
            <param name="copyFrom">The sparkline group to copy from</param>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLWorksheet,System.String,System.String)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLRange)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLRange,ClosedXML.Excel.IXLRange)">
            <summary>
            Add a new sparkline group copied from an existing sparkline group to the specified worksheet
            </summary>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.Add(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLRange)">
            <summary>
            Add a sparkline to the group.
            </summary>
            <param name="location">The cell to add sparklines to. If it already contains a sparkline
            it will be replaced.</param>
            <param name="sourceData">The range the sparkline gets data from</param>
            <returns>A newly created sparkline.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.CopyFrom(ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Copy the details from a specified sparkline group
            </summary>
            <param name="sparklineGroup">The sparkline group to copy from</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.ClosedXML#Excel#IXLSparklineGroup#CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <inheritdoc cref="M:ClosedXML.Excel.IXLSparklineGroup.CopyTo(ClosedXML.Excel.IXLWorksheet)"/>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.CopyTo(ClosedXML.Excel.XLWorksheet)">
            <inheritdoc cref="M:ClosedXML.Excel.IXLSparklineGroup.CopyTo(ClosedXML.Excel.IXLWorksheet)"/>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.Remove(ClosedXML.Excel.IXLCell)">
            <summary>
            Remove all sparklines in the specified cell from this group
            </summary>
            <param name="cell">The cell to remove sparklines from</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.Remove(ClosedXML.Excel.IXLSparkline)">
            <summary>
            Remove the sparkline from this group
            </summary>
            <param name="sparkline"></param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.RemoveAll">
            <summary>
            Remove all sparklines from this group
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroup.#ctor(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Add a new sparkline group to the specified worksheet
            </summary>
            <param name="targetWorksheet">The worksheet the sparkline group is being added to</param>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Add">
            <summary>
            Add empty sparkline group.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Add(ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Add the sparkline group to the collection.
            </summary>
            <param name="sparklineGroup">The sparkline group to add to the collection</param>
            <returns>The same sparkline group</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.AddCopy(ClosedXML.Excel.IXLSparklineGroup,ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Add a copy of an existing sparkline group to the specified worksheet
            </summary>
            <param name="sparklineGroupToCopy">The sparkline group to copy</param>
            <param name="targetWorksheet">The worksheet the sparkline group is being added to</param>
            <returns>The new sparkline group added</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.CopyTo(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            Copy this sparkline group to a different worksheet
            </summary>
            <param name="targetSheet">The worksheet to copy the sparkline group to</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.GetSparkline(ClosedXML.Excel.IXLCell)">
            <summary>
            Search for the first sparkline that is in the specified cell
            </summary>
            <param name="cell">The cell to find the sparkline for</param>
            <returns>The sparkline in the cell or null if no sparklines are found</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.GetSparklines(ClosedXML.Excel.IXLRangeBase)">
            <summary>
            Find all sparklines located in a given range
            </summary>
            <param name="searchRange">The range to search</param>
            <returns>The sparkline in the cell or null if no sparklines are found</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Remove(ClosedXML.Excel.IXLCell)">
            <summary>
            Remove all sparklines in the specified cell
            </summary>
            <param name="cell">The cell to remove sparklines from</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Remove(ClosedXML.Excel.IXLSparklineGroup)">
            <summary>
            Remove the sparkline group from the worksheet
            </summary>
            <param name="sparklineGroup">The sparkline group to remove</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.Remove(ClosedXML.Excel.IXLSparkline)">
            <summary>
            Remove the sparkline from the worksheet
            </summary>
            <param name="sparkline">The sparkline to remove</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.RemoveAll">
            <summary>
            Remove all sparkline groups and their contents from the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.ShiftColumns(ClosedXML.Excel.XLSheetRange,System.Int32)">
            <summary>
            Shift address of all sparklines to reflect inserted columns before a range.
            </summary>
            <param name="shiftedRange">Range before which will the columns be inserted. Has same worksheet.</param>
            <param name="numberOfColumns">How many columns, can be positive or negative number.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineGroups.ShiftRows(ClosedXML.Excel.XLSheetRange,System.Int32)">
            <summary>
            Shift address of all sparklines to reflect inserted rows before a range.
            </summary>
            <param name="shiftedRange">Range before which will the rows be inserted. Has same worksheet.</param>
            <param name="numberOfRows">How many rows, can be positive or negative number.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.op_Inequality(ClosedXML.Excel.XLSparklineStyle,ClosedXML.Excel.XLSparklineStyle)">
            <summary>Returns a value that indicates whether two <see cref="T:ClosedXML.Excel.XLSparklineStyle" /> objects have different values.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.op_Equality(ClosedXML.Excel.XLSparklineStyle,ClosedXML.Excel.XLSparklineStyle)">
            <summary>Returns a value that indicates whether the values of two <see cref="T:ClosedXML.Excel.XLSparklineStyle" /> objects are equal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.Equals(ClosedXML.Excel.XLSparklineStyle)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLSparklineStyle.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="F:ClosedXML.Excel.XLColor._paletteEntries">
            <summary>
            VML palette entries from MS-OI29500. Excel uses Windows system color scheme to determine the actual colors of a palette
            entry, but we have no way to get them. Win10 doesn't even have a tool, use Classic Color Panel. We will use the default
            values that are default on Windows.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColor.FromRgb(System.Int32)">
            <summary>
            Create a color from RBG hexa number. Alpha will be always set to full opacity.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLColor.FromHexRgb(System.String)">
            <summary>
            Parse a color in a RRGGBB hexadecimal format. It is used
            to parse colors of <c>ST_HexColorRGB</c> type from the XML.
            </summary>
            <param name="hexColorRgb">A 6 character long hexadecimal number.</param>
            <returns>Parsed color with full opacity.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLColor.FromVmlColor(System.String)">
            <summary>
            Parse VML ST_ColorType type from ECMA-376, Part 4 §20.1.2.3.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.Horizontal">
            <summary>
            Gets or sets the cell's horizontal alignment.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.Vertical">
            <summary>
            Gets or sets the cell's vertical alignment.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.Indent">
            <summary>
            Gets or sets the cell's text indentation.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.JustifyLastLine">
            <summary>
            Gets or sets whether the cell's last line is justified or not.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.ReadingOrder">
            <summary>
            Gets or sets the cell's reading order.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.RelativeIndent">
            <summary>
            Gets or sets the cell's relative indent.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.ShrinkToFit">
            <summary>
            Gets or sets whether the cell's font size should decrease to fit the contents.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.TextRotation">
            <summary>
            Gets or sets the cell's text rotation in degrees. Allowed values are -90
            (text is rotated clockwise) to 90 (text is rotated counterclockwise) and
            255 for vertical layout of a text.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.WrapText">
            <summary>
            Gets or sets whether the cell's text should wrap if it doesn't fit.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLAlignment.TopToBottom">
            <summary>
            Gets or sets whether the cell's text should be displayed from to to bottom
            <para>(as opposed to the normal left to right).</para>
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Ansi">
            <summary>
            ASCII character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Default">
            <summary>
            System default character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Symbol">
            <summary>
            Symbol character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Mac">
            <summary>
            Characters used by Macintosh.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.ShiftJIS">
            <summary>
            Japanese character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Hangul">
            <summary>
            Korean character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Hangeul">
            <summary>
            Another common spelling of the Korean character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Johab">
            <summary>
            Korean character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.GB2312">
            <summary>
            Chinese character set used in mainland China.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.ChineseBig5">
            <summary>
            Chinese character set used mostly in Hong Kong SAR and Taiwan.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Greek">
            <summary>
            Greek character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Turkish">
            <summary>
            Turkish character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Vietnamese">
            <summary>
            Vietnamese character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Hebrew">
            <summary>
            Hebrew character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Arabic">
            <summary>
            Arabic character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Baltic">
            <summary>
            Baltic character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Russian">
            <summary>
            Russian character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Thai">
            <summary>
            Thai character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.EastEurope">
            <summary>
            Eastern European character set.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontCharSet.Oem">
            <summary>
            Extended ASCII character set used with disk operating system (DOS) and some Microsoft Windows fonts.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLFontScheme">
            <summary>
            A font theme scheme. Theme has categories of fonts and when the theme changes, texts that are associated with
            the particular theme scheme are switched to a font of a new theme.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontScheme.None">
            <summary>
            Not a part of theme scheme.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontScheme.Major">
            <summary>
            A major font of a theme, generally used for headings.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLFontScheme.Minor">
            <summary>
            A minor font of a theme, generally used to body and paragraphs.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLFont.SetFontCharSet(ClosedXML.Excel.XLFontCharSet)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLFontBase.FontCharSet"/>
        </member>
        <member name="M:ClosedXML.Excel.IXLFont.SetFontScheme(ClosedXML.Excel.XLFontScheme)">
            <inheritdoc cref="P:ClosedXML.Excel.IXLFontBase.FontScheme"/>
        </member>
        <member name="P:ClosedXML.Excel.IXLFontBase.FontCharSet">
            <summary>
            <para>
            Defines an expected character set used by the text of this <c>font</c>. It helps Excel to choose
            a font face, either because requested one isn't present or is unsuitable. Each font file contains
            a list of charsets it is capable of rendering and this property is used to detect whether the charset
            of a text matches the rendering capabilities of a font face and is thus suitable.
            </para>
            <example>
            Example:
            The <c>FontCharSet</c> is <c>XLFontCharSet.Default</c>, but the selected font name is <em>B Mitra</em>
            that contains only arabic alphabet and declares so in its file. Excel will detect this discrepancy and
            choose a different font to display the text. The outcome is that text is not displayed with the <em>B Mitra</em>
            font, but with a different one and user doesn't see persian numbers. To use the <em>B Mitra</em> font,
            this property must be set to <c>XLFontCharSet.Arabic</c> that would match the font declared capabilities.
            </example>
            </summary>
            <remarks>Due to prevalence of unicode fonts, this property is rarely used.</remarks>
        </member>
        <member name="P:ClosedXML.Excel.IXLFontBase.FontScheme">
            <summary>
            Determines a theme font scheme a text belongs to. If the text belongs to a scheme and user changes theme
            in Excel, the font of the text will switch to the new theme font. Scheme font has precedence and will be
            used instead of a set font.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLStyle.IncludeQuotePrefix">
            <summary>
            Should the text values of a cell saved to the file be prefixed by a quote (<c>'</c>) character?
            Has no effect if cell values is not a <see cref="F:ClosedXML.Excel.XLDataType.Text"/>. Doesn't affect values during runtime,
            text values are returned without quote.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.IXLStylized">
            <summary>
            An interface implemented by workbook elements that have a defined <see cref="T:ClosedXML.Excel.IXLStyle"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLStylized.Style">
            <summary>
            Editable style of the workbook element. Modification of this property DOES affect styles of child objects as well - they will
            be changed accordingly. Accessing this property causes a new <see cref="T:ClosedXML.Excel.XLStyle"/> instance generated so use this property
            with caution. If you need only _read_ the style consider using <see cref="P:ClosedXML.Excel.IXLStylized.StyleValue"/> property instead.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLStylized.InnerStyle">
            <summary>
            Editable style of the workbook element. Modification of this property DOES NOT affect styles of child objects.
            Accessing this property causes a new <see cref="T:ClosedXML.Excel.XLStyle"/> instance generated so use this property with caution. If you need
            only _read_ the style consider using <see cref="P:ClosedXML.Excel.IXLStylized.StyleValue"/> property instead.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLStylized.RangesUsed">
            <summary>
            <para>
            Return a collection of ranges that determine outside borders (used by
            <see cref="P:ClosedXML.Excel.XLBorder.OutsideBorder"/>).
            </para>
            <para>
            Return ranges represented by elements. For one element (e.g. workbook, cell,
            column), it should return only the element itself. For element that represent a
            collection of other elements, e.g. <see cref="T:ClosedXML.Excel.XLRows"/>, <see cref="T:ClosedXML.Excel.XLColumns"/>,
            <see cref="T:ClosedXML.Excel.XLCells"/>, it should return range for each element in the collection.
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLStylized.StyleValue">
            <summary>
            Style value representing the current style of the stylized element.
            The value is updated when style is modified (<see cref="T:ClosedXML.Excel.XLStyleValue"/>
            is immutable).
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLStylized.ModifyStyle(System.Func{ClosedXML.Excel.XLStyleKey,ClosedXML.Excel.XLStyleKey})">
            <summary>
            A callback method called when <see cref="P:ClosedXML.Excel.IXLStylized.Style"/> is changed. It should update
            style of the stylized descendants of the stylized element.
            </summary>
            <param name="modification">A method that changes the style from original to modified.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLAlignment.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLAlignmentValue)">
            <summary>
            Create an instance of XLAlignment initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLBorder.#ctor(ClosedXML.Excel.IXLStylized,ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLBorderValue)">
            <summary>
            Create an instance of XLBorder initializing it with the specified value.
            </summary>
            <param name="container">Container the border is applied to.</param>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLBorder.RestoreOutsideBorder">
            <summary>
            Helper class that remembers outside border state before editing (in constructor) and restore afterwards (on disposing).
            It presumes that size of the range does not change during the editing, else it will fail.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLFill.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLFillValue)">
            <summary>
            Create an instance of XLFill initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLFont.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLFontValue)">
            <summary>
            Create an instance of XLFont initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLFont.#ctor(ClosedXML.Excel.XLStyle)">
            <summary>
            Create a new font that is attached to a style and the changes to the font object are propagated to the style.
            </summary>
            <param name="style">The container style that will be modified by changes of created <c>XLFont</c>.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLFont.#ctor(ClosedXML.Excel.IXLFontBase)">
            <summary>
            Create a new font. The changes to the object are not propagated to a style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLNumberFormat.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLNumberFormatValue)">
            <summary>
            Create an instance of XLNumberFormat initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLNumberFormatKey.CustomFormatNumberId">
            <summary>
            The value <c>-1</c> that is set to <see cref="P:ClosedXML.Excel.XLNumberFormatKey.NumberFormatId"/>, if <see cref="P:ClosedXML.Excel.XLNumberFormatKey.Format"/> is
            set to user-defined format (non-empty string).
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLNumberFormatKey.NumberFormatId">
            <summary>
            Number format identifier of predefined format, see <see cref="T:ClosedXML.Excel.XLPredefinedFormat"/>.
            If -1, the format is custom and stored in the <see cref="P:ClosedXML.Excel.XLNumberFormatKey.Format"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLNumberFormatValue.DefaultKey">
            <summary>
            <em>General</em> number format.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLNumberFormatValue.NumberFormatId">
            <summary>
            Id of the number format. Every workbook has <see cref="F:ClosedXML.Excel.XLConstants.NumberOfBuiltInStyles"/>
            built-int formats that start at 0 (<em>General</em> format). The built-int formats are
            not explicitly written and might differ depending on culture. Custom number formats
            have a valid <see cref="P:ClosedXML.Excel.XLNumberFormatValue.Format"/> and the id is <c>-1</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLPredefinedFormat">
            <summary>
            Reference point of date/number formats available.
            See more at: https://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.numberingformat.aspx
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLPredefinedFormat.General">
            <summary>
            General
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.General">
            <summary>
            General
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Integer">
            <summary>
            0
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2">
            <summary>
            0.00
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.IntegerWithSeparator">
            <summary>
            #,##0
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2WithSeparator">
            <summary>
            #,##0.00
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.PercentInteger">
            <summary>
            0%
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.PercentPrecision2">
            <summary>
            0.00%
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.ScientificPrecision2">
            <summary>
            0.00E+00
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.FractionPrecision1">
            <summary>
            # ?/?
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.FractionPrecision2">
            <summary>
            # ??/??
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.IntegerWithSeparatorAndParens">
            <summary>
            #,##0 ,(#,##0)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.IntegerWithSeparatorAndParensRed">
            <summary>
            #,##0 ,[Red](#,##0)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2WithSeparatorAndParens">
            <summary>
            #,##0.00,(#,##0.00)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Precision2WithSeparatorAndParensRed">
            <summary>
            #,##0.00,[Red](#,##0.00)
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.ScientificUpToHundredsAndPrecision1">
            <summary>
            ##0.0E+0
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.Number.Text">
            <summary>
            @
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.General">
            <summary>
            General
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.DayMonthYear4WithSlashes">
            <summary>
            d/m/yyyy
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.DayMonthAbbrYear2WithDashes">
            <summary>
            d-mmm-yy
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.DayMonthAbbrWithDash">
            <summary>
            d-mmm
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MonthAbbrYear2WithDash">
            <summary>
            mmm-yy
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour12MinutesAmPm">
            <summary>
            h:mm tt
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour12MinutesSecondsAmPm">
            <summary>
            h:mm:ss tt
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour24Minutes">
            <summary>
            H:mm
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour24MinutesSeconds">
            <summary>
            H:mm:ss
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MonthDayYear4WithDashesHour24Minutes">
            <summary>
            m/d/yyyy H:mm
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MinutesSeconds">
            <summary>
            mm:ss
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Hour12MinutesSeconds">
            <summary>
            [h]:mm:ss
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.MinutesSecondsMillis1">
            <summary>
            mm:ss.0
            </summary>
            <remarks>
            OOXML specification is missing colon.
            </remarks>
        </member>
        <member name="F:ClosedXML.Excel.XLPredefinedFormat.DateTime.Text">
            <summary>
            @
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLProtection.#ctor(ClosedXML.Excel.XLStyle,ClosedXML.Excel.XLProtectionValue)">
            <summary>
            Create an instance of XLProtection initializing it with the specified value.
            </summary>
            <param name="style">Style to attach the new instance to.</param>
            <param name="value">Style value to use.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLStyle.#ctor(ClosedXML.Excel.XLStyleValue)">
            <summary>
            To initialize XLStyle.Default only
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLStyleValue">
            <summary>
            An immutable style value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLStyleValue.Combine(ClosedXML.Excel.XLStyleValue,ClosedXML.Excel.XLStyleValue,ClosedXML.Excel.XLStyleValue)">
            <summary>
            Combine row and column styles into a combined style. This style is used by non-pinged
            cells of a worksheet.
            </summary>
        </member>
        <member name="T:ClosedXML.Excel.XLStylizedBase">
            <summary>
            Base class for any workbook element that has or may have a style.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.StyleValue">
            <summary>
            Read-only style property.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.ClosedXML#Excel#IXLStylized#StyleValue">
            <inheritdoc cref="P:ClosedXML.Excel.IXLStylized.StyleValue"/>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.Style">
            <inheritdoc cref="P:ClosedXML.Excel.IXLStylized.Style"/>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.InnerStyle">
            <inheritdoc cref="P:ClosedXML.Excel.IXLStylized.InnerStyle"/>
        </member>
        <member name="P:ClosedXML.Excel.XLStylizedBase.Children">
            <summary>
            Get a collection of stylized entities which current entity's style changes should be propagated to.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLStylizedBase.SetStyle(ClosedXML.Excel.XLStyleValue,System.Boolean)">
            <summary>
            Apply specified style to the container.
            </summary>
            <param name="value">Style to apply.</param>
            <param name="propagate">Whether or not propagate the style to inner ranges.</param>
        </member>
        <member name="P:ClosedXML.Excel.IXLTable.Name">
            <summary>
            Change the name of a table. Structural references to the table are not updated.
            </summary>
            <exception cref="T:System.ArgumentException">If the new table name is already used by other table in the sheet.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this table.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Field(System.String)">
            <summary>
            Get field of the table.
            </summary>
            <param name="fieldName">Name of the field. Field names are case-insensitive.</param>
            <returns>Requested field.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Table doesn't contain <paramref name="fieldName"/> field.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Appends the IEnumerable data elements and returns the range of the new rows.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData(System.Collections.IEnumerable,System.Boolean,System.Boolean)">
            <summary>
            Appends the IEnumerable data elements and returns the range of the new rows.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="transpose">if set to <c>true</c> the data will be transposed before inserting.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData(System.Data.DataTable,System.Boolean)">
            <summary>
            Appends the data of a data table and returns the range of the new rows.
            </summary>
            <param name="dataTable">The data table.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AppendData``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Appends the IEnumerable data elements and returns the range of the new rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The table data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The range of the new rows.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Replaces the IEnumerable data elements and returns the table's data range.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData(System.Collections.IEnumerable,System.Boolean,System.Boolean)">
            <summary>
            Replaces the IEnumerable data elements and returns the table's data range.
            </summary>
            <param name="data">The IEnumerable data.</param>
            <param name="transpose">if set to <c>true</c> the data will be transposed before inserting.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData(System.Data.DataTable,System.Boolean)">
            <summary>
            Replaces the data from the records of a data table and returns the table's data range.
            </summary>
            <param name="dataTable">The data table.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.ReplaceData``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Replaces the IEnumerable data elements as a table and the table's data range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The table data.</param>
            <param name="propagateExtraColumns">if set to <c>true</c> propagate extra columns' values and formulas.</param>
            <returns>
            The table's data range.
            </returns>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLRange)">
            <summary>
            Resizes the table to the specified range address.
            </summary>
            <param name="range">The new table range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLRangeAddress)">
            <summary>
            Resizes the table to the specified range address.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(System.String)">
            <summary>
            Resizes the table to the specified range address.
            </summary>
            <param name="rangeAddress">The range boundaries.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLCell,ClosedXML.Excel.IXLCell)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCell">The first cell in the range.</param>
            <param name="lastCell">The last cell in the range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(System.String,System.String)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress">The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(ClosedXML.Excel.IXLAddress,ClosedXML.Excel.IXLAddress)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCellAddress">The first cell address in the worksheet.</param>
            <param name="lastCellAddress">The last cell address in the worksheet.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the table to the specified range.
            </summary>
            <param name="firstCellRow">The first cell's row of the range to return.</param>
            <param name="firstCellColumn">The first cell's column of the range to return.</param>
            <param name="lastCellRow">The last cell's row of the range to return.</param>
            <param name="lastCellColumn">The last cell's column of the range to return.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AsDynamicEnumerable">
            <summary>
            Converts the table to an enumerable of dynamic objects
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTable.AsNativeDataTable">
            <summary>
            Converts the table to a standard .NET System.Data.DataTable
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Column">
            <summary>
            Gets the corresponding column for this table field.
            Includes the header and footer cells
            </summary>
            <value>
            The column.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.DataCells">
            <summary>
            Gets the collection of data cells for this field
            Excludes the header and footer cells
            </summary>
            <value>
            The data cells
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsCell">
            <summary>
            Gets the footer cell for the table field. 
            </summary>
            <value>
            The footer cell. <c>null</c>, if the table
            doesn't have set <see cref="P:ClosedXML.Excel.IXLTable.ShowTotalsRow"/>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.HeaderCell">
            <summary>
            Gets the header cell for the table field.
            </summary>
            <value>
            The header cell.<c>null</c>, if the table
            doesn't have set <see cref="P:ClosedXML.Excel.IXLTable.ShowHeaderRow"/>.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Index">
            <summary>
            Gets the index of the column (0-based).
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Name">
            <summary>
            Gets or sets the name/header of this table field.
            The corresponding header cell's value will change if you set this.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.Table">
            <summary>
            Gets the underlying table for this table field.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowFormulaA1">
            <summary>
            Gets or sets the totals row formula in A1 format.
            </summary>
            <value>
            The totals row formula a1.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowFormulaR1C1">
            <summary>
            Gets or sets the totals row formula in R1C1 format.
            </summary>
            <value>
            The totals row formula r1 c1.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowFunction">
            <summary>
            Gets or sets the totals row function.
            </summary>
            <value>
            The totals row function.
            </value>
        </member>
        <member name="P:ClosedXML.Excel.IXLTableField.TotalsRowLabel">
            <summary>
            Gets or sets the totals row label (the leftmost cell in the totals row).
            </summary>
            <value>
            The totals row label.
            </value>
            <exception>If the totals row is not displayed for the table.</exception>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.Delete">
            <summary>
            Deletes this table field from the table.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.IsConsistentDataType">
            <summary>
            Determines whether all cells this table field have a consistent data type.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.IsConsistentFormula">
            <summary>
            Determines whether all cells this table field have a consistent formula.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableField.IsConsistentStyle">
            <summary>
            Determines whether all cells this table field have a consistent style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRange.Row(System.Int32)">
            <summary>
            Rows the specified row.
            </summary>
            <param name="row">1-based row number relative to the first row of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRange.Rows(System.Int32,System.Int32)">
            <summary>
            Returns a subset of the rows
            </summary>
            <param name="firstRow">The first row to return. 1-based row number relative to the first row of this range.</param>
            <param name="lastRow">The last row to return. 1-based row number relative to the first row of this range.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRow.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of this row.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.Add(ClosedXML.Excel.IXLTableRow)">
            <summary>
            Adds a table row to this group.
            </summary>
            <param name="tableRow">The row table to add.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.Cells">
            <summary>
            Returns the collection of cells.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.CellsUsed">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.CellsUsed(ClosedXML.Excel.XLCellsUsedOptions)">
            <summary>
            Returns the collection of cells that have a value.
            </summary>
            <param name="options">The options to determine whether a cell is used.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTableRows.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these rows.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.IXLTables.Clear(ClosedXML.Excel.XLClearOptions)">
            <summary>
            Clears the contents of these tables.
            </summary>
            <param name="clearOptions">Specify what you want to clear.</param>
        </member>
        <member name="M:ClosedXML.Excel.TableNameGenerator.GetNewTableName(ClosedXML.Excel.IXLWorkbook,System.String)">
            <summary>
            Generate a non conflicting table name for the workbook
            </summary>
            <param name="workbook">Workbook to generate name for</param>
            <param name="baseTableName">"Base Table Name</param>
            <returns>Name for the table</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLTable.#ctor(ClosedXML.Excel.XLRangeParameters)">
            <summary>
            The direct constructor should only be used in <see cref="P:ClosedXML.Excel.XLWorksheet.RangeFactory"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLTable.Area">
            <summary>
            Area of the range, including headings and totals, if table has them.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLTable.RefreshFieldsFromCells(ClosedXML.Excel.XLSheetRange)">
            <summary>
            Update headers fields and totals fields by data from the cells. Do not add a new fields or names.
            </summary>
            <param name="refreshArea">Area that contains cells with changed values that might affect header and totals fields.</param>
        </member>
        <member name="T:ClosedXML.Excel.XLCellValue">
            <summary>
            A value of a single cell. It contains a value a specific <see cref="P:ClosedXML.Excel.XLCellValue.Type"/>.
            Structure provides following group of methods:
            <list type="bullet">
              <item><c>Is*</c> properties to check type (<see cref="P:ClosedXML.Excel.XLCellValue.IsNumber"/>, <see cref="P:ClosedXML.Excel.XLCellValue.IsBlank"/>...)</item>
              <item><c>Get*</c> methods that return the stored value or throw <see cref="T:System.InvalidCastException"/> for incorrect type.</item>
              <item>Explicit operators to convert <c>XLCellValue</c> to a concrete type. It is an equivalent of <c>Get*</c> methods.</item>
              <item><c>TryConvert</c> methods to try to get value of a specific type, even if the value is of a different type.</item>
            </list>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.Type">
            <summary>
            Type of the value.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsBlank">
            <summary>
            Is the type of value <c>Blank</c>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsBoolean">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsNumber">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Number"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsText">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Text"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsError">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.Error"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsDateTime">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsTimeSpan">
            <summary>
            Is the type of value <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>?
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLCellValue.IsUnifiedNumber">
            <summary>
            Is the value <see cref="F:ClosedXML.Excel.XLDataType.Number"/> or <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/> or <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.FromObject(System.Object,System.IFormatProvider)">
            <summary>
            Creates an <see cref="T:ClosedXML.Excel.XLCellValue"/> from an <see cref="T:System.Object"/>. If the type of the object has an implicit conversion operator then it is used.
            Otherwise, the <see cref="M:System.Convert.ToString(System.Object,System.IFormatProvider)"/> method is used to convert the provided object to a string.
            <para/>
            The following types and their nullable counterparts are supported without requiring to be converted to a string:
            <list type="bullet">
              <item><see cref="T:ClosedXML.Excel.Blank"/></item>
              <item><see cref="T:System.Boolean"/></item>
              <item><see cref="T:System.String"/></item>
              <item><see cref="T:ClosedXML.Excel.XLError"/></item>
              <item><see cref="T:System.DateTime"/></item>
              <item><see cref="T:System.TimeSpan"/></item>
              <item><see cref="T:System.SByte"/></item>
              <item><see cref="T:System.Byte"/></item>
              <item><see cref="T:System.Int16"/></item>
              <item><see cref="T:System.UInt16"/></item>
              <item><see cref="T:System.Int32"/></item>
              <item><see cref="T:System.UInt32"/></item>
              <item><see cref="T:System.Int64"/></item>
              <item><see cref="T:System.UInt64"/></item>
              <item><see cref="T:System.Single"/></item>
              <item><see cref="T:System.Double"/></item>
              <item><see cref="T:System.Decimal"/></item>
            </list>
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:ClosedXML.Excel.XLCellValue"/> representation of the object.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.FromInsertedObject(System.Object)">
            <summary>
            A function used during data insertion to convert an <c>object</c> to <c>XLCellValue</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.FromText(System.String,System.Globalization.CultureInfo)">
            <summary>
            Try to convert a string into a string value, doing your best. If no other type can be
            extracted, consider it a text.
            </summary>
            <param name="text">Text to parse into a value.</param>
            <param name="culture">Culture used to parse numbers.</param>
            <returns>Parsed value.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~ClosedXML.Excel.Blank">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetBlank"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~System.Boolean">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetBoolean"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~System.Double">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetNumber"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~System.String">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetText"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Explicit(ClosedXML.Excel.XLCellValue)~ClosedXML.Excel.XLError">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetError"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Implicit(ClosedXML.Excel.XLCellValue)~System.DateTime">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetDateTime"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.op_Implicit(ClosedXML.Excel.XLCellValue)~System.TimeSpan">
            <inheritdoc cref="M:ClosedXML.Excel.XLCellValue.GetTimeSpan"/>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetBlank">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Blank"/>,
            return <see cref="F:ClosedXML.Excel.Blank.Value"/>, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetBoolean">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/>,
            return logical, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetNumber">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Number"/>,
            return number, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetText">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Text"/>,
            return text, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetError">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.Error"/>,
            return error, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetDateTime">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>,
            return date time, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetTimeSpan">
            <summary>
            If the value is of type <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>,
            return time span, otherwise throw <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.GetUnifiedNumber">
            <summary>
            Get a number, either directly from type number or from serialized time span
            or serialized date time.
            </summary>
            <exception cref="T:System.InvalidCastException">If type is not <see cref="F:ClosedXML.Excel.XLDataType.Number"/> or
            <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/> or <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>.</exception>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.ToString">
            <summary>
            Return text representation of a value in current culture.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.ToString(System.Globalization.CultureInfo)">
            <summary>
            Return text representation of a value in the specified culture.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.Equals(System.String)">
            <summary>
            Is the cell value text and is equal to the <paramref name="other"/>?
            Text comparison is case sensitive.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryGetText(System.String@)">
            <summary>
            Get a value, if it is a <see cref="F:ClosedXML.Excel.XLDataType.Text"/>.
            </summary>
            <returns>True if value was retrieved, false otherwise.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(ClosedXML.Excel.Blank@)">
            <summary>
            Try to convert the value to a <see cref="F:ClosedXML.Excel.XLDataType.Blank"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Blank"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Text"/> and the text is empty.</item>
            </list>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Boolean@)">
            <summary>
            Try to convert the value to a <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Boolean"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Number"/>, then the value of <c>0</c> means <c>false</c> and any other value is <c>true</c>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Text"/> and the value is <c>TRUE</c> or <c>FALSE</c> (case insensitive). Note that calc engine
              generally doesn't coerce text to logical (e.g. arithmetic operations), though it happens in most function arguments (e.g.
              <c>IF</c> or <c>AND</c>).</item>
            </list>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.Double@,System.Globalization.CultureInfo)">
            <summary>
            Try to convert the value to a <see cref="F:ClosedXML.Excel.XLDataType.Number"/> and return it.
            <list type="bullet">
              <item>Double value - return the value.</item>
              <item>Boolean value - return the <c>0</c> for <c>TRUE</c> and <c>1</c> for <c>FALSE</c>.</item>
              <item>Text value - use the <c>VALUE</c> semantic to convert a text to a number.</item>
              <item>DateTime value - return the serial date time number.</item>
              <item>TimeSpan value - return the serial time span value.</item>
            </list>
            </summary>
            <remarks>Note that the coercion is current culture specific (e.g. decimal separators can differ).</remarks>
            <param name="value">The converted value. Result is never <c>infinity</c> or <c>NaN</c>.</param>
            <param name="culture">The culture used to convert the value for texts.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.DateTime@)">
            <summary>
            Try to convert the value to a <see cref="T:System.DateTime"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.DateTime"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Number"/> and when the number is interpreted is a serial date time, it falls within the DateTime range.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/> and when the number is interpreted is a serial date time, it falls within the DateTime range.</item>
            </list>
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLCellValue.TryConvert(System.TimeSpan@,System.Globalization.CultureInfo)">
            <summary>
            Try to convert the value to a <see cref="T:System.TimeSpan"/> and return it.
            Method succeeds, when value is
            <list type="bullet">
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.TimeSpan"/>.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Number"/>, the number is interpreted is a time span date time.</item>
              <item>Type <see cref="F:ClosedXML.Excel.XLDataType.Text"/> and it can be parsed as a time span (accepts even hours over 24 hours).</item>
            </list>
            </summary>
            <param name="value">The converted value.</param>
            <param name="culture">The culture used to get time and decimal separators.</param>
        </member>
        <member name="F:ClosedXML.Excel.XLCellSetValueBehavior.Smart">
            <summary>
              Analyze input string and convert value. For avoid analyzing use escape symbol '
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLCellSetValueBehavior.Simple">
            <summary>
              Direct set value. If value has unsupported type - value will be stored as string returned by <see
               cref = "M:System.Object.ToString" />
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.CellSetValueBehavior">
            <summary>
              Behavior for <see cref = "M:ClosedXML.Excel.IXLCell.set_Value(ClosedXML.Excel.XLCellValue)" />
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Worksheets">
            <summary>
              Gets an object to manipulate the worksheets.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.DefinedNames">
            <summary>
              Gets an object to manipulate this workbook's named ranges.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Theme">
            <summary>
              Gets an object to manipulate this workbook's theme.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.PivotCaches">
            <summary>
            All pivot caches in the workbook, whether they have a pivot table or not.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Style">
            <summary>
              Gets or sets the default style for the workbook.
              <para>All new worksheets will use this style.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.RowHeight">
            <summary>
              Gets or sets the default row height for the workbook.
              <para>All new worksheets will use this row height.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.ColumnWidth">
            <summary>
              Gets or sets the default column width for the workbook.
              <para>All new worksheets will use this column width.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.PageOptions">
            <summary>
              Gets or sets the default page options for the workbook.
              <para>All new worksheets will use these page options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Outline">
            <summary>
              Gets or sets the default outline options for the workbook.
              <para>All new worksheets will use these outline options.</para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.Properties">
            <summary>
              Gets or sets the workbook's properties.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.CalculateMode">
            <summary>
              Gets or sets the workbook's calculation mode.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.ReferenceStyle">
            <summary>
              Gets or sets the workbook's reference style.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.DefinedName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.Save">
            <summary>
              Saves the current workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.Save(System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook and optionally performs validation
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.String)">
            <summary>
              Saves the current workbook to a file.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a file and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.IO.Stream)">
            <summary>
              Saves the current workbook to a stream.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SaveAs(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
              Saves the current workbook to a stream and optionally validates it.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.TryGetTable(System.String,ClosedXML.Excel.XLTable@,System.StringComparison)">
            <summary>
            Try to find a table with <paramref name="tableName"/> in a workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.TryGetTable(ClosedXML.Excel.XLBookArea,ClosedXML.Excel.XLTable@)">
            <summary>
            Try to find a table that covers same area as the <paramref name="area"/> in a workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.Search(System.String,System.Globalization.CompareOptions,System.Boolean)">
            <summary>
            Searches the cells' contents for a given piece of text
            </summary>
            <param name="searchText">The search text.</param>
            <param name="compareOptions">The compare options.</param>
            <param name="searchFormulae">if set to <c>true</c> search formulae instead of cell values.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.#ctor">
            <summary>
              Creates a new Excel workbook.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.#ctor(System.String)">
            <summary>
              Opens an existing workbook from a file.
            </summary>
            <param name = "file">The file to open.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.#ctor(System.IO.Stream)">
            <summary>
              Opens an existing workbook from a stream.
            </summary>
            <param name = "stream">The stream to open.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.RecalculateAllFormulas">
            <summary>
            Force recalculation of all cell formulas.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.EvaluateExpr(System.String)">
            <summary>
            Evaluate a formula and return a value. Formulas with references don't work and culture used for conversion is invariant.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.NotifyWorksheetAdded(ClosedXML.Excel.XLWorksheet)">
            <summary>
            Notify various component of a workbook that sheet has been added.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.NotifyWorksheetDeleting(ClosedXML.Excel.XLWorksheet)">
            <summary>
            Notify various component of a workbook that sheet is about to be removed.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.CalculateColumnWidth(System.Double,ClosedXML.Excel.IXLFont,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Calculate expected column width as a number displayed in the column in Excel from
            number of characters that should fit into the width and a font.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.SetCellText(ClosedXML.Excel.XLCell,DocumentFormat.OpenXml.Spreadsheet.RstType)">
            <summary>
            Parses the cell value for normal or rich text
            Input element should either be a shared string or inline string
            </summary>
            <param name="xlCell">The cell.</param>
            <param name="element">The element (either a shared string or inline string)</param>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.LoadConditionalFormatting(DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting,ClosedXML.Excel.XLWorksheet,System.Collections.Generic.Dictionary{System.Int32,DocumentFormat.OpenXml.Spreadsheet.DifferentialFormat},ClosedXML.Excel.IO.LoadContext)">
            <summary>
            Loads the conditional formatting.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.SaveContext.PivotSourceCacheId">
            <summary>
            A free id that can be used by the workbook to reference to a pivot cache.
            The <c>PivotCaches</c> element in a workbook connects the parts with pivot
            cache parts.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.SaveContext.PivotSources">
            <summary>
            A dictionary of extra info for pivot during saving. The key is <see cref="P:ClosedXML.Excel.XLPivotCache.Guid"/>.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorkbook.SaveContext.SstMap">
            <summary>
            A map of shared string ids. The index is the actual index from sharedStringId and
            value is an mapped stringId to write to a file. The mapped stringId has no gaps
            between ids.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorkbook.RelIdGenerator.AddExistingValues(DocumentFormat.OpenXml.Packaging.WorkbookPart,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Add all existing rel ids present on the parts or workbook to the generator, so they are not duplicated again.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLWorksheet.InvalidAddress">
            <summary>
            Fake address to be used everywhere the invalid address is needed.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLWorksheet.LegacyDrawingId">
            <summary>
            Reference to a VML that contains notes, forms controls and so on. All such things are generally unified into
            a single legacy VML file, set during load/save.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorksheet.SheetId">
            <summary>
            <para>
            The id of a sheet that is unique across the workbook, kept across load/save.
            The ids of sheets are not reused. That is important for referencing the sheet
            range/point through sheetId. If sheetIds were reused, references would refer
            to the wrong sheet after the original sheetId was reused. Excel also doesn't
            reuse sheetIds.
            </para>
            <para>
            Referencing sheet through non-reused sheetIds means that reference can survive
            sheet renaming without any changes. Always &gt; 0 (Excel will crash on 0).
            </para>
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorksheet.RelId">
            <summary>
            A cached <c>r:id</c> of the sheet from the file. If the sheet is a new one (not
            yet saved), the value is null until workbook is saved. Use <see cref="P:ClosedXML.Excel.XLWorksheet.SheetId"/>
            instead is possible. Mostly for removing deleted sheet parts during save.
            </summary>
        </member>
        <member name="P:ClosedXML.Excel.XLWorksheet.ActiveCell">
            <summary>
            Address of active cell/cursor in the worksheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Get cell or null, if cell doesn't exist.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.RangeRow(ClosedXML.Excel.XLRangeAddress,ClosedXML.Excel.IXLStyle)">
            <summary>
            Get a range row from the shared repository or create a new one.
            </summary>
            <param name="address">Address of range row.</param>
            <param name="defaultStyle">Style to apply. If null the worksheet's style is applied.</param>
            <returns>Range row with the specified address.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.RangeColumn(ClosedXML.Excel.XLRangeAddress,ClosedXML.Excel.IXLStyle)">
            <summary>
            Get a range column from the shared repository or create a new one.
            </summary>
            <param name="address">Address of range column.</param>
            <param name="defaultStyle">Style to apply. If null the worksheet's style is applied.</param>
            <returns>Range column with the specified address.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.GetStyleValue(ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get the actual style for a point in the sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLWorksheet.GetStyleForValue(ClosedXML.Excel.XLCellValue,ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Get a style that should be used for a <paramref name="value"/>,
            if the value is set to the <paramref name="point"/>.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLWorksheets._nextSheetId">
            <summary>
            SheetId that will be assigned to next created sheet.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.DoubleExtensions.RoundToInt(System.Double)">
            <summary>
            Round the number to the integer.
            </summary>
            <remarks>A helper method to avoid need to specify the midpoint rounding and casting each time.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.DoubleExtensions.Round(System.Double,System.Int32)">
            <summary>
            Round the number to specified number of digits.
            </summary>
            <remarks>A helper method to avoid need to specify the midpoint rounding each time.</remarks>
        </member>
        <member name="M:ClosedXML.Excel.EnumerableExtensions.SkipLast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Skip last element of a sequence.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.EnumerableExtensions.WhereNotNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Select all <typeparamref name="TItem"/> that are not null.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IntegerExtensions.GetHighestSetBitBelow(System.UInt32,System.Int32)">
            <summary>
            Get index of highest set bit &lt;= to <paramref name="maximalIndex"/> or -1 if no such bit.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IntegerExtensions.GetLowestSetBitAbove(System.UInt32,System.Int32)">
            <summary>
            Get index of lowest set bit &gt;= to <paramref name="minimalIndex"/> or -1 if no such bit.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.IntegerExtensions.GetHighestSetBit(System.UInt32)">
            <summary>
            Get highest set bit index or -1 if no bit is set.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.StringExtensions.ToCodePoints(System.ReadOnlySpan{System.Char},System.Span{System.Int32})">
            <summary>
            Convert a string (containing code units) into code points.
            Surrogate pairs of code units are joined to code points.
            </summary>
            <param name="text">UTF-16 code units to convert.</param>
            <param name="output">Output containing code points. Must always be able to fit whole <paramref name="text"/>.</param>
            <returns>Number of code points in the <paramref name="output"/>.</returns>
        </member>
        <member name="M:ClosedXML.Excel.StringExtensions.TrySliceNewLine(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Is the string a new line of any kind (widnows/unix/mac)?
            </summary>
            <param name="text">Input text to check for EOL at the beginning.</param>
            <param name="length">Length of EOL chars.</param>
            <returns>True, if text has EOL at the beginning.</returns>
        </member>
        <member name="M:ClosedXML.Excel.StringExtensions.ToMagicNumber(System.String)">
            <summary>
            Convert a magic text to a number, where the first letter is in the highest byte of the number.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.TimeSpanExtensions.ToExcelString(System.TimeSpan,System.Globalization.CultureInfo)">
            <summary>
            Return a string representation of a TimeSpan that can be parsed by an Excel through text-to-number coercion.
            </summary>
            <remarks>
            Excel can convert time span string back to a number, but only if it doesn't has days in the string, only hours.
            It's an opposite of <see cref="T:ClosedXML.Excel.CalcEngine.TimeSpanParser"/>.
            </remarks>
        </member>
        <member name="T:ClosedXML.Excel.XLHelper">
            <summary>
            	Common methods
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLHelper.SheetComparer">
            <summary>
            Comparer used to compare sheet names.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLHelper.NameComparer">
            <summary>
            Comparer used to compare defined names.
            </summary>
        </member>
        <member name="F:ClosedXML.Excel.XLHelper.FunctionComparer">
            <summary>
            Comparer of function names.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.GetColumnNumberFromLetter(System.String)">
            <summary>
            Gets the column number of a given column letter.
            </summary>
            <param name="columnLetter"> The column letter to translate into a column number. </param>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.GetColumnLetterFromNumber(System.Int32,System.Boolean)">
            <summary>
            Gets the column letter of a given column number.
            </summary>
            <param name="columnNumber">The column number to translate into a column letter.</param>
            <param name="trimToAllowed">if set to <c>true</c> the column letter will be restricted to the allowed range.</param>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.GetTimeSpan(System.Double)">
            <summary>
            A backward compatible version of <see cref="M:System.TimeSpan.FromDays(System.Double)"/> that returns a value
            rounded to milliseconds. In .Net Core 3.0 the behavior has changed and timespan includes microseconds
            as well. As a result, the value 1:12:30 saved on one machine could become 1:12:29.999999 on another.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.PixelToNoC(System.Int32,System.Int32)">
            <summary>
            Convert size in pixels to a size in NoC (number of characters).
            </summary>
            <param name="px">Size in pixels.</param>
            <param name="mdw">Size of maximum digit width in pixels.</param>
            <returns>Size in NoC.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.NoCToPixels(System.Double,System.Int32)">
            <summary>
            Convert size in NoC to size in pixels.
            </summary>
            <param name="noc">Size in number of characters.</param>
            <param name="mdw">Maximum digit width in pixels.</param>
            <returns>Size in pixels (not rounded).</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.NoCToPixels(System.Double,ClosedXML.Excel.IXLFont,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Convert size in number of characters to pixels.
            </summary>
            <param name="noc">Width</param>
            <param name="font">Font used to determine mdw.</param>
            <param name="workbook">Workbook for dpi and graphic engine.</param>
            <returns>Width in pixels.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.WidthToPixels(System.Double,System.Int32)">
            <summary>
            Convert width to pixels.
            </summary>
            <param name="width">Width from the source file, not NoC that is displayed in Excel as a width.</param>
            <param name="mdw"></param>
            <returns>Number of pixels.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.ConvertWidthToNoC(System.Double,ClosedXML.Excel.IXLFont,ClosedXML.Excel.XLWorkbook)">
            <summary>
            Convert width (as a multiple of MDWs) into a NoCs (number displayed in Excel).
            </summary>
            <param name="width">Width in MDWs to convert.</param>
            <param name="font">Font used to determine MDW.</param>
            <param name="workbook">Workbook</param>
            <returns>Width as a number of NoC.</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.DegToRad(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.CreateSafeSheetName(System.String,System.Char)">
            <summary>
            Creates a valid sheet name, which conforms to the following rules.
            A sheet name:
            is never null,
            has minimum length of 1 and
            maximum length of 31,
            doesn't contain special chars: (: 0x0000 0x0003 / \ ? * ] [).
            Sheet names must not begin or end with ' (apostrophe)
            </summary>
            <param name="nameProposal">can be any string, will be truncated if necessary, allowed to be null</param>
            <param name="replaceChar">the char to replace invalid characters.</param>
            <returns>a valid string, "empty" if too short, "null" if null</returns>
        </member>
        <member name="M:ClosedXML.Excel.XLHelper.ValidateSheetName(System.String)">
             <summary>
             Validates the name of the sheet.
             The character count MUST be greater than or equal to 1 and less than or equal to 31.
             The string MUST NOT contain the any of the following characters:
             - 0x0000
             - 0x0003
             - colon (:)
             - backslash(\)
             - asterisk(*)
             - question mark(?)
             - forward slash(/)
             - opening square bracket([)
             - closing square bracket(])
             The string MUST NOT begin or end with the single quote(') character.
             </summary>
             <param name="sheetName">Name of the sheet.</param>
             <exception cref="T:System.ArgumentException">
             </exception>
            
        </member>
        <member name="M:ClosedXML.Extensions.OpenXmlPartReaderExtensions.GetCellRefAttribute(System.Collections.ObjectModel.ReadOnlyCollection{DocumentFormat.OpenXml.OpenXmlAttribute},System.String)">
            <summary>
            Get value of attribute with type <c>ST_CellRef</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Extensions.OpenXmlPartReaderExtensions.GetRefAttribute(System.Collections.ObjectModel.ReadOnlyCollection{DocumentFormat.OpenXml.OpenXmlAttribute},System.String)">
            <summary>
            Get value of attribute with type <c>ST_Ref</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Extensions.ReferenceAreaExtensions">
            <summary>
            Extensions method for <see cref="T:ClosedXML.Parser.ReferenceArea"/>.
            </summary>
        </member>
        <member name="M:ClosedXML.Extensions.ReferenceAreaExtensions.ToSheetRange(ClosedXML.Parser.ReferenceArea,ClosedXML.Excel.XLSheetPoint)">
            <summary>
            Convert area to an absolute sheet range (regardless if the area is A1 or R1C1).
            </summary>
            <param name="area">Area to convert</param>
            <param name="anchor">An anchor address that is the center of R1C1 relative address.</param>
            <returns>Converted absolute range.</returns>
        </member>
        <member name="M:ClosedXML.Extensions.XmlWriterExtensions.WriteAttribute(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>
            Write date in a format <c>2015-01-01T00:00:00</c> (ignore kind).
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.BmpInfoReader">
            <summary>
            A reader for BMP for Windows and OS/2.
            Specification:
            https://www.fileformat.info/format/bmp/corion.htm
            https://www.fileformat.info/format/bmp/egff.htm
            https://www.fileformat.info/format/os2bmp/egff.htm
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.DefaultGraphicEngine.EmbeddedFontName">
            <summary>
            Carlito is a Calibri metric compatible font. This is a version stripped of everything but metric information
            to keep the embedded file small. It is reasonably accurate for many alphabets (contains 2531 glyphs). It has
            no glyph outlines, no TTF instructions, no substitutions, glyph positioning ect. It is created from Carlito
            font through strip-fonts.sh script.
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.DefaultGraphicEngine._fonts">
            <summary>
            A font loaded font in the size <see cref="F:ClosedXML.Graphics.DefaultGraphicEngine.FontMetricSize"/>. There is no benefit in having multiple allocated instances, everything is just scaled at the moment.
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.DefaultGraphicEngine._maxDigitWidths">
            <summary>
            Max digit width as a fraction of Em square. Multiply by font size to get pt size.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.DefaultGraphicEngine.Instance">
            <summary>
            Get a singleton instance of the engine that uses <c>Microsoft Sans Serif</c> as a fallback font.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.#ctor(System.String)">
            <summary>
            Initialize a new instance of the engine.
            </summary>
            <param name="fallbackFont">A name of a font that is used when a font in a workbook is not available.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.#ctor(System.IO.Stream,System.Boolean,System.IO.Stream[])">
            <summary>
            Initialize a new instance of the engine. The engine will be able to use system fonts and fonts loaded from external sources.
            </summary>
            <remarks>Useful/necessary for environments without an access to filesystem.</remarks>
            <param name="fallbackFontStream">A stream that contains a fallback font.</param>
            <param name="useSystemFonts">Should engine try to use system fonts? If false, system fonts won't be loaded which can significantly speed up library startup.</param>
            <param name="fontStreams">Extra fonts that should be loaded to the engine.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.CreateOnlyWithFonts(System.IO.Stream,System.IO.Stream[])">
            <summary>
            Create a default graphic engine that uses only fallback font and additional fonts passed as streams.
            It ignores all system fonts and that can lead to decrease of initialization time.
            </summary>
            <remarks>
            <para>
            Font is determined by a name and style in the worksheet, but the font name must be mapped to a font file/stream.
            System fonts on Windows contain hundreds of font files that have to be checked to find the correct font
            file for the font name and style. That means to read hundreds of files and parse data inside them.
            Even though SixLabors.Fonts does this only once (lazily too) and stores data in a static variable, it is
            an overhead that can be avoided.
            </para>
            <para>
            This factory method is useful in several scenarios:
            <list type="bullet">
              <item>Client side Blazor doesn't have access to any system fonts.</item>
              <item>Worksheet contains only limited number of fonts. It might be sufficient to just load few fonts we are</item>
            </list>
            </para>
            </remarks>
            <param name="fallbackFontStream">A stream that contains a fallback font.</param>
            <param name="fontStreams">Fonts that should be loaded to the engine.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.CreateWithFontsAndSystemFonts(System.IO.Stream,System.IO.Stream[])">
            <summary>
            Create a default graphic engine that uses only fallback font and additional fonts passed as streams.
            It also uses system fonts.
            </summary>
            <param name="fallbackFontStream">A stream that contains a fallback font.</param>
            <param name="fontStreams">Fonts that should be loaded to the engine.</param>
        </member>
        <member name="M:ClosedXML.Graphics.DefaultGraphicEngine.GetGlyphBox(System.ReadOnlySpan{System.Int32},ClosedXML.Excel.IXLFontBase,ClosedXML.Graphics.Dpi)">
            <inheritdoc />
        </member>
        <member name="T:ClosedXML.Graphics.Dpi">
            <summary>
            A DPI resolution.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.Dpi.X">
            <summary>
            Horizontal DPI resolution.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.Dpi.Y">
            <summary>
            Vertical DPI resolution.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.EmfInfoReader">
            <summary>
            Metadata read of a vector EMF file. Specification: https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.GifInfoReader">
            <summary>
            Read info about a GIF file. Gif file has no DPI, only pixel ratio.
            Specification: https://www.w3.org/Graphics/GIF/spec-gif89a.txt
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.GlyphBox">
            <summary>
            A bounding box for a glyph, in pixels.
            </summary>
            <remarks>
            In most cases, a glyph represents a single unicode code point. In some cases,
            multiple code points are represented by a single glyph (emojis in most cases).
            Although data type is float, the actual values should be whole numbers.
            That best fits to Excel behavior, but there might be some cases in the future,
            where values can be a floats (e.g. advance could be non-pixels aligned).
            </remarks>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.LineBreak">
            <summary>
            A special glyph box that indicates a line break. Dimensions are kept at 0, so it doesn't affect any calculations.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.AdvanceWidth">
            <summary>
            Advance width in px of a box for code point. Value should be whole number.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.EmSize">
            <summary>
            Size of Em square in pixels. If em is not a square, vertical dimension of
            em square. Value should be whole number.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.Descent">
            <summary>
            Distance in px from baseline to the bottom of the box.
            </summary>
            <remarks>
            Descent/height is determined by font, not by codepoints
            of the glyph. Value should be whole number.
            </remarks>
        </member>
        <member name="P:ClosedXML.Graphics.GlyphBox.LineHeight">
            <summary>
            Get line width of the glyph box. It is calculated as central band with a text and
            a lower and an upper bands. Central band (text) has height is <c>em-square - descent</c>
            and the bands are <c>descent</c>.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.IXLGraphicEngine">
            <summary>
            An interface to abstract away graphical functionality, like reading images, fonts or to determine a width of a text.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetPictureInfo(System.IO.Stream,ClosedXML.Excel.Drawings.XLPictureFormat)">
            <summary>
            Get the info about a picture (mostly dimensions).
            </summary>
            <param name="imageStream">Stream is at the beginning of the image.</param>
            <param name="expectedFormat">The expected format of the image. Use <see cref="F:ClosedXML.Excel.Drawings.XLPictureFormat.Unknown"/> for auto detection.</param>
            <exception cref="T:System.ArgumentException">Unable to determine picture dimensions or format doesn't match the stream.</exception>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetTextHeight(ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            Get the height of a text with the font in pixels. Should be <c>EMHeight+descent</c>.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetTextWidth(System.String,ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            Get the width of a text in pixels. Do not add any padding, there can be
            multiple spans of a texts with different fonts in a line.
            </summary>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetMaxDigitWidth(ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            The width of the widest 0-9 digit in pixels.
            </summary>
            <remarks>OOXML measures width of a column in multiples of widest 0-9 digit character in a normal style font.</remarks>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetDescent(ClosedXML.Excel.IXLFontBase,System.Double)">
            <summary>
            Get font descent in pixels (positive value).
            </summary>
            <remarks>Excel is using OS/2 WinAscent/WinDescent for TrueType fonts (e.g. Calibri), not a correct font ascent/descent.</remarks>
        </member>
        <member name="M:ClosedXML.Graphics.IXLGraphicEngine.GetGlyphBox(System.ReadOnlySpan{System.Int32},ClosedXML.Excel.IXLFontBase,ClosedXML.Graphics.Dpi)">
            <summary>
            Get a glyph bounding box for a grapheme cluster.
            </summary>
            <remarks>
            In 99+%, grapheme cluster will be just a codepoint. Method uses grapheme instead, so it can be
            future-proof signature and have less braking changes. Implementing method by adding widths of
            individual code points is acceptable.
            </remarks>
            <param name="graphemeCluster">
            A part of a string in code points (or runes in C# terminology, not UTF-16 code units) that together
            form a grapheme. Multiple unicode codepoints can form a single glyph, e.g. family grapheme is a single
            glyph created from 6 codepoints (man, zero-width-join, woman, zero-width-join and a girl). A string
            can be split into a grapheme clusters through <see cref="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)"/>.
            </param>
            <param name="font">Font used to determine size of a glyph for the grapheme cluster.</param>
            <param name="dpi">
            A resolution used to determine pixel size of a glyph. Font might be rendered differently at different resolutions.
            </param>
            <returns>Bounding box containing the glyph.</returns>
        </member>
        <member name="T:ClosedXML.Graphics.JpegInfoReader">
            <summary>
            Read <a href="https://www.w3.org/Graphics/JPEG/jfif3.pdf">JFIF</a> or EXIF.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.PcxInfoReader">
            <summary>
            Read info about PCX picture.
            https://moddingwiki.shikadi.net/wiki/PCX_Format
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.TiffInfoReader">
            <summary>
            A reader for baseline TIFF.
            Specification: https://www.itu.int/itudoc/itu-t/com16/tiff-fx/docs/tiff6.pdf
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.TiffInfoReader.ByteOrder.LittleEndian">
            <summary>
            <c>II</c> like Intel in ASCII.
            </summary>
        </member>
        <member name="F:ClosedXML.Graphics.TiffInfoReader.ByteOrder.BigEndian">
            <summary>
            <c>MM</c> like Motorola in ASCII.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.WebpInfoReader">
            <summary>
            Reader of dimensions for WebP image format.
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.WmfInfoReader">
            <summary>
            Reader of Windows Meta File.
            https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/4813e7fd-52d0-4f42-965f-228c8b7488d2
            http://formats.kaitai.io/wmf/index.html
            </summary>
        </member>
        <member name="T:ClosedXML.Graphics.XLPictureInfo">
            <summary>
            Metadata info about a picture. At least one of the sizes (pixels/physical) must be set.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.Format">
            <summary>
            Detected format of the image.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.SizePx">
            <summary>
            Size of the picture in pixels.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.SizePhys">
            <summary>
            A physical size in 0.01mm. Used by vector images.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.DpiX">
            <summary>
            0 = use workbook DPI.
            </summary>
        </member>
        <member name="P:ClosedXML.Graphics.XLPictureInfo.DpiY">
            <summary>
            0 = use workbook DPI.
            </summary>
        </member>
        <member name="M:ClosedXML.Utils.ColorStringParser.ParseFromArgb(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse ARGB color stored in <c>ST_UnsignedIntHex</c> the same way as Excel does.
            </summary>
        </member>
        <member name="M:ClosedXML.Utils.ColorStringParser.ParseFromRgb(System.String)">
            <summary>
            Parse RRGGBB color.
            </summary>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.FromClosedXMLColor``1(DocumentFormat.OpenXml.Spreadsheet.ColorType,ClosedXML.Excel.XLColor,System.Boolean)">
            <summary>
            Convert color in ClosedXML representation to specified OpenXML type.
            </summary>
            <typeparam name="T">The descendant of <see cref="T:DocumentFormat.OpenXml.Spreadsheet.ColorType"/>.</typeparam>
            <param name="openXMLColor">The existing instance of ColorType.</param>
            <param name="xlColor">Color in ClosedXML format.</param>
            <param name="isDifferential">Flag specifying that the color should be saved in
            differential format (affects the transparent color processing).</param>
            <returns>The original color in OpenXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.FromClosedXMLColor``1(DocumentFormat.OpenXml.Office2010.Excel.ColorType,ClosedXML.Excel.XLColor,System.Boolean)">
            <summary>
            Convert color in ClosedXML representation to specified OpenXML type.
            </summary>
            <typeparam name="T">The descendant of <see cref="T:DocumentFormat.OpenXml.Office2010.Excel.ColorType"/>.</typeparam>
            <param name="openXMLColor">The existing instance of ColorType.</param>
            <param name="xlColor">Color in ClosedXML format.</param>
            <param name="isDifferential">Flag specifying that the color should be saved in
            differential format (affects the transparent color processing).</param>
            <returns>The original color in OpenXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.ToClosedXMLColor(DocumentFormat.OpenXml.Spreadsheet.ColorType)">
            <summary>
            Convert color in OpenXML representation to ClosedXML type.
            </summary>
            <param name="openXMLColor">Color in OpenXML format.</param>
            <returns>The color in ClosedXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.ToClosedXMLColor(DocumentFormat.OpenXml.Office2010.Excel.ColorType)">
            <summary>
            Convert color in OpenXML representation to ClosedXML type.
            </summary>
            <param name="openXMLColor">Color in OpenXML format.</param>
            <returns>The color in ClosedXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.ConvertToClosedXMLColor(ClosedXML.Utils.IColorTypeAdapter)">
            <summary>
            Here we perform the actual conversion from OpenXML color to ClosedXML color.
            </summary>
            <param name="openXMLColor">OpenXML color. Must be either <see cref="T:DocumentFormat.OpenXml.Spreadsheet.ColorType"/> or <see cref="T:DocumentFormat.OpenXml.Office2010.Excel.ColorType"/>.
            Since these types do not implement a common interface we use dynamic.</param>
            <returns>The color in ClosedXML format.</returns>
        </member>
        <member name="M:ClosedXML.Utils.OpenXmlHelper.FillFromClosedXMLColor(ClosedXML.Utils.IColorTypeAdapter,ClosedXML.Excel.XLColor,System.Boolean)">
            <summary>
            Initialize properties of the existing instance of the color in OpenXML format basing on properties of the color
            in ClosedXML format.
            </summary>
            <param name="openXMLColor">OpenXML color. Must be either <see cref="T:DocumentFormat.OpenXml.Spreadsheet.ColorType"/> or <see cref="T:DocumentFormat.OpenXml.Office2010.Excel.ColorType"/>.
            Since these types do not implement a common interface we use dynamic.</param>
            <param name="xlColor">Color in ClosedXML format.</param>
            <param name="isDifferential">Flag specifying that the color should be saved in
            differential format (affects the transparent color processing).</param>
        </member>
    </members>
</doc>
