<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.TestPlatform.TestFramework</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the name of the parameter whose expression should be captured as a string.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/>
            </summary>
            <param name="featureName">The name of the required compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata. This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/master/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c>
            flag should not be set in method headers.
            </summary>
            <remarks>
            This attribute is unsafe because it may reveal uninitialized memory to
            the application in certain instances (e.g., reading from uninitialized
            stackalloc'd memory). If applied to a method directly, the attribute
            applies to that method and all nested functions (lambdas, local
            functions) below it. If applied to a type or module, it applies to all
            methods nested inside. This attribute is intentionally not permitted on
            assemblies. Use at the module level instead to apply to multiple type
            declarations.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks>
            <see langword="null"/> may be used as the name of the receiver in an instance method.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
             <summary>
             An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
             </summary>
             <example>
             Example of a valid use case. The Win32 `GetTickCount()` function is a small performance related function
             that reads some global memory and returns the value. In this case, the GC transition overhead is significantly
             more than the memory read.
             <code>
             using System;
             using System.Runtime.InteropServices;
             class Program
             {
                 [DllImport("Kernel32")]
                 [SuppressGCTransition]
                 static extern int GetTickCount();
                 static void Main()
                 {
                     Console.WriteLine($"{GetTickCount()}");
                 }
             }
             </code>
             </example>
             <remarks>
             This attribute is ignored if applied to a method without the <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            
             Forgoing this transition can yield benefits when the cost of the transition is more than the execution time
             of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime
             provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function the
             GC must transition from Cooperative mode into Preemptive mode. Full details on these modes can be found at
             https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/clr-code-guide.md#2.1.8.
             Suppressing the GC transition is an advanced scenario and should not be done without fully understanding
             potential consequences.
            
             One of these consequences is an impact to Mixed-mode debugging (https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).
             During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that
             has been marked with this attribute. A workaround is to switch to native debugging and set a breakpoint in the native function.
             In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example
             stepping through the native code or diagnosing an exception thrown from the native code.
            
             The runtime may load the native library for method marked with this attribute in advance before the method is called for the first time.
             Usage of this attribute is not recommended for platform neutral libraries with conditional platform specific code.
            
             The P/Invoke method that this attribute is applied to must have all of the following properties:
               * Native function always executes for a trivial amount of time (less than 1 microsecond).
               * Native function does not perform a blocking syscall (e.g. any type of I/O).
               * Native function does not call back into the runtime (e.g. Reverse P/Invoke).
               * Native function does not throw exceptions.
               * Native function does not manipulate locks or other concurrency primitives.
            
             Consequences of invalid uses of this attribute:
               * GC starvation.
               * Immediate runtime termination.
               * Data corruption.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
            <remarks>
            Methods marked with this attribute have the following restrictions:
              * Method must be marked "static".
              * Must not be called from managed code.
              * Must only have <see href="https://docs.microsoft.com/dotnet/framework/interop/blittable-and-non-blittable-types">blittable</see> arguments.
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
            <remarks>
            Supplied types must be from the official "System.Runtime.CompilerServices" namespace and
            be of the form "CallConvXXX".
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is allowed as an input even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is disallowed as an input even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
              Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
              Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
              parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
              Gets the condition parameter value.
              Code after the method is considered unreachable by diagnostics if the argument
              to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
              class with the specified parameter value.
            </summary>
            <param name="parameterValue">
              The condition parameter value.
              Code after the method is considered unreachable by diagnostics if the argument
              to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
              Specifies that an output may be <see langword="null"/> even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
              the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
               Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
              The return value condition.
              If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
              The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
              Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
              The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
              Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
              The return value condition. If the method returns this value,
              the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
              The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
              Initializes the attribute with the specified return value condition and list
              of field and property members.
            </summary>
            <param name="returnValue">
              The return value condition. If the method returns this value,
              the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
              The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
              Specifies that an output is not <see langword="null"/> even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
              Gets the associated parameter name.
              The output will be non-<see langword="null"/> if the argument to the
              parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
              The associated parameter name.
              The output will be non-<see langword="null"/> if the argument to the
              parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
              the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
              The return value condition.
              If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
              <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
              <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
              <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="T:System.Diagnostics.TaskCompletionSource">
            <summary>
            Represents the producer side of a <see cref="!:Tasks.Task"/> unbound to a
            delegate, providing access to the consumer side through the <see cref="!:Tasks.Task"/> property.
            </summary>
            <remarks>
            <para>
            It is often the case that a <see cref="!:Tasks.Task"/> is desired to
            represent another asynchronous operation.
            <see cref="T:System.Diagnostics.TaskCompletionSource">TaskCompletionSource</see> is provided for this purpose. It enables
            the creation of a task that can be handed out to consumers, and those consumers can use the members
            of the task as they would any other. However, unlike most tasks, the state of a task created by a
            TaskCompletionSource is controlled explicitly by the methods on TaskCompletionSource. This enables the
            completion of the external asynchronous operation to be propagated to the underlying Task. The
            separation also ensures that consumers are not able to transition the state without access to the
            corresponding TaskCompletionSource.
            </para>
            <para>
            All members of <see cref="T:System.Diagnostics.TaskCompletionSource"/> are thread-safe
            and may be used from multiple threads concurrently.
            </para>
            </remarks>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/>.</summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified options.</summary>
            <remarks>
            The <see cref="!:Tasks.Task"/> created by this instance and accessible through its <see cref="P:System.Diagnostics.TaskCompletionSource.Task"/> property
            will be instantiated using the specified <paramref name="creationOptions"/>.
            </remarks>
            <param name="creationOptions">The options to use when creating the underlying <see cref="!:Tasks.Task"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> represent options invalid for use
            with a <see cref="T:System.Diagnostics.TaskCompletionSource"/>.
            </exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Object)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified state.</summary>
            <param name="state">The state to use as the underlying
            <see cref="!:Tasks.Task"/>'s AsyncState.</param>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified state and options.</summary>
            <param name="creationOptions">The options to use when creating the underlying <see cref="!:Tasks.Task"/>.</param>
            <param name="state">The state to use as the underlying <see cref="!:Tasks.Task"/>'s AsyncState.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions"/> represent options invalid for use with a <see cref="T:System.Diagnostics.TaskCompletionSource"/>.</exception>
        </member>
        <member name="P:System.Diagnostics.TaskCompletionSource.Task">
            <summary>
            Gets the <see cref="!:Tasks.Task"/> created
            by this <see cref="T:System.Diagnostics.TaskCompletionSource"/>.
            </summary>
            <remarks>
            This property enables a consumer access to the <see cref="P:System.Diagnostics.TaskCompletionSource.Task"/> that is controlled by this instance.
            The <see cref="M:System.Diagnostics.TaskCompletionSource.SetResult"/>, <see cref="M:System.Diagnostics.TaskCompletionSource.SetException(System.Exception)"/>, <see cref="M:System.Diagnostics.TaskCompletionSource.SetException(System.Collections.Generic.IEnumerable{System.Exception})"/>,
            and <see cref="M:System.Diagnostics.TaskCompletionSource.SetCanceled"/> methods (and their "Try" variants) on this instance all result in the relevant state
            transitions on this underlying Task.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetException(System.Exception)">
            <summary>Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.</summary>
            <param name="exception">The exception to bind to this <see cref="!:Tasks.Task"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> argument is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.</summary>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="!:Tasks.Task"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exception">The exception to bind to this <see cref="!:Tasks.Task"/>.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
            <remarks>
            This operation will return false if the <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> argument is null.</exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="!:Tasks.Task"/>.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
            <remarks>
            This operation will return false if the <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="exceptions"/> collection is empty.</exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetResult">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetResult">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <returns>True if the operation was successful; otherwise, false.</returns>
            <remarks>
            This operation will return false if the <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetCanceled">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetCanceled(System.Threading.CancellationToken)">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            using the specified token.
            </summary>
            <param name="cancellationToken">The cancellation token with which to cancel the <see cref="!:Tasks.Task"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </exception>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <returns>True if the operation was successful; otherwise, false.</returns>
            <remarks>
            This operation will return false if the <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetCanceled(System.Threading.CancellationToken)">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <param name="cancellationToken">The cancellation token with which to cancel the <see cref="!:Tasks.Task"/>.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
            <remarks>
            This operation will return false if the <see cref="!:Tasks.Task"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.unreachableexception"/>
            <seealso href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/UnreachableException.cs"/>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Reflection.NullabilityInfo">
            <summary>
            A class that represents nullability info
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.Type">
            <summary>
            The <see cref="T:System.Type" /> of the member or generic parameter
            to which this NullabilityInfo belongs
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ReadState">
            <summary>
            The nullability read state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.WriteState">
            <summary>
            The nullability write state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ElementType">
            <summary>
            If the member type is an array, gives the <see cref="T:System.Reflection.NullabilityInfo" /> of the elements of the array, null otherwise
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.GenericTypeArguments">
            <summary>
            If the member type is a generic type, gives the array of <see cref="T:System.Reflection.NullabilityInfo" /> for each type parameter
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityState">
            <summary>
            An enum that represents nullability state
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Unknown">
            <summary>
            Nullability context not enabled (oblivious)
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.NotNull">
            <summary>
            Non nullable value or reference type
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Nullable">
            <summary>
            Nullable value or reference type
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityInfoContext">
            <summary>
            Provides APIs for populating nullability information/context from reflection members:
            <see cref="T:System.Reflection.ParameterInfo"/>, <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.EventInfo"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.ParameterInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="parameterInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the parameterInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.PropertyInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.PropertyInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="propertyInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the propertyInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.EventInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.EventInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="eventInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the eventInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.FieldInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.FieldInfo" />
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="fieldInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the fieldInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration type.
            </summary>
            <returns>An array that contains the values of the constants in TEnum.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetNames``1">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration type.
            </summary>
            <returns>A string array of the names of the constants in TEnum.</returns>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.TryParse(System.String,System.IFormatProvider,System.Guid@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.String,System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.IntPolyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.LongPolyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.String,System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ShortPolyfill.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UIntPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.ULongPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UShortPolyfill.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.UnsafeRegister(System.Threading.CancellationToken,System.Action{System.Object},System.Object)">
            <summary>
            Registers a delegate that will be called when this
            <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.
            </summary>
            <remarks>
            <para>
            If this token is already in the canceled state, the delegate will be run immediately and synchronously.
            Any exception the delegate generates will be propagated out of this method call.
            </para>
            <para>
            <see cref="T:System.Threading.ExecutionContext">ExecutionContext</see> is not captured nor flowed
            to the callback's invocation.
            </para>
            </remarks>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked.  This may be null.</param>
            <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"/> instance that can
            be used to unregister the callback.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is null.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.Register(System.Threading.CancellationToken,System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</summary>
            <remarks>
            If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate
            generates will be propagated out of this method call. The current <see cref="T:System.Threading.ExecutionContext">ExecutionContext</see>, if one exists,
            will be captured along with the delegate and will be used when executing it. The current <see cref="T:System.Threading.SynchronizationContext"/> is not captured.
            </remarks>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked.  This may be null.</param>
            <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"/> instance that can be used to unregister the callback.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is null.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.UnsafeRegister(System.Threading.CancellationToken,System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</summary>
            <remarks>
            If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate
            generates will be propagated out of this method call. <see cref="T:System.Threading.ExecutionContext"/> is not captured nor flowed to the callback's invocation.
            </remarks>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked.  This may be null.</param>
            <returns>The <see cref="T:System.Threading.CancellationTokenRegistration"/> instance that can be used to unregister the callback.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is null.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.CancelAsync(System.Threading.CancellationTokenSource)">
            <summary>Communicates a request for cancellation asynchronously.</summary>
            <remarks>
            <para>
            The associated <see cref="T:System.Threading.CancellationToken" /> will be notified of the cancellation
            and will synchronously transition to a state where <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> returns true.
            Any callbacks or cancelable operations registered with the <see cref="T:System.Threading.CancellationToken"/>  will be executed asynchronously,
            with the returned <see cref="T:System.Threading.Tasks.Task"/> representing their eventual completion.
            </para>
            <para>
            Callbacks registered with the token should not throw exceptions.
            However, any such exceptions that are thrown will be aggregated into an <see cref="T:System.AggregateException"/>,
            such that one callback throwing an exception will not prevent other registered callbacks from being executed.
            </para>
            <para>
            The <see cref="T:System.Threading.ExecutionContext"/> that was captured when each callback was registered
            will be reestablished when the callback is invoked.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource"/> has been disposed.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.GetOrAdd``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``2,``1},``2)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <param name="factoryArgument">An argument value to pass into <paramref name="valueFactory"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The value for the key.  This will be either the existing value for the key if the
            key is already in the dictionary, or the new value for the key as returned by valueFactory
            if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for the current dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.Remove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2"/>, and copies the element
            to the value parameter.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The removed element.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns><code>true</code> if the element is successfully found and removed; otherwise, <code>false</code>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <code>null</code>.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.TryGetValue``1(System.Collections.Generic.HashSet{``0},``0,``0@)">
            <summary>
             Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">The value to search for.</param>
            <param name="actualValue">The value from the set that the search found, or the default value of T when the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStreamAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStreamAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetByteArrayAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned Task{Byte[]} object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetByteArrayAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned Task{byte[]} object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStringAsync(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetStringAsync(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
            </summary>
            <remarks>
            This operation will not block. The returned <see cref="T:System.Threading.Tasks.Task`1"/> object will complete after the response headers are read.
            This method does not read nor buffer the response body.
            </remarks>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The cancellation token to cancel the operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReadAsStreamAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content and returns a stream that represents the content.
            </summary>
            <remarks>
            Note that this method will internally buffer the content unless <c>CreateContentReadStreamAsync()</c> has been
            implemented to do otherwise.
            </remarks>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content to a byte array as an asynchronous operation.
            </summary>
            <remarks>
            Note that this method will internally buffer the content unless <c>CreateContentReadStreamAsync()</c> has been
            implemented to do otherwise.
            </remarks>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ReadAsStringAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Serializes the HTTP content to a string as an asynchronous operation.
            </summary>
            <remarks>
            Note that this method will internally buffer the content unless <c>CreateContentReadStreamAsync()</c> has been
            implemented to do otherwise.
            </remarks>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryGetNonEnumeratedCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
             <summary>
               Attempts to determine the number of elements in a sequence without forcing an enumeration.
             </summary>
             <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
             <param name="source">A sequence that contains elements to be counted.</param>
             <param name="count">
                 When this method returns, contains the count of <paramref name="source" /> if successful,
                 or zero if the method failed to determine the count.</param>
             <returns>
               <see langword="true" /> if the count of <paramref name="source"/> can be determined without enumeration;
               otherwise, <see langword="false" />.
             </returns>
             <remarks>
               The method performs a series of type tests, identifying common subtypes whose
               count can be determined without enumerating; this includes <see cref="T:System.Collections.Generic.ICollection`1"/>,
               <see cref="T:System.Collections.ICollection"/> as well as internal types used in the LINQ implementation.
            
               The method is typically a constant-time operation, but ultimately this depends on the complexity
               characteristics of the underlying collection implementation.
             </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new enumerable collection that contains the elements from source with the last count elements of the
            source collection omitted.
            </summary>
            <param name="source">An enumerable collection instance.</param>
            <param name="count">The number of elements to omit from the end of the collection.</param>
            <typeparam name="TSource">The type of the elements in the enumerable collection.</typeparam>
            <returns>A new enumerable collection that contains the elements from source minus count elements from the end
            of the collection.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polyfills.Polyfill.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" -->
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the elements of a sequence into chunks of size at most <paramref name="size"/>.
            </summary>
            <remarks>
            Every chunk except the last will be of size <paramref name="size"/>.
            The last chunk will contain the remaining elements and may be of a smaller size.
            </remarks>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to chunk.</param>
            <param name="size">Maximum size of each chunk.</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements the input sequence split into chunks of size <paramref name="size"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> is below 1.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to distinguish elements by.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <remarks>
            <para>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</para>
            <para>The <see cref="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" /> method returns an unordered sequence that contains no duplicate values. The default equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />, is used to compare values.</para>
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of key to distinguish elements by.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <remarks>
            <para>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</para>
            <para>The <see cref="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" /> method returns an unordered sequence that contains no duplicate values. If <paramref name="comparer" /> is <see langword="null" />, the default equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />, is used to compare values.</para>
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using the default equality comparer to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by <paramref name="comparer"/> to compare values.
            </summary>
            <param name="target">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not equal to <paramref name="item"/> will be returned.</param>
            <param name="item">An <see cref="!:TSource"/> that is elements equal it will cause those elements to be removed from the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <returns>A sequence that contains the items of <paramref name="target"/> but excluding <paramref name="item"/>.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
            <typeparam name="TKey">The type of key to identify elements by.</typeparam>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that are not also in <paramref name="second"/> will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
            <typeparam name="TKey">The type of key to identify elements by.</typeparam>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that are not also in <paramref name="second"/> will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns><paramref name="defaultValue" /> if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the maximum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the maximum value in a generic sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>The value with the maximum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the minby value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the minimum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the minimum value in a generic sequence according to a specified key selector function.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="target" />.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>The value with the minimum key in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">No key extracted from <paramref name="target" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
            <remarks>
            <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns>The single element of the input sequence that satisfies the condition, or <paramref name="defaultValue" /> if no such element is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" />.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
            <param name="defaultValue">The default value to return if the sequence is empty.</param>
            <returns>The single element of the input sequence, or <paramref name="defaultValue" /> if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Produces a sequence of tuples with elements from the three specified sequences.
            </summary>
            <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
            <typeparam name="TThird">The type of the elements of the third input sequence.</typeparam>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
            <param name="third">The third sequence to merge.</param>
            <returns>A sequence of tuples with elements taken from the first, second, and third sequences, in that order.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Produces a sequence of tuples with elements from the two specified sequences.
            </summary>
            <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
            <returns>A sequence of tuples with elements taken from the first, and second sequences, in that order.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Tries to get the value associated with the specified key in the dictionary.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the value to get.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
            A TValue instance. When the method is successful, the returned object is the value associated with
            the specified key. When the method fails, it returns the default value for TValue.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the value associated with the specified key in the dictionary.
            </summary>
            <param name="target">A dictionary with keys of type TKey and values of type TValue.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">A dictionary with keys of type TKey and values of type TValue.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <returns>
            A TValue instance. When the method is successful, the returned object is the value associated with
            the specified key. When the method fails, it returns the default value for TValue.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <param name="key">The key of the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <param name="value">The value of the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</summary>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.IList`1" />.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Nanoseconds(System.TimeSpan)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTime)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTimeOffset)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microseconds(System.TimeSpan)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTime)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTimeOffset)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Instructs the Process component to wait for the associated process to exit, or
            for the <paramref name="cancellationToken"/> to be canceled.
            </summary>
            <remarks>
            Calling this method will set <see cref="!:EnableRaisingEvents"/> to <see langword="true" />.
            </remarks>
            <returns>
            A task that will complete when the process has exited, cancellation has been requested,
            or an error occurs.
            </returns>
        </member>
        <member name="M:Polyfills.Polyfill.Shuffle``1(System.Random,``0[])">
            <summary>
            Performs an in-place shuffle of an array.
            </summary>
            <param name="index">The array to shuffle.</param>
            <typeparam name="T">The type of array.</typeparam>
            <remarks>
              This method uses <see cref="!:Next(int, int)" /> to choose values for shuffling.
              This method is an O(n) operation.
            </remarks>
        </member>
        <member name="M:Polyfills.Polyfill.GetKeyAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the key corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the key within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The key corresponding to the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is out of range.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the value corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the value within the entire <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The value corresponding to the specified index.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.GetHashCode(System.String,System.StringComparison)">
            <summary>
            Returns the hash code for this string using the specified rules.
            </summary>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.StartsWith(System.String,System.Char)">
            <summary>
            Determines whether this string instance starts with the specified character.
            </summary>
            <param name="value">The character to compare.</param>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</remarks>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.EndsWith(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
            <param name="value">The character to seek.</param>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</remarks>
            <returns>true if the value parameter occurs within this string; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally,
            options. Splits a string into a maximum number of substrings based on the provided character separator,
            optionally omitting empty substrings from the result.
            </summary>
            <param name="separator">A character that delimits the substrings in this instance.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings
            and include empty substrings.</param>
            <returns>An array that contains at most count substrings from this instance that are delimited by separator.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.Char,System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally,
            options. Splits a string into a maximum number of substrings based on the provided character separator,
            optionally omitting empty substrings from the result.
            </summary>
            <param name="separator">A character that delimits the substrings in this instance.</param>
            <param name="count">The maximum number of elements expected in the array.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings
            and include empty substrings.</param>
            <returns>An array that contains at most count substrings from this instance that are delimited by separator.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</remarks>
            <param name="value">The character to seek.</param>
            <returns>true if the value parameter occurs within this string; otherwise, false.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.String,System.String[])">
            <summary>Concatenates the strings of the provided array, using the specified separator between each string, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The string to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified separator between each member, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The string to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.Char,System.String[])">
            <summary>Concatenates the strings of the provided array, using the specified char separator between each string, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The character to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.Char,System.Object[])">
            <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified char separator between each member, then appends the result to the current instance of the string builder.</summary>
            <param name="separator">The character to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">An array that contains the strings to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.Char,``0[])">
            <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
            <param name="separator">The character to use as a separator. separator is included in the joined strings only if values has more than one element.</param>
            <param name="values">A collection that contains the objects to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
            <param name="separator">The string to use as a separator. separator is included in the concatenated and appended strings only if values has more than one element.</param>
            <param name="values">A collection that contains the objects to concatenate and append to the current instance of the string builder.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.</summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes or when the specified timeout expires.</summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.</summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, or when the specified timeout expires.
            </summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.
            </summary>
            <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task"/> should be faulted with a <see cref="T:System.TimeoutException"/> if it hasn't otherwise completed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SetCanceled``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.CancellationToken)">
            <summary>
            Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            using the specified token.
            </summary>
            <param name="cancellationToken">The cancellation token with which to cancel the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="T:System.Threading.Tasks.Task`1"/> is already in one of the three final states:
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>.
            </exception>
        </member>
        <member name="M:Polyfills.Polyfill.ReadToEndAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <c>TResult</c> parameter contains
            a string with the characters from the current position to the end of the stream.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.ReadLineAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously and returns the data as a string.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A value task that represents the asynchronous read operation. The value of the <c>TResult</c>
            parameter contains the next line from the text reader, or is <see langword="null" /> if all of the characters have been read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The text reader has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The reader is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:Polyfills.Polyfill.IsGenericMethodParameter(System.Type)">
            <summary>
            Gets a value that indicates whether the current Type represents a type parameter in the definition of a generic method.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableTo``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableTo https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignableto.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableFrom``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableFrom https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether the current type can be assigned to a variable of the specified targetType.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetMemberWithSameMetadataDefinitionAs(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Searches for the MemberInfo on the current Type that matches the specified MemberInfo.
            </summary>
            <param name="type">The MemberInfo to find on the current Type.</param>
            <param name="member">The MemberInfo to find on the current Type.</param>
            <returns>An object representing the member on the current Type that matches the specified member.</returns>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the XML to.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.Object[])">
            <summary>
            Concatenates the string representations of an array of objects, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[],System.Int32,System.Int32)">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert">
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0})">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single)">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first decimal to compare. This is the decimal the tests expects.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first decimal to compare. This is the decimal the tests expects.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first decimal to compare. This is the decimal the tests expects.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first decimal to compare. This is the decimal the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first decimal to compare. This is the decimal the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first decimal to compare. This is the decimal the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first long to compare. This is the long the tests expects.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first long to compare. This is the long the tests expects.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first long to compare. This is the long the tests expects.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first long to compare. This is the long the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first long to compare. This is the long the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first long to compare. This is the long the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0)">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not the same as <paramref name="expected"/>. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not the same as <paramref name="expected"/>. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0)">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is the same as <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is the same as <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.That">
            <summary>
            Gets the singleton instance of the Assert functionality.
            </summary>
            <remarks>
            Users can use this to plug-in custom assertions through C# extension methods.
            For instance, the signature of a custom assertion provider could be "public static void IsOfType&lt;T&gt;(this Assert assert, object obj)"
            Users could then use a syntax similar to the default assertions which in this case is "Assert.That.IsOfType&lt;Dog&gt;(animal);"
            More documentation is at "https://github.com/Microsoft/testfx/docs/README.md".
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNullChars(System.String)">
            <summary>
            Replaces null characters ('\0') with "\\0".
            </summary>
            <param name="input">
            The string to search.
            </param>
            <returns>
            The converted string with null characters replaced by "\\0".
            </returns>
            <remarks>
            This is only public and still present to preserve compatibility with the V1 framework.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowAssertFailed(System.String,System.String)">
            <summary>
            Helper function that creates and throws an AssertionFailedException.
            </summary>
            <param name="assertionName">
            name of the assertion throwing an exception.
            </param>
            <param name="message">
            The assertion failure message.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.BuildUserMessage(System.String,System.Object[])">
            <summary>
            Builds the formatted message using the given user format message and parameters.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="parameters">
            An object array that contains zero or more objects to format.
            </param>
            <returns>
            The formatted string based on format and parameters.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CheckParameterNotNull(System.Object,System.String,System.String,System.String,System.Object[])">
            <summary>
            Checks the parameter for valid conditions.
            </summary>
            <param name="param">
            The parameter.
            </param>
            <param name="assertionName">
            The assertion Name.
            </param>
            <param name="parameterName">
            parameter name.
            </param>
            <param name="message">
            message for the invalid parameter exception.
            </param>
            <param name="parameters">
            The parameters.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(System.Object)">
            <summary>
            Safely converts an object to a string, handling null values and null characters.
            Null values are converted to "(null)". Null characters are converted to "\\0".
            </summary>
            <param name="input">
            The object to convert to a string.
            </param>
            <returns>
            The converted string.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Equals(System.Object,System.Object)">
            <summary>
            Static equals overloads are used for comparing instances of two types for reference
            equality. This method should <b>not</b> be used for comparison of two instances for
            equality. This object will <b>always</b> throw with Assert.Fail. Please use
            Assert.AreEqual and associated overloads in your unit tests.
            </summary>
            <param name="objA"> Object A. </param>
            <param name="objB"> Object B. </param>
            <returns> False, always. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String)">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String)">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type)">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not an instance of <paramref name="expectedType"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,System.String)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@,System.String)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not an instance of <paramref name="expectedType"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type)">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object)">
            <summary>
            Tests whether the specified object is not an instance of the wrong generic
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that <paramref name="value"/> should not be.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is an instance of <paramref name="wrongType"/>. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object,System.String)">
            <summary>
            Tests whether the specified object is not an instance of the wrong generic
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that <paramref name="value"/> should not be.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is an instance of <paramref name="wrongType"/>. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is not an instance of the wrong generic
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that <paramref name="value"/> should not be.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object)">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">
            The object the test expects to be null.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">
            The object the test expects to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not null. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">
            The object the test expects to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not null. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object)">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">
            The object the test expects not to be null.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">
            The object the test expects not to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is null. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">
            The object the test expects not to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is null. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean})">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},System.String)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean})">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean},System.String)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Action)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Action,System.String)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Func{System.Object})">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Func{System.Object},System.String)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Func{System.Object},System.String,System.Object[])">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throw exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Action,System.String,System.Object[])">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> executing the delegate.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync``1(System.Func{System.Threading.Tasks.Task},System.String)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">Delegate to code to be tested and which is expected to throw exception.</param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <typeparam name="T">Type of exception expected to be thrown.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> executing the delegate.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync``1(System.Func{System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">Delegate to code to be tested and which is expected to throw exception.</param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="T">Type of exception expected to be thrown.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> executing the delegate.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert">
            <summary>
            A collection of helper classes to test various conditions associated
            with collections within unit tests. If the condition being tested is not
            met, an exception is thrown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.That">
            <summary>
            Gets the singleton instance of the CollectionAssert functionality.
            </summary>
            <remarks>
            Users can use this to plug-in custom assertions through C# extension methods.
            For instance, the signature of a custom assertion provider could be "public static void AreEqualUnordered(this CollectionAssert customAssert, ICollection expected, ICollection actual)"
            Users could then use a syntax similar to the default assertions which in this case is "CollectionAssert.That.AreEqualUnordered(list1, list2);"
            More documentation is at "https://github.com/Microsoft/testfx/docs/README.md".
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> does not contain
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is not in <paramref name="collection"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> does not contain
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is not in <paramref name="collection"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> does not contain
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is in <paramref name="collection"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is in <paramref name="collection"/>. The message is shown in test
            results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains a null element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains a null element. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains a null element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains a null element. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains a null element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains at least one duplicate
            element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains at least one duplicate element. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains at least one duplicate
            element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains at least one duplicate element. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains at least one duplicate
            element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or <paramref name="subset"/> contains at least one element not contained in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="subset"/> is not found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or <paramref name="subset"/> contains at least one element not contained in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="subset"/> is not found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or <paramref name="subset"/> contains at least one element not contained in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or all elements of <paramref name="subset"/> are contained in <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when every element in
            <paramref name="subset"/> is also found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or all elements of <paramref name="subset"/> are contained in <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when every element in
            <paramref name="subset"/> is also found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or all elements of <paramref name="subset"/> are contained in <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null or, <paramref name="expectedType"/> is null,
            or some elements of <paramref name="collection"/> do not inherit/implement
            <paramref name="expectedType"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="collection"/> is not an instance of
            <paramref name="expectedType"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null or, <paramref name="expectedType"/> is null,
            or some elements of <paramref name="collection"/> do not inherit/implement
            <paramref name="expectedType"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="collection"/> is not an instance of
            <paramref name="expectedType"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null or, <paramref name="expectedType"/> is null,
            or some elements of <paramref name="collection"/> do not inherit/implement
            <paramref name="expectedType"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOfHelper(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether the first collection is a subset of the second
            collection. If either set contains duplicate elements, the number
            of occurrences of the element in the subset must be less than or
            equal to the number of occurrences in the superset.
            </summary>
            <param name="subset">
            The collection the test expects to be contained in <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection the test expects to contain <paramref name="subset"/>.
            </param>
            <returns>
            True if <paramref name="subset"/> is a subset of
            <paramref name="superset"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.GetElementCounts``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Int32@)">
            <summary>
            Constructs a dictionary containing the number of occurrences of each
            element in the specified collection.
            </summary>
            <param name="collection">
            The collection to process.
            </param>
            <param name="nullCount">
            The number of null elements in the collection.
            </param>
            <returns>
            A dictionary containing the number of occurrences of each element
            in the specified collection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.FindMismatchedElement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Int32@,System.Int32@,System.Object@)">
            <summary>
            Finds a mismatched element between the two collections. A mismatched
            element is one that appears a different number of times in the
            expected collection than it does in the actual collection. The
            collections are assumed to be different non-null references with the
            same number of elements. The caller is responsible for this level of
            verification. If there is no mismatched element, the function returns
            false and the out parameters should not be used.
            </summary>
            <param name="expected">
            The first collection to compare.
            </param>
            <param name="actual">
            The second collection to compare.
            </param>
            <param name="expectedCount">
            The expected number of occurrences of
            <paramref name="mismatchedElement"/> or 0 if there is no mismatched
            element.
            </param>
            <param name="actualCount">
            The actual number of occurrences of
            <paramref name="mismatchedElement"/> or 0 if there is no mismatched
            element.
            </param>
            <param name="mismatchedElement">
            The mismatched element (may be null) or null if there is no
            mismatched element.
            </param>
            <returns>
            true if a mismatched element was found; false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.ObjectComparer">
            <summary>
            compares the objects using object.Equals.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert">
            <summary>
            The string assert.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.That">
            <summary>
            Gets the singleton instance of the CollectionAssert functionality.
            </summary>
            <remarks>
            Users can use this to plug-in custom assertions through C# extension methods.
            For instance, the signature of a custom assertion provider could be "public static void ContainsWords(this StringAssert customAssert, string value, ICollection substrings)"
            Users could then use a syntax similar to the default assertions which in this case is "StringAssert.That.ContainsWords(value, substrings);"
            More documentation is at "https://github.com/Microsoft/testfx/docs/README.md".
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.StringComparison,System.Object[])">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.StringComparison,System.Object[])">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.StringComparison,System.Object[])">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            matches <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            matches <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute">
            <summary>
            Attribute to define in-line data for a test method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class with an array of object arguments.
            </summary>
            <param name="data"> The data. </param>
            <remarks>This constructor is only kept for CLS compliant tests.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class with an array of string arguments.
            </summary>
            <param name="stringArrayData"> The string array data. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class with an array of object arguments.
            </summary>
            <param name="data"> The data. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.Data">
            <summary>
            Gets data for calling test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.DisplayName">
            <summary>
            Gets or sets display name in test results for customization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute">
            <summary>
            Specifies connection string, table name and row access method for data driven testing.
            </summary>
            <example>
            [DataSource("Provider=SQLOLEDB.1;Data Source=source;Integrated Security=SSPI;Initial Catalog=EqtCoverage;Persist Security Info=False", "MyTable")]
            [DataSource("dataSourceNameFromConfigFile")].
            </example>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultProviderName">
            <summary>
            The default provider name for DataSource.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultDataAccessMethod">
            <summary>
            The default data access method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> class. This instance will be initialized with a data provider, connection string, data table and data access method to access the data source.
            </summary>
            <param name="providerInvariantName">Invariant data provider name, such as System.Data.SqlClient.</param>
            <param name="connectionString">
            Data provider specific connection string.
            WARNING: The connection string can contain sensitive data (for example, a password).
            The connection string is stored in plain text in source code and in the compiled assembly.
            Restrict access to the source code and assembly to protect this sensitive information.
            </param>
            <param name="tableName">The name of the data table.</param>
            <param name="dataAccessMethod">Specifies the order to access data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> class.This instance will be initialized with a connection string and table name.
            Specify connection string and data table to access OLEDB data source.
            </summary>
            <param name="connectionString">
            Data provider specific connection string.
            WARNING: The connection string can contain sensitive data (for example, a password).
            The connection string is stored in plain text in source code and in the compiled assembly.
            Restrict access to the source code and assembly to protect this sensitive information.
            </param>
            <param name="tableName">The name of the data table.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> class.  This instance will be initialized with a data provider and connection string associated with the setting name.
            </summary>
            <param name="dataSourceSettingName">The name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ProviderInvariantName">
            <summary>
            Gets a value representing the data provider of the data source.
            </summary>
            <returns>
            The data provider name. If a data provider was not designated at object initialization, the default provider of System.Data.OleDb will be returned.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ConnectionString">
            <summary>
            Gets a value representing the connection string for the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.TableName">
            <summary>
            Gets a value indicating the table name providing data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataAccessMethod">
             <summary>
             Gets the method used to access the data source.
             </summary>
            
             <returns>
             One of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod"/> values. If the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> is not initialized, this will return the default value <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random"/>.
             </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataSourceSettingName">
            <summary>
            Gets the name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute">
            <summary>
            Attribute for data driven test where data can be specified in-line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute"/> class.
            </summary>
            <param name="displayName">
            Display name for the test.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType">
            <summary>
            Enum to specify whether the data is stored as property or in method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType.Property">
            <summary>
            Data is declared as property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType.Method">
            <summary>
            Data is declared in method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute">
            <summary>
            Attribute to define dynamic data for a test method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
            <param name="dynamicDataSourceType">
            Specifies whether the data is stored as property or in method.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class when the test data is present in a class different
            from test method's class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
            <param name="dynamicDataDeclaringType">
            The declaring type of property or method having data. Useful in cases when declaring type is present in a class different from
            test method's class. If null, declaring type defaults to test method's class type.
            </param>
            <param name="dynamicDataSourceType">
            Specifies whether the data is stored as property or in method.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.DynamicDataDisplayName">
            <summary>
            Gets or sets the name of method used to customize the display name in test results.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.DynamicDataDisplayNameDeclaringType">
            <summary>
            Gets or sets the declaring type used to customize the display name in test results.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute">
            <summary>
            Specifies how to discover <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute"/> class.
            </summary>
            <param name="discoveryOption">
            The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption"/> to use when discovering <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute.DiscoveryOption">
            <summary>
            Gets the discovery option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption">
            <summary>
            The supported discovery modes for <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringExecution">
            <summary>
            Discover tests during execution.
            </summary>
            <remarks>
            This was the default option until version 2.2.3.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringDiscovery">
            <summary>
            Discover and expand ITestDataSource based tests.
            </summary>
            <remarks>
            This is the default behavior after version 2.2.3.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy">
            <summary>
            The supported test ID generation strategies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.Legacy">
            <summary>
            Uses legacy test ID generation. <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests will not be discovered and instead they will be collapsed into one parent test.
            </summary>
            <remarks>
            This option is incompatible with <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringDiscovery"/> option of <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute"/> and will be ignored.
            This was the default option until version 2.2.3.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.DisplayName">
            <summary>
            Uses a combination of executor ID, file name, fully qualified name and display name to generate the test ID.
            </summary>
            <remarks>
            This is the default behavior between versions 2.2.4 and 3.0.0.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.FullyQualified">
            <summary>
            Uses a combination of executor ID, file path, assembly name, method fully qualified name and serialized data (values and their fully qualified type) to generate the test ID.
            </summary>
            <remarks>
            This is the default behavior starting with version 3.0.0.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute">
            <summary>
            Specifies how to generate test ID.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute"/> class.
            </summary>
            <param name="strategy">
            The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy"/> to use when generating the test ID.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute.Strategy">
            <summary>
            Gets the test ID generation strategy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute">
            <summary>
            The assembly cleanup attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute">
            <summary>
            The class cleanup attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassCleanup Inheritance Behavior.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior,Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassCleanup Inheritance Behavior.
            </param>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior,System.Nullable{Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassCleanup Inheritance Behavior.
            </param>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.InheritanceBehavior">
            <summary>
            Gets the Inheritance Behavior.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.CleanupBehavior">
            <summary>
            Gets when to run class cleanup methods.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior">
            <summary>
            When to run ClassCleanup during test execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfAssembly">
            <summary>
            Run at end of assembly.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass">
            <summary>
            Run at end of class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute">
            <summary>
            Specification for when to run class cleanup methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.DefaultClassCleanupLifecycle">
            <summary>
            Default class cleanup execution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute"/> class.
            </summary>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.CleanupBehavior">
            <summary>
            Gets when to run class cleanup methods.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute">
            <summary>
            The test cleanup attribute marks methods that are executed after every test marked with a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoNotParallelizeAttribute">
            <summary>
            Specification to disable parallelization.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope">
            <summary>
            Parallel execution mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.ClassLevel">
            <summary>
            Each thread of execution will be handed a TestClass worth of tests to execute.
            Within the TestClass, the test methods will execute serially.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.MethodLevel">
            <summary>
            Each thread of execution will be handed TestMethods to execute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior">
            <summary>
            Enumeration for inheritance behavior, that can be used with both the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute"/> class
            and <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            Defines the behavior of the ClassInitialize and ClassCleanup methods of base classes.
            The type of the enumeration must match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior.BeforeEachDerivedClass">
            <summary>
            Before each derived class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute">
            <summary>
            The assembly initialize attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute">
            <summary>
            The class initialize attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute"/> class.
            ClassInitializeAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute"/> class.
            ClassInitializeAttribute.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassInitialize Inheritance Behavior.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.InheritanceBehavior">
            <summary>
            Gets the Inheritance Behavior.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DiscoverInternalsAttribute">
            <summary>
            The presence of this attribute in a test assembly causes MSTest to discover test classes (i.e. classes having
            the "TestClass" attribute) and test methods (i.e. methods having the "TestMethod" attribute) which are declared
            internal in addition to test classes and test methods which are declared public. When this attribute is not
            present in a test assembly the tests in such classes will not be discovered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute">
            <summary>
            The test initialize attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute">
            <summary>
            Specification for parallelization level for a test run.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.DefaultExecutionScope">
            <summary>
            The default scope for the parallel run. Although method level gives maximum parallelization, the default is set to
            class level to enable maximum number of customers to easily convert their tests to run in parallel. In most cases within
            a class tests aren't thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.Workers">
            <summary>
            Gets or sets the number of workers to be used for the parallel run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.Scope">
            <summary>
            Gets or sets the scope of the parallel run.
            </summary>
            <remarks>
            To enable all classes to run in parallel set this to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.ClassLevel"/>.
            To get the maximum parallelization level set this to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.MethodLevel"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute">
            <summary>
            CSS Iteration URI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute"/> class for CSS Iteration URI.
            </summary>
            <param name="cssIteration">The CSS Iteration URI.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.CssIteration">
            <summary>
            Gets the CSS Iteration URI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute">
            <summary>
            CSS Project Structure URI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute"/> class for CSS Project Structure URI.
            </summary>
            <param name="cssProjectStructure">The CSS Project Structure URI.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.CssProjectStructure">
            <summary>
            Gets the CSS Project Structure URI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute">
            <summary>
            Description of the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute"/> class to describe a test.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.Description">
            <summary>
            Gets the description of a test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute">
            <summary>
            Attribute that specifies to expect an exception of the specified type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute"/> class with the expected type.
            </summary>
            <param name="exceptionType">Type of the expected exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute"/> class with
            the expected type and the message to include when no exception is thrown by the test.
            </summary>
            <param name="exceptionType">Type of the expected exception.</param>
            <param name="noExceptionMessage">
            Message to include in the test result if the test fails due to not throwing an exception.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.ExceptionType">
            <summary>
            Gets a value indicating the Type of the expected exception.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.AllowDerivedTypes">
            <summary>
            Gets or sets a value indicating whether to allow types derived from the type of the expected exception to
            qualify as expected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.NoExceptionMessage">
            <summary>
            Gets the message to include in the test result if the test fails due to not throwing an exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.Verify(System.Exception)">
            <summary>
            Verifies that the type of the exception thrown by the unit test is expected.
            </summary>
            <param name="exception">The exception thrown by the unit test.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute">
            <summary>
            Base class for attributes that specify to expect an exception from a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute"/> class with a default no-exception message.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute"/> class with a no-exception message.
            </summary>
            <param name="noExceptionMessage">
            Message to include in the test result if the test fails due to not throwing an
            exception.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.NoExceptionMessage">
            <summary>
            Gets the message to include in the test result if the test fails due to not throwing an exception.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.SpecifiedNoExceptionMessage">
            <summary>
            Gets the message to include in the test result if the test fails due to not throwing an exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.GetDefaultNoExceptionMessage(System.String)">
            <summary>
            Gets the default no-exception message.
            </summary>
            <param name="expectedExceptionAttributeTypeName">The ExpectedException attribute type name.</param>
            <returns>The default no-exception message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.Verify(System.Exception)">
            <summary>
            Determines whether the exception is expected. If the method returns, then it is
            understood that the exception was expected. If the method throws an exception, then it
            is understood that the exception was not expected, and the thrown exception's message
            is included in the test result. The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert"/> class can be used for
            convenience. If <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive"/> is used and the assertion fails,
            then the test outcome is set to Inconclusive.
            </summary>
            <param name="exception">The exception thrown by the unit test.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.RethrowIfAssertException(System.Exception)">
            <summary>
            Rethrow the exception if it is an AssertFailedException or an AssertInconclusiveException.
            </summary>
            <param name="exception">The exception to rethrow if it is an assertion exception.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute">
            <summary>
            The ignore attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute"/> class.
            </summary>
            <param name="message">
            Message specifies reason for ignoring.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.IgnoreMessage">
            <summary>
            Gets the owner.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute">
            <summary>
            Test Owner.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute"/> class.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.Owner">
            <summary>
            Gets the owner.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute">
            <summary>
            Priority attribute; used to specify the priority of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute"/> class.
            </summary>
            <param name="priority">
            The priority.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestClassAttribute">
            <summary>
            The test class attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute">
            <summary>
            The test class attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute"/> class.
            </summary>
            <param name="displayName">
            Display name for the test.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute">
            <summary>
            TestCategory attribute; used to specify the category of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute"/> class and applies the category to the test.
            </summary>
            <param name="testCategory">
            The test Category.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.TestCategories">
            <summary>
            Gets the test categories that has been applied to the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute">
            <summary>
            Base class for the "Category" attribute.
            </summary>
            <remarks>
            The reason for this attribute is to let the users create their own implementation of test categories.
            - test framework (discovery, etc) deals with TestCategoryBaseAttribute.
            - The reason that TestCategories property is a collection rather than a string,
              is to give more flexibility to the user. For instance the implementation may be based on enums for which the values can be OR'ed
              in which case it makes sense to have single attribute rather than multiple ones on the same test.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute"/> class.
            Applies the category to the test. The strings returned by TestCategories
            are used with the /category command to filter tests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.TestCategories">
            <summary>
            Gets the test category that has been applied to the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute">
            <summary>
            The test class attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.GetTestMethodAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute)">
            <summary>
            Gets a test method attribute that enables running this test.
            </summary>
            <param name="testMethodAttribute">The test method attribute instance defined on this method.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/> to be used to run this test.</returns>
            <remarks>Extensions can override this method to customize how all methods in a class are run.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute">
            <summary>
            The test method attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/> class.
            </summary>
            <param name="displayName">
            Display name for the test.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.DisplayName">
            <summary>
            Gets display name for the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.Execute(Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod)">
            <summary>
            Executes a test method.
            </summary>
            <param name="testMethod">The test method to execute.</param>
            <returns>An array of TestResult objects that represent the outcome(s) of the test.</returns>
            <remarks>Extensions can override this method to customize running a TestMethod.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute">
            <summary>
            The test property attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult">
            <summary>
            TestResult object to be returned to adapter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DisplayName">
            <summary>
            Gets or sets the display name of the result. Useful when returning multiple results.
            If null then Method name is used as DisplayName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.Outcome">
            <summary>
            Gets or sets the outcome of the test execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.TestFailureException">
            <summary>
            Gets or sets the exception thrown when test is failed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.LogOutput">
            <summary>
            Gets or sets the output of the message logged by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.LogError">
            <summary>
            Gets or sets the output of the message logged by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DebugTrace">
            <summary>
            Gets or sets the debug traces by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.TestContextMessages">
            <summary>
            Gets or sets the debug traces by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ExecutionId">
            <summary>
            Gets or sets the execution id of the result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ParentExecId">
            <summary>
            Gets or sets the parent execution id of the result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.InnerResultsCount">
            <summary>
            Gets or sets the inner results count of the result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.Duration">
            <summary>
            Gets or sets the duration of test execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DatarowIndex">
            <summary>
            Gets or sets the data row index in data source. Set only for results of individual
            run of data row of a data driven test.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ReturnValue">
            <summary>
            Gets or sets the return value of the test method. (Currently null always).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ResultFiles">
            <summary>
            Gets or sets the result files attached by the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout">
            <summary>
            Enumeration for timeouts, that can be used with the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute"/> class.
            The type of the enumeration must match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout.Infinite">
            <summary>
            The infinite.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute">
            <summary>
            Timeout attribute; used to specify the timeout of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute"/> class.
            </summary>
            <param name="timeout">
            The timeout in milliseconds.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute"/> class with a preset timeout.
            </summary>
            <param name="timeout">
            The timeout.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.Timeout">
            <summary>
            Gets the timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.CooperativeCancellation">
            <summary>
            Gets or sets a value indicating whether the test method should be cooperatively canceled on timeout.
            When set to <see langword="true"/>, the cancellation token is canceled on timeout, and the method completion is awaited.
            The test method and all the code it calls, must be designed in a way that it observes the cancellation and cancels
            cooperatively. If the test method does not complete, the timeout does not force it to complete.
            When set to <see langword="false"/>, the cancellation token is canceled on timeout, timeout result is reported and the
            method task will continue running on background. This may lead to conflicts in file access on test cleanup, unobserved
            exceptions, and memory leaks.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute">
            <summary>
            WorkItem attribute; used to specify a work item associated with this test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute"/> class for the WorkItem Attribute.
            </summary>
            <param name="id">The Id to a work item.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.Id">
            <summary>
            Gets the Id to a work item associated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod">
            <summary>
            Enumeration for how we access data rows in data driven testing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Sequential">
            <summary>
            Rows are returned in sequential order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random">
            <summary>
            Rows are returned in random order.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <summary>
            AssertFailedException class. Used to indicate failure for a test case.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> class.
            </summary>
            <param name="msg"> The message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> class.
            </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            <summary>
            The assert inconclusive exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException"/> class.
            </summary>
            <param name="msg"> The message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException"/> class.
            </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException">
            <summary>
            InternalTestFailureException class. Used to indicate internal failure for a test case.
            </summary>
            <remarks>
            This class is only added to preserve source compatibility with the V1 framework.
            For all practical purposes either use AssertFailedException/AssertInconclusiveException.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException"/> class.
            </summary>
            <param name="msg"> The exception message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException"/> class.
            </summary>
            <param name="msg"> The exception message. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException">
            <summary>
            Base class for Framework Exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException"/> class.
            </summary>
            <param name="msg"> The message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException"/> class.
            </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper">
            <summary>
            This class is designed to help user doing unit testing for types which uses generic types.
            GenericParameterHelper satisfies some common generic type constraints
            such as:
            1. public default constructor
            2. implements common interface: IComparable, IEnumerable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/> class that
            satisfies the 'newable' constraint in C# generics.
            </summary>
            <remarks>
            This constructor initializes the Data property to a random value.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/> class that
            initializes the Data property to a user-supplied value.
            </summary>
            <param name="data">Any integer value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data">
            <summary>
            Gets or sets the Data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Equals(System.Object)">
            <summary>
            Do the value comparison for two GenericParameterHelper object.
            </summary>
            <param name="obj">object to do comparison with.</param>
            <returns>true if obj has the same value as 'this' GenericParameterHelper object.
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetHashCode">
            <summary>
            Returns a hashcode for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.CompareTo(System.Object)">
            <summary>
            Compares the data of the two <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/> objects.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the object passed in is not an instance of <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetEnumerator">
            <summary>
            Returns an IEnumerator object whose length is derived from
            the Data property.
            </summary>
            <returns>The IEnumerator object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Clone">
            <summary>
            Returns a GenericParameterHelper object that is equal to
            the current object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource">
            <summary>
            Test data source for data driven tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource.GetData(System.Reflection.MethodInfo)">
            <summary>
            Gets the test data from custom test data source.
            </summary>
            <param name="methodInfo">
            The method info of test method.
            </param>
            <returns>
            Test data for calling test method.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Gets the display name corresponding to test data row for displaying in TestResults.
            </summary>
            <param name="methodInfo">
            The method info of test method.
            </param>
            <param name="data">
            The test data which is passed to test method.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod">
            <summary>
            TestMethod for execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.TestMethodName">
            <summary>
            Gets the name of test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.TestClassName">
            <summary>
            Gets the name of test class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.ReturnType">
            <summary>
            Gets the return type of test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.Arguments">
            <summary>
            Gets the arguments with which test method is invoked.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.ParameterTypes">
            <summary>
            Gets the parameters of test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.MethodInfo">
            <summary>
            Gets the methodInfo for test method.
            </summary>
            <remarks>
            This is just to retrieve additional information about the method.
            Do not directly invoke the method using MethodInfo. Use ITestMethod.Invoke instead.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.Invoke(System.Object[])">
            <summary>
            Invokes the test method.
            </summary>
            <param name="arguments">
            Arguments to pass to test method. (E.g. For data driven).
            </param>
            <returns>
            Result of test method invocation.
            </returns>
            <remarks>
            This call handles asynchronous test methods as well.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.GetAllAttributes(System.Boolean)">
            <summary>
            Get all attributes of the test method.
            </summary>
            <param name="inherit">
            Whether attribute defined in parent class is valid.
            </param>
            <returns>
            All attributes.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.GetAttributes``1(System.Boolean)">
            <summary>
            Get attribute of specific type.
            </summary>
            <typeparam name="TAttributeType"> System.Attribute type. </typeparam>
            <param name="inherit">
            Whether attribute defined in parent class is valid.
            </param>
            <returns>
            The attributes of the specified type.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DebugEx.Assert(System.Boolean,System.String)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Internal.TestDataSourceUtilities.GetHumanizedArguments(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy)">
            <summary>
            Recursively resolve collections of objects to a proper string representation.
            </summary>
            <param name="data">The method arguments.</param>
            <param name="testIdGenerationStrategy">The strategy for creating the test ID.</param>
            <returns>The humanized representation of the data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringEx.IsNullOrEmpty(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringEx.IsNullOrWhiteSpace(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper">
            <summary>
            Provides helper functionality for the unit test framework.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper.GetExceptionMsg(System.Exception)">
            <summary>
            Gets the exception messages, including the messages for all inner exceptions
            recursively.
            </summary>
            <param name="ex">Exception to get messages for.</param>
            <returns>string with error message information.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger">
            <summary>
            Enables users to log/write traces from unit tests for diagnostics.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.LogMessageHandler">
            <summary>
            Handler for LogMessage.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.OnLogMessage">
            <summary>
            Event to listen. Raised when unit test writer writes some message.
            Mainly to consume by adapter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.LogMessage(System.String,System.Object[])">
            <summary>
            API for test writer to call to Log messages.
            </summary>
            <param name="format">String format with placeholders.</param>
            <param name="args">Parameters for placeholders.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AccessStringInvalidSyntax">
            <summary>
              Looks up a localized string similar to Access string has invalid syntax..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ActualHasMismatchedElements">
            <summary>
              Looks up a localized string similar to The expected collection contains {1} occurrence(s) of &lt;{2}&gt;. The actual collection contains {3} occurrence(s). {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AllItemsAreUniqueFailMsg">
            <summary>
              Looks up a localized string similar to Duplicate item found:&lt;{1}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualCaseFailMsg">
            <summary>
              Looks up a localized string similar to Expected:&lt;{1}&gt;. Case is different for actual value:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualDeltaFailMsg">
            <summary>
              Looks up a localized string similar to Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualDifferentTypesFailMsg">
            <summary>
              Looks up a localized string similar to Expected:&lt;{1} ({2})&gt;. Actual:&lt;{3} ({4})&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualFailMsg">
            <summary>
              Looks up a localized string similar to Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreNotEqualDeltaFailMsg">
            <summary>
              Looks up a localized string similar to Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreNotEqualFailMsg">
            <summary>
              Looks up a localized string similar to Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreSameGivenValues">
            <summary>
              Looks up a localized string similar to Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ArgumentXMustDeriveFromClassY">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not assignable to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AssertionFailed">
            <summary>
              Looks up a localized string similar to {0} failed. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AsyncUITestMethodNotSupported">
            <summary>
              Looks up a localized string similar to async TestMethod with UITestMethodAttribute are not supported. Either remove async or use TestMethodAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AsyncUITestMethodWithNoDispatcherQueue">
            <summary>
              Looks up a localized string similar to UITestMethodAttribute.DispatcherQueue should not be null. To use UITestMethodAttribute within a WinUI Desktop App, remember to set the static UITestMethodAttribute.DispatcherQueue during the test initialization..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsEmpty">
            <summary>
              Looks up a localized string similar to Both collections are empty. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsSameElements">
            <summary>
              Looks up a localized string similar to Both collection contain same elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsSameReference">
            <summary>
              Looks up a localized string similar to Both collection references point to the same collection object. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothSameElements">
            <summary>
              Looks up a localized string similar to Both collections contain the same elements. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.CollectionEqualReason">
            <summary>
              Looks up a localized string similar to {0}({1}).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Common_NullInMessages">
            <summary>
              Looks up a localized string similar to (null).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Common_ObjectString">
            <summary>
              Looks up a localized string similar to (object).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ContainsFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not contain string &apos;{1}&apos;. {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DataDrivenResultDisplayName">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseAssertEquals">
            <summary>
              Looks up a localized string similar to Assert.Equals should not be used for Assertions. Please use Assert.AreEqual &amp; overloads instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataDisplayName">
            <summary>
              Looks up a localized string similar to Method {0} must match the expected signature: public static {1} {0}({2})..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataIEnumerableEmpty">
            <summary>
              Looks up a localized string similar to Property or method {0} on {1} returns empty IEnumerable&lt;object[]&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataIEnumerableNull">
            <summary>
              Looks up a localized string similar to Property or method {0} on {1} return type is not assignable to &apos;IEnumerable&lt;object[]&gt;&apos; (nor &apos;IEnumerable&lt;ITuple&gt;&apos; for .NET Core)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataInvalidMethodLayout">
            <summary>
              Looks up a localized string similar to Dynamic data method &apos;{0}&apos; should be static, parameterless and non-generic..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataInvalidPropertyLayout">
            <summary>
              Looks up a localized string similar to Dynamic data property &apos;{0}&apos; should be static and have a getter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataValueNull">
            <summary>
              Looks up a localized string similar to Value returned by property or method {0} shouldn&apos;t be null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementNumbersDontMatch">
            <summary>
              Looks up a localized string similar to The number of elements in the collections do not match. Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;.{0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementsAtIndexDontMatch">
            <summary>
              Looks up a localized string similar to Element at index {0} do not match..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementTypesAtIndexDontMatch">
            <summary>
              Looks up a localized string similar to Element at index {1} is not of expected type. Expected type:&lt;{2}&gt;. Actual type:&lt;{3}&gt;.{0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.EndsWithFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not end with string &apos;{1}&apos;. {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.InvalidPropertyType">
            <summary>
              Looks up a localized string similar to The property {0} has type {1}; expected type {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsInstanceOfFailMsg">
            <summary>
              Looks up a localized string similar to {0} Expected type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsMatchFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not match pattern &apos;{1}&apos;. {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNotInstanceOfFailMsg">
            <summary>
              Looks up a localized string similar to Wrong Type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNotMatchFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; matches pattern &apos;{1}&apos;. {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NoExceptionThrown">
            <summary>
              Looks up a localized string similar to Expected exception type:&lt;{1}&gt; but no exception was thrown. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NullParameterToAssert">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; is invalid. The value cannot be null. {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NumberOfElementsDiff">
            <summary>
              Looks up a localized string similar to Different number of elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.PrivateAccessorConstructorNotFound">
            <summary>
              Looks up a localized string similar to 
                 The constructor with the specified signature could not be found. You might need to regenerate your private accessor,
                 or the member may be private and defined on a base class. If the latter is true, you need to pass the type
                 that defines the member into PrivateObject&apos;s constructor.
               .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.PrivateAccessorMemberNotFound">
            <summary>
              Looks up a localized string similar to 
                 The member specified ({0}) could not be found. You might need to regenerate your private accessor,
                 or the member may be private and defined on a base class. If the latter is true, you need to pass the type
                 that defines the member into PrivateObject&apos;s constructor.
               .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.StartsWithFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not start with string &apos;{1}&apos;. {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_ExpectedExceptionTypeMustDeriveFromException">
            <summary>
              Looks up a localized string similar to The expected exception type must be System.Exception or a type derived from System.Exception..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_FailedToGetExceptionMessage">
            <summary>
              Looks up a localized string similar to (Failed to get the message for an exception of type {0} due to an exception.).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodNoException">
            <summary>
              Looks up a localized string similar to Test method did not throw expected exception {0}. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodNoExceptionDefault">
            <summary>
              Looks up a localized string similar to Test method did not throw an exception. An exception was expected by attribute {0} defined on the test method..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodWrongException">
            <summary>
              Looks up a localized string similar to Test method threw exception {0}, but exception {1} was expected. Exception message: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodWrongExceptionDerivedAllowed">
            <summary>
              Looks up a localized string similar to Test method threw exception {0}, but exception {1} or a type derived from it was expected. Exception message: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.WrongExceptionThrown">
            <summary>
              Looks up a localized string similar to Expected exception type:&lt;{1}&gt;. Actual exception type:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome">
            <summary>
            unit test outcomes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Failed">
            <summary>
            Test was executed, but there were issues.
            Issues may involve exceptions or failed assertions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Inconclusive">
            <summary>
            Test has completed, but we can't say if it passed or failed.
            May be used for aborted tests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed">
            <summary>
            Test was executed without any issues.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.InProgress">
            <summary>
            Test is currently executing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Error">
            <summary>
            There was a system error while we were trying to execute a test.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Timeout">
            <summary>
            The test timed out.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Aborted">
            <summary>
            Test was aborted by the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Unknown">
            <summary>
            Test is in an unknown state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.NotRunnable">
            <summary>
            Test cannot be executed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.NotFound">
            <summary>
            The specific test cannot be found.
            </summary>
        </member>
    </members>
</doc>
